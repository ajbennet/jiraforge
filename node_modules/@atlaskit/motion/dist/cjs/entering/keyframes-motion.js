"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _accessibility = require("../utils/accessibility");
var _durations = require("../utils/durations");
var _timerHooks = require("../utils/timer-hooks");
var _exitingPersistence = require("./exiting-persistence");
var _staggeredEntrance = require("./staggered-entrance");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
/**
 * These are props that motions should use as their external props for consumers.
 * See [FadeIn](packages/helpers/motion/src/entering/fade-in.tsx) for an example usage.
 */

/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */
var EnteringMotion = function EnteringMotion(_ref) {
  var children = _ref.children,
    animationTimingFunction = _ref.animationTimingFunction,
    _ref$animationTimingF = _ref.animationTimingFunctionExiting,
    animationTimingFunctionExiting = _ref$animationTimingF === void 0 ? animationTimingFunction : _ref$animationTimingF,
    enteringAnimation = _ref.enteringAnimation,
    _ref$exitingAnimation = _ref.exitingAnimation,
    exitingAnimation = _ref$exitingAnimation === void 0 ? enteringAnimation : _ref$exitingAnimation,
    isPaused = _ref.isPaused,
    onFinishMotion = _ref.onFinish,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 'large' : _ref$duration;
  var staggered = (0, _staggeredEntrance.useStaggeredEntrance)();
  var _useExitingPersistenc = (0, _exitingPersistence.useExitingPersistence)(),
    isExiting = _useExitingPersistenc.isExiting,
    onExitFinished = _useExitingPersistenc.onFinish,
    appear = _useExitingPersistenc.appear;
  var setTimeout = (0, _timerHooks.useSetTimeout)();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? 'exiting' : 'entering';
  var _useState = (0, _react.useState)(appear),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hasAnimationStyles = _useState2[0],
    setHasAnimationStyles = _useState2[1];
  (0, _react.useEffect)(function () {
    // Tracking this to prevent changing state on an unmounted component
    var isCancelled = false;
    if (paused) {
      return;
    }

    // On initial mount if elements aren't set to animate on appear, we return early and callback
    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    }

    // Elements may need animation styles back after initial mount (they could animate out)
    setHasAnimationStyles(true);
    setTimeout(function () {
      if (state === 'exiting') {
        onExitFinished && onExitFinished();
      }
      if (!isCancelled) {
        setHasAnimationStyles(false);
      }
      onFinishMotion && onFinishMotion(state);
    }, isExiting ? _durations.exitingDurations[duration] : _durations.durations[duration] + delay);
    return function () {
      isCancelled = true;
    };
    // We ignore this for onFinishMotion as consumers could potentially inline the function
    // which would then trigger this effect every re-render.
    // We want to make it easier for consumers so we go down this path unfortunately.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);
  return /*#__PURE__*/_react.default.createElement(_react2.ClassNames, null, function (_ref2) {
    var css = _ref2.css,
      cx = _ref2.cx;
    return children({
      ref: staggered.ref,
      className: hasAnimationStyles ? cx(css(_objectSpread(_objectSpread({}, _accessibility.reduceMotionAsPerUserPreference), {}, {
        animationDelay: "".concat(delay, "ms"),
        animationFillMode: 'backwards',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
        animationName: (0, _react2.keyframes)(enteringAnimation),
        animationPlayState: 'running'
      })), paused && css({
        animationPlayState: 'paused'
      }), duration === 'small' && css({
        animationDuration: '100ms'
      }), duration === 'medium' && css({
        animationDuration: '350ms'
      }), duration === 'large' && css({
        animationDuration: '700ms'
      }), isExiting && duration === 'small' && css({
        animationDuration: '50ms'
      }), isExiting && duration === 'medium' && css({
        animationDuration: '175ms'
      }), isExiting && duration === 'large' && css({
        animationDuration: '350ms'
      }), isExiting && css({
        animationDelay: '0ms',
        animationFillMode: 'forwards',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
        animationName: (0, _react2.keyframes)(exitingAnimation)
      }), !isExiting && animationTimingFunction === 'linear' && css({
        animationTimingFunction: 'cubic-bezier(0,0,1,1)'
      }), !isExiting && animationTimingFunction === 'ease-out' && css({
        animationTimingFunction: 'cubic-bezier(0.2,0,0,1)'
      }), !isExiting && animationTimingFunction === 'ease-in' && css({
        animationTimingFunction: 'cubic-bezier(0.8,0,0,0.8)'
      }), !isExiting && animationTimingFunction === 'ease-in-out' && css({
        animationTimingFunction: 'cubic-bezier(0.15,1,0.3,1)'
      }), isExiting && animationTimingFunction === 'linear' && css({
        animationTimingFunction: 'cubic-bezier(0,0,1,1)'
      }), isExiting && animationTimingFunctionExiting === 'ease-out' && css({
        animationTimingFunction: 'cubic-bezier(0.2,0,0,1)'
      }), isExiting && animationTimingFunctionExiting === 'ease-in' && css({
        animationTimingFunction: 'cubic-bezier(0.8,0,0,0.8)'
      }), isExiting && animationTimingFunctionExiting === 'ease-in-out' && css({
        animationTimingFunction: 'cubic-bezier(0.15,1,0.3,1)'
      })) : ''
    }, state);
  });
};
var _default = exports.default = EnteringMotion;