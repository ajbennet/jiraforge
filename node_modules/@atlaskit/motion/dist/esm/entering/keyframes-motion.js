import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { ClassNames, keyframes } from '@emotion/react';
import { reduceMotionAsPerUserPreference } from '../utils/accessibility';
import { durations, exitingDurations } from '../utils/durations';
import { useSetTimeout } from '../utils/timer-hooks';
import { useExitingPersistence } from './exiting-persistence';
import { useStaggeredEntrance } from './staggered-entrance';

/**
 * These are props that motions should use as their external props for consumers.
 * See [FadeIn](packages/helpers/motion/src/entering/fade-in.tsx) for an example usage.
 */

/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */
var EnteringMotion = function EnteringMotion(_ref) {
  var children = _ref.children,
    animationTimingFunction = _ref.animationTimingFunction,
    _ref$animationTimingF = _ref.animationTimingFunctionExiting,
    animationTimingFunctionExiting = _ref$animationTimingF === void 0 ? animationTimingFunction : _ref$animationTimingF,
    enteringAnimation = _ref.enteringAnimation,
    _ref$exitingAnimation = _ref.exitingAnimation,
    exitingAnimation = _ref$exitingAnimation === void 0 ? enteringAnimation : _ref$exitingAnimation,
    isPaused = _ref.isPaused,
    onFinishMotion = _ref.onFinish,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 'large' : _ref$duration;
  var staggered = useStaggeredEntrance();
  var _useExitingPersistenc = useExitingPersistence(),
    isExiting = _useExitingPersistenc.isExiting,
    onExitFinished = _useExitingPersistenc.onFinish,
    appear = _useExitingPersistenc.appear;
  var setTimeout = useSetTimeout();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? 'exiting' : 'entering';
  var _useState = useState(appear),
    _useState2 = _slicedToArray(_useState, 2),
    hasAnimationStyles = _useState2[0],
    setHasAnimationStyles = _useState2[1];
  useEffect(function () {
    // Tracking this to prevent changing state on an unmounted component
    var isCancelled = false;
    if (paused) {
      return;
    }

    // On initial mount if elements aren't set to animate on appear, we return early and callback
    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    }

    // Elements may need animation styles back after initial mount (they could animate out)
    setHasAnimationStyles(true);
    setTimeout(function () {
      if (state === 'exiting') {
        onExitFinished && onExitFinished();
      }
      if (!isCancelled) {
        setHasAnimationStyles(false);
      }
      onFinishMotion && onFinishMotion(state);
    }, isExiting ? exitingDurations[duration] : durations[duration] + delay);
    return function () {
      isCancelled = true;
    };
    // We ignore this for onFinishMotion as consumers could potentially inline the function
    // which would then trigger this effect every re-render.
    // We want to make it easier for consumers so we go down this path unfortunately.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);
  return /*#__PURE__*/React.createElement(ClassNames, null, function (_ref2) {
    var css = _ref2.css,
      cx = _ref2.cx;
    return children({
      ref: staggered.ref,
      className: hasAnimationStyles ? cx(css(_objectSpread(_objectSpread({}, reduceMotionAsPerUserPreference), {}, {
        animationDelay: "".concat(delay, "ms"),
        animationFillMode: 'backwards',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
        animationName: keyframes(enteringAnimation),
        animationPlayState: 'running'
      })), paused && css({
        animationPlayState: 'paused'
      }), duration === 'small' && css({
        animationDuration: '100ms'
      }), duration === 'medium' && css({
        animationDuration: '350ms'
      }), duration === 'large' && css({
        animationDuration: '700ms'
      }), isExiting && duration === 'small' && css({
        animationDuration: '50ms'
      }), isExiting && duration === 'medium' && css({
        animationDuration: '175ms'
      }), isExiting && duration === 'large' && css({
        animationDuration: '350ms'
      }), isExiting && css({
        animationDelay: '0ms',
        animationFillMode: 'forwards',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
        animationName: keyframes(exitingAnimation)
      }), !isExiting && animationTimingFunction === 'linear' && css({
        animationTimingFunction: 'cubic-bezier(0,0,1,1)'
      }), !isExiting && animationTimingFunction === 'ease-out' && css({
        animationTimingFunction: 'cubic-bezier(0.2,0,0,1)'
      }), !isExiting && animationTimingFunction === 'ease-in' && css({
        animationTimingFunction: 'cubic-bezier(0.8,0,0,0.8)'
      }), !isExiting && animationTimingFunction === 'ease-in-out' && css({
        animationTimingFunction: 'cubic-bezier(0.15,1,0.3,1)'
      }), isExiting && animationTimingFunction === 'linear' && css({
        animationTimingFunction: 'cubic-bezier(0,0,1,1)'
      }), isExiting && animationTimingFunctionExiting === 'ease-out' && css({
        animationTimingFunction: 'cubic-bezier(0.2,0,0,1)'
      }), isExiting && animationTimingFunctionExiting === 'ease-in' && css({
        animationTimingFunction: 'cubic-bezier(0.8,0,0,0.8)'
      }), isExiting && animationTimingFunctionExiting === 'ease-in-out' && css({
        animationTimingFunction: 'cubic-bezier(0.15,1,0.3,1)'
      })) : ''
    }, state);
  });
};
export default EnteringMotion;