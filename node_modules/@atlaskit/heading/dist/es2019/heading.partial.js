/* heading.partial.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./heading.partial.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { forwardRef } from 'react';
import { UNSAFE_inverseColorMap } from '@atlaskit/primitives';
import { UNSAFE_useSurface } from '@atlaskit/primitives/compiled';
import { useHeading } from './heading-context';
const sizeTagMap = {
  xxlarge: 'h1',
  xlarge: 'h1',
  large: 'h2',
  medium: 'h3',
  small: 'h4',
  xsmall: 'h5',
  xxsmall: 'h6'
};
const styles = {
  reset: "_1mouidpf _1dyz4jg8 _1p1dglyw"
};
const headingColorStylesMap = {
  'color.text': "_syaz1fxt",
  'color.text.inverse': "_syaz15cr",
  'color.text.warning.inverse': "_syazal3n"
};

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::c47bed69b7a147a63fdb8c394e98514a>>
 * @codegenId typography
 * @codegenCommand yarn workspace @atlaskit/heading codegen
 */
const headingSizeStylesMap = {
  xxlarge: "_11c813hg",
  xlarge: "_11c8iyik",
  large: "_11c81p5s",
  medium: "_11c8o0gd",
  small: "_11c81bk4",
  xsmall: "_11c81il0",
  xxsmall: "_11c816g6"
};
/**
 * @codegenEnd
 */

const useColor = colorProp => {
  const surface = UNSAFE_useSurface();

  /**
   * Where the color of the surface is inverted we always override the color
   * as there is no valid choice that is not covered by the override.
   */
  if (UNSAFE_inverseColorMap.hasOwnProperty(surface)) {
    return UNSAFE_inverseColorMap[surface];
  }
  return colorProp || 'color.text';
};

/**
 * __Heading__
 *
 * Heading is a typography component used to display text in defined sizes and styles.
 *
 * @example
 *
 * ```jsx
 * <Heading size="xxlarge">Page title</Heading>
 * ```
 */
const Heading = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    size,
    id,
    testId,
    as,
    color: colorProp
  } = props;
  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && as && typeof as !== 'string') {
    throw new Error('`as` prop should be a string.');
  }
  const [hLevel, inferredElement] = useHeading(sizeTagMap[size]);
  const Component = as || inferredElement;
  const needsAriaRole = Component === 'div' && hLevel;
  const color = useColor(colorProp);
  return /*#__PURE__*/React.createElement(Component, {
    id: id,
    ref: ref,
    "data-testid": testId,
    role: needsAriaRole ? 'heading' : undefined,
    "aria-level": needsAriaRole ? hLevel : undefined,
    className: ax([styles.reset, size && headingSizeStylesMap[size], headingColorStylesMap[color]])
  }, children);
});
export default Heading;