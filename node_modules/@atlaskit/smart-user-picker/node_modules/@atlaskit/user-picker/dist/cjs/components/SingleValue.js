"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SingleValue = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _avatar = require("@atlaskit/avatar");
var _react = require("@emotion/react");
var _select = require("@atlaskit/select");
var _SizeableAvatar = require("./SizeableAvatar");
var _utils = require("./utils");
var _verifiedTeamIcon = require("@atlaskit/people-teams-ui-public/verified-team-icon");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _primitives = require("@atlaskit/primitives");
var _excluded = ["ref"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var avatarItemComponent = (0, _react.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  border: 'none !important',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  padding: "var(--ds-space-0, 0px)".concat(" !important"),
  width: 'auto',
  overflow: 'hidden',
  minWidth: '100px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '& > span': {
    boxSizing: 'border-box'
  },
  '&:hover': {
    width: 'auto',
    padding: 0,
    border: 'none'
  }
});
var ElementAfter = function ElementAfter(props) {
  var data = props.data.data;
  if ((0, _utils.isTeam)(data) && data.verified) {
    return (0, _react.jsx)(_verifiedTeamIcon.VerifiedTeamIcon, null);
  }
  return null;
};
var SingleValue = exports.SingleValue = function SingleValue(props) {
  var _props$data = props.data,
    label = _props$data.label,
    data = _props$data.data,
    _props$selectProps = props.selectProps,
    appearance = _props$selectProps.appearance,
    isFocused = _props$selectProps.isFocused;
  return !isFocused ? (0, _react.jsx)(_select.components.SingleValue, props, (0, _react.jsx)(_avatar.AvatarItem, {
    backgroundColor: "transparent",
    avatar: (0, _react.jsx)(_SizeableAvatar.SizeableAvatar, {
      src: (0, _utils.getAvatarUrl)(data),
      appearance: appearance,
      type: (0, _utils.isTeam)(data) && (0, _platformFeatureFlags.fg)('verified-team-in-user-picker') ? 'team' : 'person'
    }),
    primaryText: (0, _platformFeatureFlags.fg)('verified-team-in-user-picker') ? (0, _react.jsx)(_primitives.Inline, {
      alignBlock: "center"
    }, label, (0, _react.jsx)(ElementAfter, props)) : label
  }, function (_ref) {
    var ref = _ref.ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _react.jsx)("div", (0, _extends2.default)({
      css: avatarItemComponent
    }, props));
  })) : null;
};