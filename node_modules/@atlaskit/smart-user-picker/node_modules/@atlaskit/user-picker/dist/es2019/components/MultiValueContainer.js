import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { components } from '@atlaskit/select';
import React, { Fragment } from 'react';
import ReactDOM from 'react-dom';
import { FormattedMessage } from 'react-intl-next';
import { messages } from './i18n';
import { isChildInput } from './utils';
import ValueContainerWrapper from './ValueContainerWrapper';
export class MultiValueContainer extends React.PureComponent {
  static getDerivedStateFromProps(nextProps, prevState) {
    return {
      valueSize: nextProps.getValue ? nextProps.getValue().length : 0,
      previousValueSize: prevState.valueSize
    };
  }
  constructor(props) {
    super(props);
    _defineProperty(this, "timeoutId", null);
    _defineProperty(this, "scrollToBottom", () => {
      this.timeoutId = window.setTimeout(() => {
        const {
          ref: {
            current
          }
        } = this.valueContainerInnerProps;
        if (current !== null) {
          const container = ReactDOM.findDOMNode(current);
          if (container instanceof HTMLDivElement) {
            container.scrollTop = container.scrollHeight;
          }
        }
        this.timeoutId = null;
      });
    });
    _defineProperty(this, "showPlaceholder", () => {
      const {
        selectProps: {
          value
        }
      } = this.props;
      return value && value.length > 0;
    });
    _defineProperty(this, "addPlaceholder", placeholder => {
      const children = React.Children.map(this.props.children, child => isChildInput(child) && this.showPlaceholder() ? /*#__PURE__*/React.cloneElement(child, {
        placeholder
      }) : child);
      return /*#__PURE__*/React.createElement(Fragment, null, children);
    });
    _defineProperty(this, "renderChildren", () => {
      const {
        //@ts-ignore react-select unsupported props
        selectProps: {
          addMoreMessage,
          isDisabled
        }
      } = this.props;
      // Do not render "Add more..." message if picker is disabled
      if (isDisabled) {
        return this.props.children;
      }
      if (addMoreMessage === undefined) {
        return /*#__PURE__*/React.createElement(FormattedMessage, messages.addMore, addMore => {
          var _join, _addMoreMessages;
          let addMoreMessages = addMore;
          if (addMore && typeof addMore === 'string') {
            addMoreMessages = [addMore];
          }
          const placeholder = (_join = (_addMoreMessages = addMoreMessages) === null || _addMoreMessages === void 0 ? void 0 : _addMoreMessages.join('')) !== null && _join !== void 0 ? _join : '';
          return this.addPlaceholder(placeholder);
        });
      }
      return this.addPlaceholder(addMoreMessage);
    });
    //@ts-ignore react-select unsupported props
    _defineProperty(this, "onValueContainerClick", this.props.selectProps.onValueContainerClick);
    this.state = {
      valueSize: 0,
      previousValueSize: 0
    };
    this.valueContainerInnerProps = {
      ref: /*#__PURE__*/React.createRef()
    };
  }
  componentDidUpdate() {
    const {
      previousValueSize,
      valueSize
    } = this.state;
    //@ts-ignore react-select unsupported props
    const {
      isFocused
    } = this.props.selectProps;
    if (valueSize > previousValueSize && isFocused) {
      if (this.timeoutId) {
        window.clearTimeout(this.timeoutId);
        this.timeoutId = null;
      }
      this.scrollToBottom();
    }
  }
  componentWillUnmount() {
    if (this.timeoutId) {
      window.clearTimeout(this.timeoutId);
    }
  }
  render() {
    const {
      children,
      innerProps,
      ...valueContainerProps
    } = this.props;
    const props = {
      ...valueContainerProps,
      innerProps: this.valueContainerInnerProps
    };
    return /*#__PURE__*/React.createElement(ValueContainerWrapper, {
      isEnabled: this.onValueContainerClick,
      onMouseDown: this.onValueContainerClick
    }, /*#__PURE__*/React.createElement(components.ValueContainer, props, this.renderChildren()));
  }
}