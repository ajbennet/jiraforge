import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { PopupSelect } from '@atlaskit/select';
import React from 'react';
import { getPopupComponents } from './components';
import { getPopupStyles } from './styles';
import { getPopupProps } from './popup';
import { BaseUserPickerWithoutAnalytics } from './BaseUserPicker';
export class PopupUserPickerWithoutAnalytics extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      flipped: false
    });
    _defineProperty(this, "handleFlipStyle", data => {
      const {
        flipped,
        styles: {
          transform
        },
        popper: {
          height
        }
      } = data;
      this.setState({
        flipped
      });
      if (!flipped) {
        return data;
      }
      data.styles.transform = transform + `translate(0, ${height}px) translate(0, -100%)`;
      return data;
    });
  }
  render() {
    const {
      target,
      popupTitle,
      boundariesElement,
      isMulti,
      offset,
      placement,
      rootBoundary,
      shouldFlip,
      styles
    } = this.props;
    const width = this.props.width;
    const selectStyles = getPopupStyles(width, isMulti, styles);
    return /*#__PURE__*/React.createElement(BaseUserPickerWithoutAnalytics, _extends({}, this.props, {
      SelectComponent: PopupSelect,
      width: width,
      styles: selectStyles,
      components: getPopupComponents(!!popupTitle),
      pickerProps: getPopupProps(width, target, this.handleFlipStyle, boundariesElement, offset, placement, rootBoundary, shouldFlip, popupTitle)
    }));
  }
}
_defineProperty(PopupUserPickerWithoutAnalytics, "defaultProps", {
  boundariesElement: 'viewport',
  width: 300,
  isMulti: false,
  offset: [0, 0],
  placement: 'auto',
  rootBoundary: 'viewport',
  shouldFlip: true
});
export const PopupUserPicker = withAnalyticsEvents()(PopupUserPickerWithoutAnalytics);