import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import Select, { CreatableSelect } from '@atlaskit/select';
import { UFOExperienceState } from '@atlaskit/ufo';
import React from 'react';
import { BaseUserPickerWithoutAnalytics } from './BaseUserPicker';
import { getStyles } from './styles';
import { getComponents } from './components';
import { getCreatableProps } from './creatable';
import { getCreatableSuggestedEmailProps } from './creatableEmailSuggestion';
import MessagesIntlProvider from './MessagesIntlProvider';
import { ExusUserSourceProvider } from '../clients/UserSourceProvider';
import { userPickerRenderedUfoExperience as experience, UfoErrorBoundary } from '../util/ufoExperiences';
import { v4 as uuidv4 } from 'uuid';
export class UserPickerWithoutAnalytics extends React.Component {
  constructor(props) {
    super(props);
    this.ufoId = uuidv4();
    const experienceForId = experience.getInstance(this.ufoId);
    if (![UFOExperienceState.IN_PROGRESS.id, UFOExperienceState.STARTED.id].includes(experienceForId.state.id)) {
      experienceForId.start();
    }
  }
  componentDidMount() {
    const experienceForId = experience.getInstance(this.ufoId);

    // Send UFO success if the experience is still in progress i.e. hasn't failed
    if ([UFOExperienceState.IN_PROGRESS.id, UFOExperienceState.STARTED.id].includes(experienceForId.state.id)) {
      experienceForId.success();
    }
  }
  render() {
    const {
      emailLabel,
      allowEmail,
      suggestEmailsForDomain,
      isMulti,
      isValidEmail,
      anchor,
      menuPortalTarget,
      menuPosition,
      menuShouldBlockScroll,
      captureMenuScroll,
      closeMenuOnScroll,
      loadUserSource,
      required = false
    } = this.props;
    const width = this.props.width;
    const SelectComponent = allowEmail ? CreatableSelect : Select;
    const creatableProps = suggestEmailsForDomain ? getCreatableSuggestedEmailProps(suggestEmailsForDomain, isValidEmail) : getCreatableProps(isValidEmail);
    const defaultPickerProps = {
      closeMenuOnScroll,
      menuPortalTarget,
      menuPosition,
      menuShouldBlockScroll,
      captureMenuScroll,
      required
    };
    const pickerProps = allowEmail ? {
      ...defaultPickerProps,
      ...creatableProps,
      emailLabel
    } : {
      ...defaultPickerProps
    };
    return /*#__PURE__*/React.createElement(UfoErrorBoundary, {
      id: this.ufoId
    }, /*#__PURE__*/React.createElement(MessagesIntlProvider, null, /*#__PURE__*/React.createElement(ExusUserSourceProvider, {
      fetchUserSource: loadUserSource
    }, /*#__PURE__*/React.createElement(BaseUserPickerWithoutAnalytics, _extends({}, this.props, {
      width: width,
      SelectComponent: SelectComponent
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      styles: getStyles(width, isMulti, this.props.appearance === 'compact', this.props.styles, this.props.isInvalid),
      components: getComponents(isMulti, anchor),
      pickerProps: pickerProps
    })))));
  }
}
_defineProperty(UserPickerWithoutAnalytics, "defaultProps", {
  width: 350,
  isMulti: false
});
export const UserPicker = withAnalyticsEvents()(UserPickerWithoutAnalytics);