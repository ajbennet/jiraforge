import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { components } from '@atlaskit/select';
const AsyncTooltip = /*#__PURE__*/React.lazy(() => import( /* webpackChunkName: "@atlaskit-internal_@atlaskit/tooltip" */'@atlaskit/tooltip').then(module => {
  return {
    default: module.default
  };
}));
export class ClearIndicator extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleMouseDown", event => {
      if (event && event.type === 'mousedown' && event.button !== 0) {
        return;
      }
      // Prevent focus when clear on blurred state
      const {
        clearValue,
        selectProps
      } = this.props;
      clearValue();
      //@ts-ignore react-select unsupported props
      if (selectProps && !selectProps.isFocused) {
        event.stopPropagation();
      }
    });
  }
  render() {
    const {
      //@ts-ignore react-select unsupported props
      selectProps: {
        clearValueLabel
      }
    } = this.props;
    const Indicator = /*#__PURE__*/React.createElement(components.ClearIndicator, _extends({}, this.props, {
      innerProps: {
        ...this.props.innerProps,
        onMouseDown: this.handleMouseDown
      }
    }));
    return clearValueLabel ? /*#__PURE__*/React.createElement(React.Suspense, {
      fallback: Indicator
    }, /*#__PURE__*/React.createElement(AsyncTooltip, {
      content: clearValueLabel
    }, Indicator)) : Indicator;
  }
}