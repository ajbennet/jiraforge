import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { components } from '@atlaskit/select';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import React from 'react';
import { SizeableAvatar } from './SizeableAvatar';
import { BORDER_PADDING } from './styles';
import ValueContainerWrapper from './ValueContainerWrapper';
const placeholderIconContainer = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  paddingLeft: BORDER_PADDING,
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: 0,
  gridArea: '1/1/2/2'
});
const showUserAvatar = (inputValue, value) => value && value.data && inputValue === value.label;
export class SingleValueContainer extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderAvatar", () => {
      const {
        hasValue,
        //@ts-ignore react-select unsupported props
        selectProps: {
          appearance,
          isFocused,
          inputValue,
          value,
          placeholderAvatar
        }
      } = this.props;
      if (isFocused || !hasValue) {
        return jsx(SizeableAvatar, {
          appearance: appearance,
          type: placeholderAvatar,
          src: showUserAvatar(inputValue, value) ? value.data.avatarUrl : undefined
        });
      }
      return null;
    });
    //@ts-ignore react-select unsupported props
    _defineProperty(this, "onValueContainerClick", this.props.selectProps.onValueContainerClick);
    _defineProperty(this, "Wrapper", ({
      children
    }) => {
      return this.onValueContainerClick ?
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values, jsx-a11y/no-static-element-interactions -- Ignored via go/DSP-18766
      jsx("div", {
        css: css({
          flexGrow: 1
        }),
        onMouseDown: this.onValueContainerClick
      }, children) : children;
    });
  }
  render() {
    const {
      children,
      ...valueContainerProps
    } = this.props;
    return jsx(ValueContainerWrapper, {
      isEnabled: this.onValueContainerClick,
      onMouseDown: this.onValueContainerClick
    }, jsx(components.ValueContainer, valueContainerProps, jsx("div", {
      css: placeholderIconContainer
    }, this.renderAvatar()), children));
  }
}