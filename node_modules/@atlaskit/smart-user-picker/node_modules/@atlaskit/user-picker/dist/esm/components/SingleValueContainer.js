import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["children"];
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { components } from '@atlaskit/select';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import React from 'react';
import { SizeableAvatar } from './SizeableAvatar';
import { BORDER_PADDING } from './styles';
import ValueContainerWrapper from './ValueContainerWrapper';
var placeholderIconContainer = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  paddingLeft: BORDER_PADDING,
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: 0,
  gridArea: '1/1/2/2'
});
var showUserAvatar = function showUserAvatar(inputValue, value) {
  return value && value.data && inputValue === value.label;
};
export var SingleValueContainer = /*#__PURE__*/function (_React$Component) {
  function SingleValueContainer() {
    var _this;
    _classCallCheck(this, SingleValueContainer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, SingleValueContainer, [].concat(args));
    _defineProperty(_this, "renderAvatar", function () {
      var _this$props = _this.props,
        hasValue = _this$props.hasValue,
        _this$props$selectPro = _this$props.selectProps,
        appearance = _this$props$selectPro.appearance,
        isFocused = _this$props$selectPro.isFocused,
        inputValue = _this$props$selectPro.inputValue,
        value = _this$props$selectPro.value,
        placeholderAvatar = _this$props$selectPro.placeholderAvatar;
      if (isFocused || !hasValue) {
        return jsx(SizeableAvatar, {
          appearance: appearance,
          type: placeholderAvatar,
          src: showUserAvatar(inputValue, value) ? value.data.avatarUrl : undefined
        });
      }
      return null;
    });
    //@ts-ignore react-select unsupported props
    _defineProperty(_this, "onValueContainerClick", _this.props.selectProps.onValueContainerClick);
    _defineProperty(_this, "Wrapper", function (_ref) {
      var children = _ref.children;
      return _this.onValueContainerClick ?
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values, jsx-a11y/no-static-element-interactions -- Ignored via go/DSP-18766
      jsx("div", {
        css: css({
          flexGrow: 1
        }),
        onMouseDown: _this.onValueContainerClick
      }, children) : children;
    });
    return _this;
  }
  _inherits(SingleValueContainer, _React$Component);
  return _createClass(SingleValueContainer, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        children = _this$props2.children,
        valueContainerProps = _objectWithoutProperties(_this$props2, _excluded);
      return jsx(ValueContainerWrapper, {
        isEnabled: this.onValueContainerClick,
        onMouseDown: this.onValueContainerClick
      }, jsx(components.ValueContainer, valueContainerProps, jsx("div", {
        css: placeholderIconContainer
      }, this.renderAvatar()), children));
    }
  }]);
}(React.Component);