import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["ref"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { AvatarItem } from '@atlaskit/avatar';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { components } from '@atlaskit/select';
import { SizeableAvatar } from './SizeableAvatar';
import { getAvatarUrl, isTeam } from './utils';
import { VerifiedTeamIcon } from '@atlaskit/people-teams-ui-public/verified-team-icon';
import { fg } from '@atlaskit/platform-feature-flags';
import { Inline } from '@atlaskit/primitives';
var avatarItemComponent = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  border: 'none !important',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  padding: "var(--ds-space-0, 0px)".concat(" !important"),
  width: 'auto',
  overflow: 'hidden',
  minWidth: '100px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '& > span': {
    boxSizing: 'border-box'
  },
  '&:hover': {
    width: 'auto',
    padding: 0,
    border: 'none'
  }
});
var ElementAfter = function ElementAfter(props) {
  var data = props.data.data;
  if (isTeam(data) && data.verified) {
    return jsx(VerifiedTeamIcon, null);
  }
  return null;
};
export var SingleValue = function SingleValue(props) {
  var _props$data = props.data,
    label = _props$data.label,
    data = _props$data.data,
    _props$selectProps = props.selectProps,
    appearance = _props$selectProps.appearance,
    isFocused = _props$selectProps.isFocused;
  return !isFocused ? jsx(components.SingleValue, props, jsx(AvatarItem, {
    backgroundColor: "transparent",
    avatar: jsx(SizeableAvatar, {
      src: getAvatarUrl(data),
      appearance: appearance,
      type: isTeam(data) && fg('verified-team-in-user-picker') ? 'team' : 'person'
    }),
    primaryText: fg('verified-team-in-user-picker') ? jsx(Inline, {
      alignBlock: "center"
    }, label, jsx(ElementAfter, props)) : label
  }, function (_ref) {
    var ref = _ref.ref,
      props = _objectWithoutProperties(_ref, _excluded);
    return jsx("div", _extends({
      css: avatarItemComponent
    }, props));
  })) : null;
};