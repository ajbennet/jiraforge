/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { createElement, forwardRef, Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { ClassNames, css, jsx } from '@emotion/react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Text } from '@atlaskit/primitives';
import { B200, B50, N30 } from '@atlaskit/theme/colors';
import { borderRadius } from '@atlaskit/theme/constants';
import { BORDER_WIDTH } from './constants';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
const avatarItemStyles = css({
  minWidth: 0,
  maxWidth: '100%',
  flex: '1 1 100%',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '1.4',
  paddingInlineStart: "var(--ds-space-100, 8px)"
});
const secondaryTextOldStyles = css({
  color: "var(--ds-text-subtlest, #626F86)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  fontSize: '0.85em'
});
const baseTextStyles = css({
  display: 'block',
  color: "var(--ds-text, #172B4D)"
});
const truncationStyles = css({
  overflowX: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
const getStyles = (css, {
  backgroundColor,
  isInteractive,
  isDisabled
}) =>
// eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @repo/internal/react/no-css-string-literals
css`
		align-items: center;
		background-color: ${backgroundColor};
		border-radius: ${borderRadius()}px;
		border: ${BORDER_WIDTH}px solid transparent;
		box-sizing: border-box;
		color: inherit;
		display: flex;
		font-size: inherit;
		font-style: normal;
		font-weight: ${"var(--ds-font-weight-regular, 400)"};
		line-height: 1;
		outline: none;
		margin: ${"var(--ds-space-0, 0px)"};
		padding: ${"var(--ds-space-050, 4px)"};
		text-align: left;
		text-decoration: none;
		width: 100%;

		${isInteractive && `
        :hover {
          background-color: ${`var(--ds-background-neutral-subtle-hovered, ${N30})`};
          cursor: pointer;
          text-decoration: none;
        }

        :focus {
          outline: none;
          border-color: ${`var(--ds-border-focused, ${B200})`};
        }

        :active {
          background-color: ${`var(--ds-background-neutral-subtle-pressed, ${B50})`};
        }
      `}

		${isDisabled && `
        cursor: not-allowed;
        opacity: ${"var(--ds-opacity-disabled, 0.5)"};
        pointer-events: none;
      `}
	`;

/**
 * __Avatar item__
 *
 * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-item/code)
 */
const AvatarItem = /*#__PURE__*/forwardRef(({
  avatar,
  backgroundColor = 'transparent',
  children,
  isTruncationDisabled,
  href,
  isDisabled,
  onClick,
  primaryText,
  secondaryText,
  target,
  testId,
  label
}, ref) => {
  const getTestId = (testId, children) => !children ? {
    'data-testid': `${testId}--itemInner`
  } : {
    testId: `${testId}--itemInner`
  };
  const componentProps = () => {
    if (isDisabled) {
      return {
        disabled: true
      };
    }

    // return only relevant props for either anchor or button elements
    return {
      ...(href && getLinkProps(href, target)),
      ...(onClick && !href ? getButtonProps(onClick) : {
        onClick
      })
    };
  };
  return jsx(ClassNames, null, ({
    css
  }) => {
    const props = {
      ref,
      className: getStyles(css, {
        backgroundColor,
        isInteractive: Boolean(onClick || href),
        isDisabled
      }),
      ...componentProps(),
      ...(testId && getTestId(testId, children)),
      ...((onClick || href) && {
        'aria-label': label
      }),
      children: jsx(Fragment, null, avatar, jsx("div", {
        css: avatarItemStyles
      }, fg('platform.design-system-team.avatar-item-font-size_830x6') ? jsx(Fragment, null, jsx(Text, {
        maxLines: isTruncationDisabled ? undefined : 1
      }, primaryText), jsx(Text, {
        color: "color.text.subtlest",
        maxLines: isTruncationDisabled ? undefined : 1,
        size: "UNSAFE_small"
      }, secondaryText)) : jsx(Fragment, null, jsx("span", {
        css: [baseTextStyles, !isTruncationDisabled && truncationStyles]
      }, primaryText), jsx("span", {
        css: [baseTextStyles, secondaryTextOldStyles, !isTruncationDisabled && truncationStyles]
      }, secondaryText))))
    };
    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);
  });
});
AvatarItem.displayName = 'AvatarItem';
export default AvatarItem;