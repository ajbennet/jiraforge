"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCloseOnEscapePress = useCloseOnEscapePress;
exports.useLayering = useLayering;
var _react = require("react");
var _bindEventListener = require("bind-event-listener");
var _layeringContext = require("../components/layering-context");
var ESCAPE = 'Escape';
/**
 * Calls back when the escape key is pressed.
 * To be used exclusively for closing layered components.
 * Use the `isDisabled` argument to ignore closing events.
 *
 * ```js
 * useCloseOnEscapePress({
 *   onClose: () => {},
 *   isDisabled: false,
 * });
 * ```
 */
function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose,
    isDisabled = _ref.isDisabled;
  var escapePressed = (0, _react.useRef)(false);
  var _useLayering = useLayering(),
    isLayerDisabled = _useLayering.isLayerDisabled;
  var onKeyDown = (0, _react.useCallback)(function (e) {
    var isDisabledLayer = isLayerDisabled();
    if (isDisabled || escapePressed.current || e.key !== ESCAPE || isDisabledLayer) {
      // We're either already handling the key down event or it's not escape or disabled.
      // Bail early!
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled, isLayerDisabled]);
  var onKeyUp = (0, _react.useCallback)(function () {
    escapePressed.current = false;
  }, []);
  (0, _react.useEffect)(function () {
    return (0, _bindEventListener.bindAll)(window, [{
      type: 'keydown',
      listener: onKeyDown
    }, {
      type: 'keyup',
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp]);
}

/**
 *
 * Layering hook to get layering info like the current level, the top level of the given component
 *
 */
function useLayering() {
  var currentLevel = (0, _react.useContext)(_layeringContext.LevelContext);
  var _useContext = (0, _react.useContext)(_layeringContext.TopLevelContext),
    topLevelRef = _useContext.topLevelRef;
  var isLayerDisabled = (0, _react.useCallback)(function () {
    return !!topLevelRef.current && currentLevel !== topLevelRef.current;
  }, [currentLevel, topLevelRef]);
  return {
    currentLevel: currentLevel,
    topLevelRef: topLevelRef,
    isLayerDisabled: isLayerDisabled
  };
}