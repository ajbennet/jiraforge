import React, { createContext, useContext, useEffect, useMemo, useRef } from 'react';
import __noop from '@atlaskit/ds-lib/noop';

/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
export var LevelContext = /*#__PURE__*/createContext(0);

/**
 *
 *  @internal
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
export var TopLevelContext = /*#__PURE__*/createContext({
  topLevelRef: {
    current: null
  },
  setTopLevel: __noop
});

/**
 *
 *  @internal
 * Context Provider Component which provider the current level of nested layers
 * It handles level management when it mounts and unmounts
 *
 */
var LevelProvider = function LevelProvider(_ref) {
  var children = _ref.children,
    currentLevel = _ref.currentLevel;
  var _useContext = useContext(TopLevelContext),
    setTopLevel = _useContext.setTopLevel,
    topLevelRef = _useContext.topLevelRef;
  if (topLevelRef.current === null || currentLevel > topLevelRef.current) {
    setTopLevel(currentLevel);
  }
  useEffect(function () {
    return function () {
      // avoid immediate cleanup using setTimeout when component unmount
      // this will make sure non-top layer components can get the correct top level value
      // when multiple layers trigger onClose in sequence
      setTimeout(function () {
        setTopLevel(currentLevel - 1);
      }, 0);
    };
  }, [setTopLevel, currentLevel]);
  return /*#__PURE__*/React.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};

/**
 *
 *  @internal
 * Context Provider Component which provides the top level of all nested layers
 * It provides initial top level ref value as 0 and set top level method
 *
 */
var LayeringProvider = function LayeringProvider(_ref2) {
  var children = _ref2.children;
  var topLevelRef = useRef(0);
  var value = useMemo(function () {
    return {
      topLevelRef: topLevelRef,
      setTopLevel: function setTopLevel(level) {
        topLevelRef.current = level;
      }
    };
  }, [topLevelRef]);
  return /*#__PURE__*/React.createElement(TopLevelContext.Provider, {
    value: value
  }, children);
};

/**
 *
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
export var Layering = function Layering(_ref3) {
  var children = _ref3.children,
    _ref3$isDisabled = _ref3.isDisabled,
    isDisabled = _ref3$isDisabled === void 0 ? true : _ref3$isDisabled;
  var currentLevel = useContext(LevelContext);
  if (isDisabled) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = /*#__PURE__*/React.createElement(LevelProvider, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : /*#__PURE__*/React.createElement(LayeringProvider, null, content);
};