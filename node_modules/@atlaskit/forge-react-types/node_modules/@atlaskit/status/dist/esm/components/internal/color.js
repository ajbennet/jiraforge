import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import EditorDoneIcon from '@atlaskit/icon/core/migration/check-mark--editor-done';
import { N50 } from '@atlaskit/theme/colors';
import { Pressable, xcss } from '@atlaskit/primitives';
import React, { PureComponent } from 'react';
import { FormattedMessage } from 'react-intl-next';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { ANALYTICS_HOVER_DELAY } from '../constants';
import { messages } from '../i18n';
var buttonStyles = xcss({
  height: '24px',
  width: '24px',
  background: 'color.background.neutral',
  padding: 'space.0',
  borderRadius: 'border.radius',
  borderWidth: 'border.width',
  borderStyle: 'solid',
  borderColor: 'color.border',
  display: 'block',
  overflow: 'hidden'
});

// We have tried with changing border and padding from 1px to token near version 2px,
// the pop - up is being expanded to two lines.
// eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview, @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/design-system/no-css-tagged-template-expression -- Ignored via go/DSP-18766
var buttonWrapperStyles = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\tborder: 1px solid transparent;\n\tmargin: 0 ", ";\n\tfont-size: 0;\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 1px;\n\tborder-radius: ", ";\n\t&:hover {\n\t\tborder: 1px solid ", ";\n\t}\n"])), "var(--ds-space-025, 2px)", "var(--ds-space-075, 6px)", "var(--ds-border, ".concat(N50, ")"));
var Color = /*#__PURE__*/function (_PureComponent) {
  function Color() {
    var _this;
    _classCallCheck(this, Color);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Color, [].concat(args));
    _defineProperty(_this, "hoverStartTime", 0);
    _defineProperty(_this, "onMouseEnter", function () {
      _this.hoverStartTime = Date.now();
    });
    _defineProperty(_this, "onMouseLeave", function () {
      var onHover = _this.props.onHover;
      var delay = Date.now() - _this.hoverStartTime;
      if (delay >= ANALYTICS_HOVER_DELAY && onHover) {
        onHover(_this.props.value);
      }
      _this.hoverStartTime = 0;
    });
    _defineProperty(_this, "onMouseDown", function (e) {
      e.preventDefault();
    });
    _defineProperty(_this, "onClick", function (e) {
      var _this$props = _this.props,
        onClick = _this$props.onClick,
        value = _this$props.value;
      e.preventDefault();
      onClick(value);
    });
    return _this;
  }
  _inherits(Color, _PureComponent);
  return _createClass(Color, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props,
        tabIndex = _this$props2.tabIndex,
        backgroundColor = _this$props2.backgroundColor,
        isSelected = _this$props2.isSelected,
        borderColor = _this$props2.borderColor,
        iconColor = _this$props2.iconColor,
        value = _this$props2.value,
        setRef = _this$props2.setRef;
      return jsx("li", {
        css: buttonWrapperStyles
      }, jsx(FormattedMessage, messages["".concat(value, "Color")], function (labels) {
        return jsx(Pressable, {
          xcss: buttonStyles,
          onClick: _this2.onClick,
          onMouseEnter: _this2.onMouseEnter,
          onMouseLeave: _this2.onMouseLeave,
          onMouseDown: _this2.onMouseDown,
          tabIndex: tabIndex,
          title: labels[0]
          // button element does not support aria-selected.
          // For button selected (to be precise pressed) or not
          //  use aria-pressed as per
          // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role#associated_aria_roles_states_and_properties
          ,
          "aria-pressed": isSelected,
          style: {
            backgroundColor: backgroundColor || 'transparent',
            // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
            color: iconColor,
            // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
            borderColor: borderColor
          },
          ref: setRef
        }, isSelected && jsx(EditorDoneIcon, {
          color: "currentColor",
          label: labels[0]
        }));
      }));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.hoverStartTime = 0;
    }
  }]);
}(PureComponent);
export { Color as default };