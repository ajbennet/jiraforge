import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import * as colors from '@atlaskit/theme/colors';
import React, { useEffect, useRef, useCallback, useState } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Color from './color';
import { fg } from '@atlaskit/platform-feature-flags';
var paletteLegacy = [['neutral', "var(--ds-background-neutral, ".concat(colors.N40, ")"), "var(--ds-border-bold, ".concat(colors.N400, ")"), "var(--ds-icon, ".concat(colors.N400, ")")], ['purple', "var(--ds-background-discovery, ".concat(colors.P50, ")"), "var(--ds-border-discovery, ".concat(colors.P400, ")"), "var(--ds-icon-discovery, ".concat(colors.P400, ")")], ['blue', "var(--ds-background-information, ".concat(colors.B50, ")"), "var(--ds-border-information, ".concat(colors.B400, ")"), "var(--ds-icon-information, ".concat(colors.B400, ")")], ['red', "var(--ds-background-danger, ".concat(colors.R50, ")"), "var(--ds-border-danger, ".concat(colors.R400, ")"), "var(--ds-icon-danger, ".concat(colors.R400, ")")], ['yellow', "var(--ds-background-warning, ".concat(colors.Y50, ")"), "var(--ds-border-warning, ".concat(colors.Y400, ")"), "var(--ds-icon-warning, ".concat(colors.Y400, ")")], ['green', "var(--ds-background-success, ".concat(colors.G50, ")"), "var(--ds-border-success, ".concat(colors.G400, ")"), "var(--ds-icon-success, ".concat(colors.G400, ")")]];
var paletteRefreshed = [['neutral', "var(--ds-background-accent-gray-subtler, ".concat(colors.N300, ")"), "var(--ds-border-bold, ".concat(colors.N400, ")"), "var(--ds-icon, ".concat(colors.N400, ")")], ['blue', "var(--ds-background-information-pressed, ".concat(colors.B300, ")"), "var(--ds-border-information, ".concat(colors.B400, ")"), "var(--ds-icon, ".concat(colors.N400, ")")], ['green', "var(--ds-background-success-pressed, ".concat(colors.G300, ")"), "var(--ds-border-success, ".concat(colors.G400, ")"), "var(--ds-icon, ".concat(colors.N400, ")")], ['yellow', "var(--ds-background-warning-pressed, ".concat(colors.Y300, ")"), "var(--ds-border-warning, ".concat(colors.Y400, ")"), "var(--ds-icon, ".concat(colors.N400, ")")], ['red', "var(--ds-background-danger-pressed, ".concat(colors.R300, ")"), "var(--ds-border-danger, ".concat(colors.R400, ")"), "var(--ds-icon, ".concat(colors.R400, ")")], ['purple', "var(--ds-background-discovery-pressed, ".concat(colors.P300, ")"), "var(--ds-border-discovery, ".concat(colors.P400, ")"), "var(--ds-icon, ".concat(colors.N400, ")")]];
var getPalette = function getPalette() {
  return fg('platform-component-visual-refresh') ? paletteRefreshed : paletteLegacy;
};
var palette = getPalette();

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/design-system/no-css-tagged-template-expression -- Ignored via go/DSP-18766
var colorPaletteWrapperStyles = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\tpadding-left: 0px;\n\tmargin: ", " ", " 0 ", ";\n\t/* Firefox bug fix: https://product-fabric.atlassian.net/browse/ED-1789 */\n\tdisplay: flex;\n\tflex-wrap: wrap;\n"])), "var(--ds-space-100, 8px)", "var(--ds-space-100, 8px)", "var(--ds-space-100, 8px)");
var VK_LEFT = 37; //ArrowLeft
var VK_RIGHT = 39; //ArrowRight
var VK_UP = 38; //ArrowUp
var VK_DOWN = 40; //ArrowDown
var VK_TAB = 9;
export default (function (_ref) {
  var _ref$cols = _ref.cols,
    cols = _ref$cols === void 0 ? 7 : _ref$cols,
    onClick = _ref.onClick,
    selectedColor = _ref.selectedColor,
    className = _ref.className,
    onHover = _ref.onHover;
  var colorRefs = useRef([]);
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    currentFocusedColor = _useState2[0],
    setCurrentFocusedColor = _useState2[1];
  useEffect(function () {
    colorRefs.current = colorRefs.current.slice(0, palette.length);
  }, []);
  var memoizedHandleKeyDown = useCallback(function (e) {
    var newColorIndex = null;
    var nextColor = function nextColor() {
      return currentFocusedColor + 1 > palette.length - 1 ? 0 : currentFocusedColor + 1;
    };
    var previousColor = function previousColor() {
      return currentFocusedColor - 1 < 0 ? palette.length - 1 : currentFocusedColor - 1;
    };
    switch (e.keyCode) {
      case VK_RIGHT:
      case VK_DOWN:
        e.preventDefault();
        newColorIndex = nextColor();
        break;
      case VK_LEFT:
      case VK_UP:
        e.preventDefault();
        newColorIndex = previousColor();
        break;
      case VK_TAB:
        setCurrentFocusedColor(0);
        break;
    }
    if (newColorIndex === null) {
      return;
    }
    setCurrentFocusedColor(newColorIndex);
    var newRef = colorRefs.current[newColorIndex];
    newRef === null || newRef === void 0 || newRef.focus();
  }, [currentFocusedColor, setCurrentFocusedColor, colorRefs]);
  return (
    /**
        We need to disable below eslint rule becuase of role "radiogroup". This role was added
        in https://a11y-internal.atlassian.net/browse/AK-832 to fix accessibility issue.
        When we migrated to emotion from styled component, we started getting this error.
        Task added in https://product-fabric.atlassian.net/wiki/spaces/E/pages/3182068181/Potential+improvements#Moderate-changes.
       */
    // eslint-disable-next-line jsx-a11y/interactive-supports-focus, jsx-a11y/no-noninteractive-element-interactions
    jsx("ul", {
      css: colorPaletteWrapperStyles
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: className,
      style: {
        maxWidth: cols * 32
      },
      onKeyDown: memoizedHandleKeyDown
    }, palette.map(function (_ref2, i) {
      var _ref3 = _slicedToArray(_ref2, 4),
        colorValue = _ref3[0],
        backgroundColor = _ref3[1],
        borderColor = _ref3[2],
        iconColor = _ref3[3];
      return jsx(Color, {
        key: colorValue,
        value: colorValue,
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        iconColor: iconColor,
        onClick: onClick,
        onHover: onHover,
        isSelected: colorValue === selectedColor,
        tabIndex: i === 0 ? 0 : -1,
        setRef: function setRef(el) {
          return colorRefs.current[i] = el;
        }
      });
    }))
  );
});