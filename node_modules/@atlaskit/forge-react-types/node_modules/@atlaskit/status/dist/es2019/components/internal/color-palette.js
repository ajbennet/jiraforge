/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import * as colors from '@atlaskit/theme/colors';
import React, { useEffect, useRef, useCallback, useState } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Color from './color';
import { fg } from '@atlaskit/platform-feature-flags';
const paletteLegacy = [['neutral', `var(--ds-background-neutral, ${colors.N40})`, `var(--ds-border-bold, ${colors.N400})`, `var(--ds-icon, ${colors.N400})`], ['purple', `var(--ds-background-discovery, ${colors.P50})`, `var(--ds-border-discovery, ${colors.P400})`, `var(--ds-icon-discovery, ${colors.P400})`], ['blue', `var(--ds-background-information, ${colors.B50})`, `var(--ds-border-information, ${colors.B400})`, `var(--ds-icon-information, ${colors.B400})`], ['red', `var(--ds-background-danger, ${colors.R50})`, `var(--ds-border-danger, ${colors.R400})`, `var(--ds-icon-danger, ${colors.R400})`], ['yellow', `var(--ds-background-warning, ${colors.Y50})`, `var(--ds-border-warning, ${colors.Y400})`, `var(--ds-icon-warning, ${colors.Y400})`], ['green', `var(--ds-background-success, ${colors.G50})`, `var(--ds-border-success, ${colors.G400})`, `var(--ds-icon-success, ${colors.G400})`]];
const paletteRefreshed = [['neutral', `var(--ds-background-accent-gray-subtler, ${colors.N300})`, `var(--ds-border-bold, ${colors.N400})`, `var(--ds-icon, ${colors.N400})`], ['blue', `var(--ds-background-information-pressed, ${colors.B300})`, `var(--ds-border-information, ${colors.B400})`, `var(--ds-icon, ${colors.N400})`], ['green', `var(--ds-background-success-pressed, ${colors.G300})`, `var(--ds-border-success, ${colors.G400})`, `var(--ds-icon, ${colors.N400})`], ['yellow', `var(--ds-background-warning-pressed, ${colors.Y300})`, `var(--ds-border-warning, ${colors.Y400})`, `var(--ds-icon, ${colors.N400})`], ['red', `var(--ds-background-danger-pressed, ${colors.R300})`, `var(--ds-border-danger, ${colors.R400})`, `var(--ds-icon, ${colors.R400})`], ['purple', `var(--ds-background-discovery-pressed, ${colors.P300})`, `var(--ds-border-discovery, ${colors.P400})`, `var(--ds-icon, ${colors.N400})`]];
const getPalette = () => fg('platform-component-visual-refresh') ? paletteRefreshed : paletteLegacy;
const palette = getPalette();

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/design-system/no-css-tagged-template-expression -- Ignored via go/DSP-18766
const colorPaletteWrapperStyles = css`
	padding-left: 0px;
	margin: ${"var(--ds-space-100, 8px)"} ${"var(--ds-space-100, 8px)"} 0 ${"var(--ds-space-100, 8px)"};
	/* Firefox bug fix: https://product-fabric.atlassian.net/browse/ED-1789 */
	display: flex;
	flex-wrap: wrap;
`;
const VK_LEFT = 37; //ArrowLeft
const VK_RIGHT = 39; //ArrowRight
const VK_UP = 38; //ArrowUp
const VK_DOWN = 40; //ArrowDown
const VK_TAB = 9;
export default (({
  cols = 7,
  onClick,
  selectedColor,
  className,
  onHover
}) => {
  const colorRefs = useRef([]);
  const [currentFocusedColor, setCurrentFocusedColor] = useState(0);
  useEffect(() => {
    colorRefs.current = colorRefs.current.slice(0, palette.length);
  }, []);
  const memoizedHandleKeyDown = useCallback(e => {
    let newColorIndex = null;
    const nextColor = () => currentFocusedColor + 1 > palette.length - 1 ? 0 : currentFocusedColor + 1;
    const previousColor = () => currentFocusedColor - 1 < 0 ? palette.length - 1 : currentFocusedColor - 1;
    switch (e.keyCode) {
      case VK_RIGHT:
      case VK_DOWN:
        e.preventDefault();
        newColorIndex = nextColor();
        break;
      case VK_LEFT:
      case VK_UP:
        e.preventDefault();
        newColorIndex = previousColor();
        break;
      case VK_TAB:
        setCurrentFocusedColor(0);
        break;
    }
    if (newColorIndex === null) {
      return;
    }
    setCurrentFocusedColor(newColorIndex);
    const newRef = colorRefs.current[newColorIndex];
    newRef === null || newRef === void 0 ? void 0 : newRef.focus();
  }, [currentFocusedColor, setCurrentFocusedColor, colorRefs]);
  return (
    /**
        We need to disable below eslint rule becuase of role "radiogroup". This role was added
        in https://a11y-internal.atlassian.net/browse/AK-832 to fix accessibility issue.
        When we migrated to emotion from styled component, we started getting this error.
        Task added in https://product-fabric.atlassian.net/wiki/spaces/E/pages/3182068181/Potential+improvements#Moderate-changes.
       */
    // eslint-disable-next-line jsx-a11y/interactive-supports-focus, jsx-a11y/no-noninteractive-element-interactions
    jsx("ul", {
      css: colorPaletteWrapperStyles
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: className,
      style: {
        maxWidth: cols * 32
      },
      onKeyDown: memoizedHandleKeyDown
    }, palette.map(([colorValue, backgroundColor, borderColor, iconColor], i) => {
      return jsx(Color, {
        key: colorValue,
        value: colorValue,
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        iconColor: iconColor,
        onClick: onClick,
        onHover: onHover,
        isSelected: colorValue === selectedColor,
        tabIndex: i === 0 ? 0 : -1,
        setRef: el => colorRefs.current[i] = el
      });
    }))
  );
});