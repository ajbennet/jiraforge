import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { PureComponent } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Lozenge from '@atlaskit/lozenge';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createStatusAnalyticsAndFire } from './analytics';
import { ANALYTICS_HOVER_DELAY } from './constants';

// Disabling linting for nextline since these values are used as text reference, but not used as part of the CSS
// eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/design-system/ensure-design-token-usage/preview

/* eslint-disable @atlaskit/design-system/ensure-design-token-usage, @atlaskit/design-system/ensure-design-token-usage/preview */
const colorToLozengeAppearanceMap = {
  neutral: 'default',
  purple: 'new',
  blue: 'inprogress',
  red: 'removed',
  yellow: 'moved',
  green: 'success'
};
/* eslint-enable @atlaskit/design-system/ensure-design-token-usage, @atlaskit/design-system/ensure-design-token-usage/preview */

const DEFAULT_APPEARANCE = 'default';
const MAX_WIDTH = 200;

/**
 * This is to account for a bug in android chromium and should be removed
 * when the editor fixes its focus handling with respect to Status.
 *
 * See DSP-7701 for additional context.
 */
const inlineBlockStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '& > *': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    display: 'inline-block !important',
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: '16px',
    verticalAlign: 'middle'
  }
});

// eg. Version/4.0 Chrome/95.0.4638.50
const isAndroidChromium = typeof window !== 'undefined' && /Version\/.* Chrome\/.*/.test(window.navigator.userAgent);
class StatusInternal extends PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "hoverStartTime", 0);
    _defineProperty(this, "handleMouseEnter", _e => {
      this.hoverStartTime = Date.now();
    });
    _defineProperty(this, "handleMouseLeave", _e => {
      const {
        onHover
      } = this.props;
      const delay = Date.now() - this.hoverStartTime;
      if (delay >= ANALYTICS_HOVER_DELAY && onHover) {
        onHover();
      }
      this.hoverStartTime = 0;
    });
  }
  componentWillUnmount() {
    this.hoverStartTime = 0;
  }
  render() {
    const {
      text,
      color,
      style,
      role,
      onClick,
      isBold
    } = this.props;
    if (text.trim().length === 0) {
      return null;
    }
    const appearance = colorToLozengeAppearanceMap[color] || DEFAULT_APPEARANCE;
    // Note: ommitted data-local-id attribute to avoid copying/pasting the same localId
    return (
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
      jsx("span", {
        css: isAndroidChromium ? inlineBlockStyles : undefined
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        ,
        className: "status-lozenge-span",
        onClick: onClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        "data-node-type": "status",
        "data-color": color,
        "data-style": style,
        role: role
      }, jsx(Lozenge, {
        appearance: appearance,
        maxWidth: MAX_WIDTH,
        isBold: isBold
      }, text))
    );
  }
}
_defineProperty(StatusInternal, "displayName", 'StatusInternal');
export const Status = withAnalyticsEvents({
  onClick: (createEvent, props) => {
    const {
      localId
    } = props;
    return createStatusAnalyticsAndFire(createEvent)({
      action: 'clicked',
      actionSubject: 'statusLozenge',
      attributes: {
        localId
      }
    });
  },
  onHover: (createEvent, props) => {
    const {
      localId
    } = props;
    return createStatusAnalyticsAndFire(createEvent)({
      action: 'hovered',
      actionSubject: 'statusLozenge',
      attributes: {
        localId
      }
    });
  }
})(StatusInternal);