/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo, useRef } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import CheckboxIcon from '@atlaskit/icon/glyph/checkbox';
import Item from './Item';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel } from '../analytics';
import { checkboxStyles } from './styles';
var taskCount = 0;
var getCheckBoxId = function getCheckBoxId(localId) {
  return "".concat(localId, "-").concat(taskCount++);
};
var TaskItem = function TaskItem(props) {
  var appearance = props.appearance,
    isDone = props.isDone,
    isFocused = props.isFocused,
    isRenderer = props.isRenderer,
    contentRef = props.contentRef,
    children = props.children,
    placeholder = props.placeholder,
    showPlaceholder = props.showPlaceholder,
    disabled = props.disabled,
    dataAttributes = props.dataAttributes,
    taskId = props.taskId,
    onChange = props.onChange,
    onClick = props.onClick,
    createAnalyticsEvent = props.createAnalyticsEvent,
    inputRefFromProps = props.inputRef;
  var checkBoxId = useMemo(function () {
    return getCheckBoxId(taskId);
  }, [taskId]);
  var handleOnChange = useMemo(function () {
    return function (_evt) {
      var newIsDone = !isDone;
      if (onChange) {
        onChange(taskId, newIsDone);
      }
      var action = newIsDone ? 'checked' : 'unchecked';
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel({
          action: action,
          actionSubject: 'action',
          eventType: 'ui',
          attributes: {
            localId: taskId
          }
        })(createAnalyticsEvent);
      }
    };
  }, [onChange, taskId, isDone, createAnalyticsEvent]);
  var handleOnKeyPress = useMemo(function () {
    return function (event) {
      if (event.key === 'Enter') {
        handleOnChange(event);
      }
    };
  }, [handleOnChange]);
  var defaultInputRef = useRef(null);
  var inputRef = inputRefFromProps !== null && inputRefFromProps !== void 0 ? inputRefFromProps : defaultInputRef;
  var icon =
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  jsx("span", {
    css: checkboxStyles(isRenderer),
    contentEditable: false
  }, jsx("input", {
    id: checkBoxId,
    "aria-labelledby": "".concat(checkBoxId, "-wrapper"),
    name: checkBoxId,
    type: "checkbox",
    onChange: handleOnChange,
    onClick: onClick,
    checked: !!isDone,
    disabled: !!disabled,
    suppressHydrationWarning: true,
    onKeyPress: handleOnKeyPress,
    ref: inputRef
  }), jsx(CheckboxIcon, {
    label: "",
    isFacadeDisabled: true
  }));
  React.useEffect(function () {
    if (isFocused && inputRef.current) {
      var _inputRef$current, _inputRef$current2;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();
      setTimeout(function () {
        var _inputRef$current3;
        (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.focus();
      }, 100);
    }
  }, [isFocused, inputRef]);
  return jsx(Item, {
    appearance: appearance,
    contentRef: contentRef,
    icon: icon,
    placeholder: placeholder,
    showPlaceholder: showPlaceholder,
    itemType: "TASK",
    dataAttributes: dataAttributes,
    checkBoxId: checkBoxId
  }, children);
};

// This is to ensure that the "type" is exported, as it gets lost and not exported along with TaskItem after
// going through the high order component.

export default withAnalyticsEvents()(TaskItem);