import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { PureComponent } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FabricElementsAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
import { listStyles, taskListStyles } from './styles';
var TaskList = /*#__PURE__*/function (_PureComponent) {
  function TaskList() {
    _classCallCheck(this, TaskList);
    return _callSuper(this, TaskList, arguments);
  }
  _inherits(TaskList, _PureComponent);
  return _createClass(TaskList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        listId = _this$props.listId,
        children = _this$props.children;
      var listSize = React.Children.count(children);
      if (!children) {
        return null;
      }

      // Data attributes are required for copy and paste from rendered content
      // to the editor to preserve the task.
      // This allows the editor to differentiate between numbered and ordered lists,
      // and action items, which all share the common `<li>` element.
      // The value of `data-task-local-id` should be discarded upon paste, with a
      // a new uuid generated by the editor for the cloned content.
      return (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        jsx("div", {
          css: [listStyles, taskListStyles],
          "data-task-list-local-id": ""
        }, React.Children.map(children, function (child, idx) {
          var _ref = child.props,
            localId = _ref.localId;
          return jsx(FabricElementsAnalyticsContext, {
            data: {
              listLocalId: listId,
              listSize: listSize,
              position: idx
            }
          }, jsx("div", {
            key: idx,
            "data-task-local-id": localId || ''
          }, child));
        }))
      );
    }
  }]);
}(PureComponent);
export { TaskList as default };