/* TaskItem.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./TaskItem.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useMemo, useRef } from 'react';
import CheckboxIcon from '@atlaskit/icon/glyph/checkbox';
import Item from './Item';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel } from '../../analytics';
import { B100, B300, B400, B50, N10, N100, N20, N30, N70 } from '@atlaskit/theme/colors';

/**
 * References packages/design-system/checkbox/src/checkbox.tsx
 * To be used until mobile editor does not require legacy themed() API anymore,
 * which will allow migration to use @atlaskit/checkbox instead
 */
const checkboxStyles = null;
let taskCount = 0;
const getCheckBoxId = localId => `${localId}-${taskCount++}`;
const TaskItem = props => {
  const {
    appearance,
    isDone,
    isFocused,
    contentRef,
    children,
    placeholder,
    showPlaceholder,
    disabled,
    dataAttributes,
    taskId,
    onChange,
    onClick,
    createAnalyticsEvent,
    inputRef: inputRefFromProps
  } = props;
  const checkBoxId = useMemo(() => getCheckBoxId(taskId), [taskId]);
  const handleOnChange = useMemo(() => {
    return _evt => {
      const newIsDone = !isDone;
      if (onChange) {
        onChange(taskId, newIsDone);
      }
      const action = newIsDone ? 'checked' : 'unchecked';
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel({
          action,
          actionSubject: 'action',
          eventType: 'ui',
          attributes: {
            localId: taskId
          }
        })(createAnalyticsEvent);
      }
    };
  }, [onChange, taskId, isDone, createAnalyticsEvent]);
  const handleOnKeyPress = useMemo(() => event => {
    if (event.key === 'Enter') {
      handleOnChange(event);
    }
  }, [handleOnChange]);
  const defaultInputRef = useRef(null);
  const inputRef = inputRefFromProps !== null && inputRefFromProps !== void 0 ? inputRefFromProps : defaultInputRef;
  const icon = /*#__PURE__*/React.createElement("span", {
    contentEditable: false,
    className: ax(["_16jlidpf _1o9zidpf _i0dl1tcg _1bsb1tcg _4t3i1tcg _kqswh2mm _1wpzv2br _1snx1r31 _1746glyw _dx3f1o36 _1h5xidpf _sqizidpf _fs2cidpf _1smcidpf _oezm15vq _1l0615vq _1abj1mn3 _18a711so _16np1fmg _a27kkb7n _q3p7usvi _qhqx1nu9 _10cr1ssb _zfav1ssb _m7eu1ooe _l9o0n7od _1efjn7od _1u2istnw _32romag2 _1wn015vq _den51ekn _zh8l1b66 _g5w3stnw _whhepxbi _1stbpxbi _18tob3bt _1awt1ule _haf81ssb _ra781ssb _cr751ooe _1q8r7vkz _9l2s7vkz _1mh7kb7n _s3uktlke _1davidpf _8bo8stnw _psnc1ssb _4k421ssb _1rvv1ooe _13vl73ad _1t711tcg _1nuz1tcg _cs4qstnw _9j2j1ssb _1mwj1ssb _19l51ooe _12yy10ko _1miy1fmg _1umohh5a _tpz21qbb _k6dghh5a _1qduewfl _q8ftzyvw _1y9t1qbb _ut03zyvw _gi9h11d3 _1qp6unzk _wxkg11d3 _wo241dzn _c8dpunzk _d2dc1y1w _1eul1y1w _1bc71y1w _16fm1y1w _bhku1y1w _czfe1y1w _1gxg1y1w _19w01y1w _1x1y15t7"])
  }, /*#__PURE__*/React.createElement("input", {
    id: checkBoxId,
    "aria-labelledby": `${checkBoxId}-wrapper`,
    name: checkBoxId,
    type: "checkbox",
    onChange: handleOnChange,
    onClick: onClick,
    checked: !!isDone,
    disabled: !!disabled,
    suppressHydrationWarning: true,
    onKeyPress: handleOnKeyPress,
    ref: inputRef
  }), /*#__PURE__*/React.createElement(CheckboxIcon, {
    label: "",
    isFacadeDisabled: true
  }));
  React.useEffect(() => {
    if (isFocused && inputRef.current) {
      var _inputRef$current, _inputRef$current2;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();
      setTimeout(() => {
        var _inputRef$current3;
        (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.focus();
      }, 100);
    }
  }, [isFocused, inputRef]);
  return /*#__PURE__*/React.createElement(Item, {
    appearance: appearance,
    contentRef: contentRef,
    icon: icon,
    placeholder: placeholder,
    showPlaceholder: showPlaceholder,
    itemType: "TASK",
    dataAttributes: dataAttributes,
    checkBoxId: checkBoxId
  }, children);
};

// This is to ensure that the "type" is exported, as it gets lost and not exported along with TaskItem after
// going through the high order component.

export default withAnalyticsEvents()(TaskItem);