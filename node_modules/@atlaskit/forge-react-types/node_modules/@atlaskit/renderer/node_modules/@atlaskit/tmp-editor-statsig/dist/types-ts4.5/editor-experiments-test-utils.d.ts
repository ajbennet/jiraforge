/// <reference types="jest" />
import { type EditorExperimentOverrides } from './setup';
import { type EditorExperimentsConfig } from './experiments-config';
type DescribeBody = Parameters<typeof describe>[1];
/**
 * This is a utility function for testing editor experiments.
 *
 * @example Boolean experiment
 * ```ts
 * eeTest('example-boolean', {
 *   true: () => {
 *     expect(editorExperiment('example-boolean', true)).toBe(true);
 *     expect(editorExperiment('example-boolean', false)).toBe(false);
 *   },
 *   false: () => {
 *     expect(editorExperiment('example-boolean', false)).toBe(true);
 *     expect(editorExperiment('example-boolean', true)).toBe(false);
 *   },
 * })
 * ```
 *
 * @example Multivariate experiment
 * ```ts
 * eeTest('example-multivariate', {
 *   one: () => {
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'two')).toBe(false);
 *   },
 *   two: () => {
 *     expect(editorExperiment('example-multivariate', 'two')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(false);
 *   },
 *   three: () => {
 *     expect(editorExperiment('example-multivariate', 'three')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(false);
 *   },
 * })
 * ```
 *
 * API based on Legacy ffTest API
 * - https://hello.atlassian.net/wiki/spaces/AF/pages/2569505829/Task+Testing+your+feature+flag+in+platform+and+product#Legacy-API-lEGACY
 */
declare function eeTest<ExperimentName extends keyof EditorExperimentsConfig>(experimentName: ExperimentName, cases: EditorExperimentsConfig[ExperimentName]['defaultValue'] extends string ? Record<EditorExperimentsConfig[ExperimentName]['defaultValue'], DescribeBody> : {
    true: DescribeBody;
    false: DescribeBody;
}, otherExperiments?: EditorExperimentOverrides): void;
declare namespace eeTest {
    var describe: <ExperimentName extends "example-boolean" | "example-multivariate" | "test-new-experiments-package" | "basic-text-transformations" | "element-level-templates" | "add-media-from-url" | "nested-dnd" | "insert-menu-in-right-rail" | "support_table_in_comment" | "platform_editor_exp_lazy_node_views" | "platform_renderer_table_sticky_scrollbar" | "nested-expand-in-expand" | "editor_ai_-_multi_prompts" | "comment_on_bodied_extensions" | "advanced_layouts" | "support_table_in_comment_jira" | "platform_editor_ai-prompts-placeholder" | "nested-tables-in-tables" | "issue_view_action_items" | "contextual_formatting_toolbar" | "platform_editor_ai_unsplash_page_header" | "platform_editor_ai_advanced_prompts" | "expand_selection_range_to_include_inline_node" | "platform_editor_blockquote_in_text_formatting_menu" | "platform_editor_advanced_code_blocks" | "platform_editor_element_drag_and_drop_multiselect" | "live_pages_graceful_edit" | "platform_editor_contextual_formatting_toolbar_v2" | "platform_editor_ai_edit_response_in_preview" | "platform_editor_ai_jira_content_read_url" | "platform_editor_controls" | "platform_editor_nested_non_bodied_macros">(experimentName: ExperimentName, describeName: string) => {
        variant: (value: {
            'example-boolean': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'example-multivariate': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "one" | "two" | "three";
                defaultValue: "one" | "two" | "three";
            };
            'test-new-experiments-package': {
                productKeys: {
                    confluence: string;
                    jira: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'basic-text-transformations': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'element-level-templates': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'add-media-from-url': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'nested-dnd': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'insert-menu-in-right-rail': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            support_table_in_comment: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_exp_lazy_node_views: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_renderer_table_sticky_scrollbar: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'nested-expand-in-expand': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'editor_ai_-_multi_prompts': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "test" | "control";
                defaultValue: "test" | "control";
            };
            comment_on_bodied_extensions: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            advanced_layouts: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            support_table_in_comment_jira: {
                productKeys: {
                    jira: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            'platform_editor_ai-prompts-placeholder': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "test" | "control";
                defaultValue: "test" | "control";
            };
            'nested-tables-in-tables': {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            issue_view_action_items: {
                productKeys: {
                    jira: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            contextual_formatting_toolbar: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_ai_unsplash_page_header: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_ai_advanced_prompts: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            expand_selection_range_to_include_inline_node: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_blockquote_in_text_formatting_menu: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_advanced_code_blocks: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_element_drag_and_drop_multiselect: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            live_pages_graceful_edit: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "control" | "text-click-delayed" | "text-click-no-delay" | "initially-hide-toolbar";
                defaultValue: "control" | "text-click-delayed" | "text-click-no-delay" | "initially-hide-toolbar";
            };
            platform_editor_contextual_formatting_toolbar_v2: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "control" | "variant1" | "variant2";
                defaultValue: "control" | "variant1" | "variant2";
            };
            platform_editor_ai_edit_response_in_preview: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_ai_jira_content_read_url: {
                productKeys: {
                    jira: string;
                };
                param: string;
                typeGuard: typeof import("./type-guards").isBoolean;
                defaultValue: boolean;
            };
            platform_editor_controls: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "control" | "variant1";
                defaultValue: "control" | "variant1";
            };
            platform_editor_nested_non_bodied_macros: {
                productKeys: {
                    confluence: string;
                };
                param: string;
                typeGuard: (value: unknown) => value is "test" | "control";
                defaultValue: "test" | "control";
            };
        }[ExperimentName]["defaultValue"], describeBody: jest.EmptyFunction) => void;
        each: (describeBody: jest.EmptyFunction) => void;
    };
}
export { eeTest };
