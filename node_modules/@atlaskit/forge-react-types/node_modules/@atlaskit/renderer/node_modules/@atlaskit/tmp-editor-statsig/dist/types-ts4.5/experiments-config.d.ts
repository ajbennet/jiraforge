import { isBoolean } from './type-guards';
export type EditorExperimentsConfig = typeof editorExperimentsConfig;
/**
 * When adding a new experiment, you need to add it here.
 * Please follow the pattern established in the examples and any
 * existing experiments.
 */
export declare const editorExperimentsConfig: {
    'example-boolean': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'example-multivariate': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "one" | "two" | "three";
        defaultValue: "one" | "two" | "three";
    };
    'test-new-experiments-package': {
        productKeys: {
            confluence: string;
            jira: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'basic-text-transformations': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'element-level-templates': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'add-media-from-url': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'nested-dnd': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'insert-menu-in-right-rail': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    support_table_in_comment: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_exp_lazy_node_views: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_renderer_table_sticky_scrollbar: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'nested-expand-in-expand': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'editor_ai_-_multi_prompts': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
    comment_on_bodied_extensions: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    advanced_layouts: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    support_table_in_comment_jira: {
        productKeys: {
            jira: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'platform_editor_ai-prompts-placeholder': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
    'nested-tables-in-tables': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    issue_view_action_items: {
        productKeys: {
            jira: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    contextual_formatting_toolbar: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_ai_unsplash_page_header: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_ai_advanced_prompts: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    expand_selection_range_to_include_inline_node: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_blockquote_in_text_formatting_menu: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_advanced_code_blocks: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_element_drag_and_drop_multiselect: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    live_pages_graceful_edit: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "text-click-delayed" | "text-click-no-delay" | "initially-hide-toolbar";
        defaultValue: "control" | "text-click-delayed" | "text-click-no-delay" | "initially-hide-toolbar";
    };
    platform_editor_contextual_formatting_toolbar_v2: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "variant1" | "variant2";
        defaultValue: "control" | "variant1" | "variant2";
    };
    platform_editor_ai_edit_response_in_preview: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_ai_jira_content_read_url: {
        productKeys: {
            jira: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_controls: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "variant1";
        defaultValue: "control" | "variant1";
    };
    platform_editor_nested_non_bodied_macros: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
};
