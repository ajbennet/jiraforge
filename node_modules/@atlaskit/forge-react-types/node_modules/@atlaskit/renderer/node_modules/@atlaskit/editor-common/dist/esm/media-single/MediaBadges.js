import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from 'react';
import debounce from 'lodash/debounce';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
var MEDIA_BADGE_VISIBILITY_BREAKPOINT = 200;
var containerStyles = xcss({
  display: 'flex',
  position: 'absolute',
  top: 'space.0',
  right: 'space.0',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: "var(--ds-space-200, 16px)",
  gap: 'space.025',
  zIndex: 'card',
  height: 'fit-content',
  width: 'fit-content',
  margin: 'space.075'
});

// The above styles are used for both editor and renderer, and in renderer the
// document body is the main scroll area. This means it overscrolls the primary
// toolbar, where the z-index is "2". We have to hack in our own z-index less
// than that to ensure our badge appears under the toolbar when scrolled.
var hackedZIndexStyles = xcss({
  // @ts-ignore
  zIndex: '1'
});
var resizeOffsetStyles = xcss({
  right: 'space.150'
});
var smallBadgeStyles = xcss({
  margin: 'space.025'
});
var getBadgeSize = function getBadgeSize(width, height) {
  // width is the original width of image, not resized or currently rendered to user. Defaulting to medium for now
  return width && width < 70 || height && height < 70 ? 'small' : 'medium';
};
var getBadgeVisible = function getBadgeVisible(width, height) {
  if (!fg('platform_editor_support_media_badge_visibility')) {
    return true;
  }
  return width && width < MEDIA_BADGE_VISIBILITY_BREAKPOINT || height && height < MEDIA_BADGE_VISIBILITY_BREAKPOINT ? false : true;
};
export var MediaBadges = function MediaBadges(_ref) {
  var children = _ref.children,
    mediaElement = _ref.mediaElement,
    mediaWidth = _ref.mediaWidth,
    mediaHeight = _ref.mediaHeight,
    extendedResizeOffset = _ref.extendedResizeOffset,
    _ref$useMinimumZIndex = _ref.useMinimumZIndex,
    useMinimumZIndex = _ref$useMinimumZIndex === void 0 ? false : _ref$useMinimumZIndex;
  var _useState = useState(getBadgeSize(mediaWidth, mediaHeight)),
    _useState2 = _slicedToArray(_useState, 2),
    badgeSize = _useState2[0],
    setBadgeSize = _useState2[1];
  var _useState3 = useState(getBadgeVisible(mediaWidth, mediaHeight)),
    _useState4 = _slicedToArray(_useState3, 2),
    visible = _useState4[0],
    setVisible = _useState4[1];
  useEffect(function () {
    var observer = new ResizeObserver(debounce(function (entries) {
      var _entries = _slicedToArray(entries, 1),
        entry = _entries[0];
      var _entry$contentRect = entry.contentRect,
        width = _entry$contentRect.width,
        height = _entry$contentRect.height;
      setBadgeSize(getBadgeSize(width, height));
      if (fg('platform_editor_support_media_badge_visibility')) {
        setVisible(getBadgeVisible(width, height));
      }
    }));
    if (mediaElement) {
      // Ignored via go/ees005
      // eslint-disable-next-line @atlaskit/editor/no-as-casting
      observer.observe(mediaElement);
    }
    return function () {
      observer.disconnect();
    };
  }, [mediaElement]);
  if (typeof children === 'function') {
    children = children({
      badgeSize: badgeSize,
      visible: visible
    });
  }
  if (!mediaElement || React.Children.count(children) === 0) {
    return null;
  }
  return /*#__PURE__*/React.createElement(Box, {
    as: "div",
    testId: "media-badges",
    "data-media-badges": "true",
    contentEditable: false,
    xcss: [containerStyles, useMinimumZIndex && hackedZIndexStyles, extendedResizeOffset && resizeOffsetStyles, badgeSize === 'small' && smallBadgeStyles]
  }, children);
};