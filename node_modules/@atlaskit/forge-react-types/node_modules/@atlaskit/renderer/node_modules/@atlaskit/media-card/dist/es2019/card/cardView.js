/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import React, { useEffect, useState, useRef, useMemo } from 'react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { MimeTypeIcon } from '@atlaskit/media-ui/mime-type-icon';
import SpinnerIcon from '@atlaskit/spinner';
import Tooltip from '@atlaskit/tooltip';
import { useMergeRefs } from 'use-callback-ref';
import { messages } from '@atlaskit/media-ui';
import { createAndFireMediaCardEvent } from '../utils/analytics';
import { ImageRenderer } from './ui/imageRenderer/imageRenderer';
import { TitleBox } from './ui/titleBox/titleBox';
import { FailedTitleBox } from './ui/titleBox/failedTitleBox';
import { ProgressBar } from './ui/progressBar/progressBar';
import { PlayButton } from './ui/playButton/playButton';
import { TickBox } from './ui/tickBox/tickBox';
import { Blanket } from './ui/blanket/blanket';
import { ActionsBar } from './ui/actionsBar/actionsBar';
import { IconWrapper } from './ui/iconWrapper/iconWrapper';
import { PreviewUnavailable, CreatingPreview, FailedToUpload, FailedToLoad } from './ui/iconMessage';
import { isUploadError } from '../errors';
import { Wrapper, ImageContainer } from './ui/wrapper';
import { fileCardImageViewSelector } from './classnames';
import { useBreakpoint } from './useBreakpoint';
import OpenMediaViewerButton from './ui/openMediaViewerButton/openMediaViewerButton';
import { useCurrentValueRef } from '../utils/useCurrentValueRef';
import { SvgView } from './svgView';
export const CardViewBase = ({
  identifier,
  innerRef = null,
  onImageLoad,
  onImageError,
  dimensions,
  onClick,
  onMouseEnter,
  testId,
  metadata,
  status,
  selected,
  selectable,
  cardPreview,
  mediaCardCursor,
  shouldHideTooltip,
  progress,
  alt,
  resizeMode,
  onDisplayImage,
  nativeLazyLoad,
  forceSyncDisplay,
  actions,
  disableOverlay,
  titleBoxBgColor,
  titleBoxIcon,
  error,
  disableAnimation,
  openMediaViewerButtonRef = null,
  shouldOpenMediaViewer,
  overriddenCreationDate,
  onSvgError,
  onSvgLoad
}) => {
  const [didSvgRender, setDidSvgRender] = useState(false);
  const [didImageRender, setDidImageRender] = useState(false);
  const divRef = useRef(null);
  const prevCardPreviewRef = useRef();
  const breakpoint = useBreakpoint(dimensions === null || dimensions === void 0 ? void 0 : dimensions.width, divRef);
  useEffect(() => {
    // We should only switch didImageRender to false when cardPreview goes undefined, not when it is changed. as this method could be triggered after onImageLoad callback, falling on a race condition
    if (prevCardPreviewRef.current && !cardPreview) {
      setDidImageRender(false);
    }
    prevCardPreviewRef.current = cardPreview;
  }, [cardPreview]);
  const handleOnImageLoad = prevCardPreview => {
    if (prevCardPreview.dataURI !== (cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI)) {
      return;
    }
    /*
        We render the icon & icon message always, even if there is cardPreview available.
        If the image fails to load/render, the icon will remain, i.e. the user won't see a change until the root card decides to chage status to error.
        If the image renders successfully, we switch this variable to hide the icon & icon message behind the thumbnail in case the image has transparency.
        It is less likely that root component replaces a suceeded cardPreview for a failed one than the opposite case. Therefore we prefer to hide the icon instead show when the image fails, for a smoother transition
      */
    setDidImageRender(true);
    onImageLoad === null || onImageLoad === void 0 ? void 0 : onImageLoad(cardPreview);
  };
  const handleOnImageError = prevCardPreview => {
    if (prevCardPreview.dataURI !== (cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI)) {
      return;
    }
    setDidImageRender(false);
    onImageError === null || onImageError === void 0 ? void 0 : onImageError(cardPreview);
  };
  const shouldRenderPlayButton = () => {
    const {
      mediaType
    } = metadata || {};
    if (mediaType !== 'video' || !cardPreview) {
      return false;
    }
    return true;
  };
  const mergedRef = useMergeRefs([divRef, innerRef]);
  const getRenderConfigByStatus = () => {
    const {
      name,
      mediaType,
      mimeType
    } = metadata || {};
    const isZeroSize = metadata && metadata.size === 0;
    const defaultConfig = {
      renderTypeIcon: !didImageRender && !didSvgRender,
      renderImageRenderer: !didSvgRender,
      renderSvgView: mimeType === 'image/svg+xml',
      renderPlayButton: !!cardPreview && mediaType === 'video',
      renderBlanket: !disableOverlay,
      renderTitleBox: !disableOverlay,
      renderTickBox: !disableOverlay && !!selectable
    };
    const loadingConfig = {
      ...defaultConfig,
      renderPlayButton: false,
      renderTypeIcon: false,
      renderSpinner: !didImageRender && !didSvgRender
    };
    switch (status) {
      case 'uploading':
        return {
          ...defaultConfig,
          renderBlanket: !disableOverlay || mediaType !== 'video',
          isFixedBlanket: true,
          renderProgressBar: true
        };
      case 'processing':
        return {
          ...defaultConfig,
          iconMessage: !didImageRender && !isZeroSize ? jsx(CreatingPreview, {
            disableAnimation: disableAnimation
          }) : undefined
        };
      case 'complete':
        return defaultConfig;
      case 'error':
      case 'failed-processing':
        if (status === 'failed-processing' && mimeType === 'image/svg+xml') {
          return loadingConfig;
        }
        const baseErrorConfig = {
          ...defaultConfig,
          renderTypeIcon: true,
          renderImageRenderer: false,
          renderSvgView: false,
          renderTitleBox: false,
          renderPlayButton: false
        };
        let iconMessage;
        let customTitleMessage;
        if (isUploadError(error)) {
          iconMessage = jsx(FailedToUpload, null);
          customTitleMessage = messages.failed_to_upload;
        } else if (!metadata) {
          iconMessage = jsx(FailedToLoad, null);
        } else {
          iconMessage = jsx(PreviewUnavailable, null);
        }
        if (!disableOverlay) {
          const renderFailedTitleBox = !name || !!customTitleMessage;
          return {
            ...baseErrorConfig,
            renderTitleBox: !!name && !customTitleMessage,
            renderFailedTitleBox,
            iconMessage: !renderFailedTitleBox ? iconMessage : undefined,
            customTitleMessage
          };
        }
        return {
          ...baseErrorConfig,
          iconMessage
        };
      case 'loading-preview':
      case 'loading':
      default:
        return loadingConfig;
    }
  };
  const {
    renderTypeIcon,
    iconMessage,
    renderImageRenderer,
    renderSvgView,
    renderSpinner,
    renderPlayButton,
    renderBlanket,
    renderProgressBar,
    renderTitleBox,
    renderFailedTitleBox,
    renderTickBox,
    isFixedBlanket,
    customTitleMessage
  } = getRenderConfigByStatus();
  const shouldDisplayBackground = !cardPreview || !disableOverlay || status === 'error' || status === 'failed-processing';
  const isPlayButtonClickable = shouldRenderPlayButton() && !!disableOverlay;
  const isTickBoxSelectable = !disableOverlay && !!selectable && !selected;
  // Disable tooltip for Media Single
  const shouldDisplayTooltip = !disableOverlay && !shouldHideTooltip;
  const {
    mediaType,
    mimeType,
    name,
    createdAt
  } = metadata || {};
  const isTitleBoxVisible = renderTitleBox && name;
  const hasVisibleTitleBox = !!(isTitleBoxVisible || renderFailedTitleBox);
  const metadataRef = useCurrentValueRef(metadata);
  const actionsWithDetails = useMemo(() => {
    if (!actions) {
      return [];
    }
    return actions.map(action => ({
      ...action,
      handler: () => {
        if (!metadataRef.current) {
          action.handler();
        } else {
          action.handler({
            type: 'file',
            details: metadataRef.current
          });
        }
      }
    }));
  }, [actions, metadataRef]);
  const onSvgLoadBase = () => {
    setDidSvgRender(true);
    onSvgLoad === null || onSvgLoad === void 0 ? void 0 : onSvgLoad();
  };
  const contents = jsx(React.Fragment, null, jsx(ImageContainer, {
    centerElements: didSvgRender,
    testId: fileCardImageViewSelector,
    mediaName: name,
    status: status,
    progress: progress,
    selected: selected,
    source: cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.source
  }, renderTypeIcon && jsx(IconWrapper, {
    breakpoint: breakpoint,
    hasTitleBox: hasVisibleTitleBox
  }, jsx(MimeTypeIcon, {
    testId: "media-card-file-type-icon",
    mediaType: mediaType,
    mimeType: mimeType,
    name: name
  }), iconMessage), renderSpinner && jsx(IconWrapper, {
    breakpoint: breakpoint,
    hasTitleBox: hasVisibleTitleBox
  }, jsx(SpinnerIcon, {
    testId: "media-card-loading",
    interactionName: "media-card-loading"
  })), renderSvgView && identifier && jsx(SvgView, {
    identifier: identifier,
    resizeMode: resizeMode || 'crop',
    onError: onSvgError,
    onLoad: onSvgLoadBase,
    wrapperRef: divRef
  }), renderImageRenderer && jsx(ImageRenderer, {
    cardPreview: cardPreview,
    mediaType: (metadata === null || metadata === void 0 ? void 0 : metadata.mediaType) || 'unknown',
    alt: alt !== null && alt !== void 0 ? alt : name,
    resizeMode: resizeMode,
    onDisplayImage: onDisplayImage,
    onImageLoad: handleOnImageLoad,
    onImageError: handleOnImageError,
    nativeLazyLoad: nativeLazyLoad,
    forceSyncDisplay: forceSyncDisplay
  }), renderPlayButton && jsx(IconWrapper, {
    breakpoint: breakpoint,
    hasTitleBox: hasVisibleTitleBox
  }, jsx(PlayButton, null)), renderBlanket && jsx(Blanket, {
    isFixed: isFixedBlanket
  }), renderTitleBox && jsx(TitleBox, {
    name: name,
    createdAt: overriddenCreationDate !== null && overriddenCreationDate !== void 0 ? overriddenCreationDate : createdAt,
    breakpoint: breakpoint,
    titleBoxIcon: titleBoxIcon,
    titleBoxBgColor: titleBoxBgColor,
    hidden: !isTitleBoxVisible
  }), renderFailedTitleBox && jsx(FailedTitleBox, {
    breakpoint: breakpoint,
    customMessage: customTitleMessage
  }), renderProgressBar && jsx(ProgressBar, {
    progress: progress,
    breakpoint: breakpoint,
    positionBottom: !hasVisibleTitleBox
  }), renderTickBox && jsx(TickBox, {
    selected: selected
  })), disableOverlay || !actions || actions.length === 0 ? null : jsx(ActionsBar, {
    filename: name,
    actions: actionsWithDetails
  }));
  return jsx(React.Fragment, null, shouldOpenMediaViewer && jsx(OpenMediaViewerButton, {
    fileName: name !== null && name !== void 0 ? name : '',
    innerRef: openMediaViewerButtonRef,
    onClick: onClick
  }), jsx(Wrapper, {
    testId: testId || 'media-card-view',
    dimensions: dimensions,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    innerRef: mergedRef,
    breakpoint: breakpoint,
    mediaCardCursor: mediaCardCursor,
    disableOverlay: !!disableOverlay,
    selected: !!selected,
    displayBackground: shouldDisplayBackground,
    isPlayButtonClickable: isPlayButtonClickable,
    isTickBoxSelectable: isTickBoxSelectable,
    shouldDisplayTooltip: shouldDisplayTooltip
  }, shouldDisplayTooltip ? jsx(Tooltip, {
    content: name,
    position: "bottom",
    tag: "div"
  }, contents) : contents));
};
export const CardView = withAnalyticsEvents({
  onClick: createAndFireMediaCardEvent({
    eventType: 'ui',
    action: 'clicked',
    actionSubject: 'mediaCard',
    attributes: {}
  })
})(CardViewBase);