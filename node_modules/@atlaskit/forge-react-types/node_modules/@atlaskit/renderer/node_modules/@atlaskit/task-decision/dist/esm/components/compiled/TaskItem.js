/* TaskItem.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./TaskItem.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useMemo, useRef } from 'react';
import CheckboxIcon from '@atlaskit/icon/glyph/checkbox';
import Item from './Item';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel } from '../../analytics';
import { B100, B300, B400, B50, N10, N100, N20, N30, N70 } from '@atlaskit/theme/colors';

/**
 * References packages/design-system/checkbox/src/checkbox.tsx
 * To be used until mobile editor does not require legacy themed() API anymore,
 * which will allow migration to use @atlaskit/checkbox instead
 */
var checkboxStyles = null;
var taskCount = 0;
var getCheckBoxId = function getCheckBoxId(localId) {
  return "".concat(localId, "-").concat(taskCount++);
};
var TaskItem = function TaskItem(props) {
  var appearance = props.appearance,
    isDone = props.isDone,
    isFocused = props.isFocused,
    contentRef = props.contentRef,
    children = props.children,
    placeholder = props.placeholder,
    showPlaceholder = props.showPlaceholder,
    disabled = props.disabled,
    dataAttributes = props.dataAttributes,
    taskId = props.taskId,
    onChange = props.onChange,
    onClick = props.onClick,
    createAnalyticsEvent = props.createAnalyticsEvent,
    inputRefFromProps = props.inputRef;
  var checkBoxId = useMemo(function () {
    return getCheckBoxId(taskId);
  }, [taskId]);
  var handleOnChange = useMemo(function () {
    return function (_evt) {
      var newIsDone = !isDone;
      if (onChange) {
        onChange(taskId, newIsDone);
      }
      var action = newIsDone ? 'checked' : 'unchecked';
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel({
          action: action,
          actionSubject: 'action',
          eventType: 'ui',
          attributes: {
            localId: taskId
          }
        })(createAnalyticsEvent);
      }
    };
  }, [onChange, taskId, isDone, createAnalyticsEvent]);
  var handleOnKeyPress = useMemo(function () {
    return function (event) {
      if (event.key === 'Enter') {
        handleOnChange(event);
      }
    };
  }, [handleOnChange]);
  var defaultInputRef = useRef(null);
  var inputRef = inputRefFromProps !== null && inputRefFromProps !== void 0 ? inputRefFromProps : defaultInputRef;
  var icon = /*#__PURE__*/React.createElement("span", {
    contentEditable: false,
    className: ax(["_16jlidpf _1o9zidpf _i0dl1tcg _1bsb1tcg _4t3i1tcg _kqswh2mm _1wpzv2br _1snx1r31 _1746glyw _dx3f1o36 _1h5xidpf _sqizidpf _fs2cidpf _1smcidpf _oezm15vq _1l0615vq _1abj1mn3 _18a711so _16npddza _a27kkb7n _q3p7usvi _qhqx1nu9 _10cr1ssb _zfav1ssb _m7eu1ooe _l9o0n7od _1efjn7od _1u2istnw _32ro1kd8 _1wn015vq _den51ifg _zh8l1b66 _g5w3stnw _whhepxbi _1stbpxbi _18tob3bt _1awt1ule _haf81ssb _ra781ssb _cr751ooe _1q8r7vkz _9l2s7vkz _1mh7kb7n _s3uktlke _1davidpf _8bo8stnw _psnc1ssb _4k421ssb _1rvv1ooe _13vl73ad _1t711tcg _1nuz1tcg _cs4qstnw _9j2j1ssb _1mwj1ssb _19l51ooe _12yy12ci _1miyddza _1umo1ehr _tpz2eh7q _k6dg1ehr _1qduewfl _q8ft1j4g _1y9teh7q _ut031j4g _gi9h1kc0 _1qp6e69j _wxkg1kc0 _wo24xz7c _c8dpe69j _d2dc1ouc _1eul1ouc _1bc71ouc _16fm1ouc _bhku1ouc _czfe1ouc _1gxg1ouc _19w01ouc _1x1ysnw8"]),
    style: {
      "--_4mkb4g": ix("var(--ds-background-input, ".concat(N10, ")")),
      "--_vnm8xo": ix("var(--ds-border-input, ".concat(N100, ")")),
      "--_1z08gfx": ix("var(--ds-background-input-hovered, ".concat(N30, ")")),
      "--_14y1fod": ix("var(--ds-background-selected-bold-hovered, ".concat(B300, ")")),
      "--_jf353p": ix("var(--ds-icon-inverse, ".concat(N10, ")")),
      "--_1gcp7nr": ix("var(--ds-background-selected-bold, ".concat(B400, ")")),
      "--_1cd0fcx": ix("var(--ds-background-input-pressed, ".concat(B50, ")")),
      "--_rczcge": ix("var(--ds-border, ".concat(B50, ")")),
      "--_uq1ko9": ix("var(--ds-icon-inverse, ".concat(B400, ")")),
      "--_r5pknd": ix("var(--ds-background-disabled, ".concat(N20, ")")),
      "--_1xmcmw9": ix("var(--ds-icon-disabled, ".concat(N70, ")")),
      "--_18khk6": ix("2px solid ".concat("var(--ds-border-focused, ".concat(B100, ")")))
    }
  }, /*#__PURE__*/React.createElement("input", {
    id: checkBoxId,
    "aria-labelledby": "".concat(checkBoxId, "-wrapper"),
    name: checkBoxId,
    type: "checkbox",
    onChange: handleOnChange,
    onClick: onClick,
    checked: !!isDone,
    disabled: !!disabled,
    suppressHydrationWarning: true,
    onKeyPress: handleOnKeyPress,
    ref: inputRef
  }), /*#__PURE__*/React.createElement(CheckboxIcon, {
    label: "",
    isFacadeDisabled: true
  }));
  React.useEffect(function () {
    if (isFocused && inputRef.current) {
      var _inputRef$current, _inputRef$current2;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();
      setTimeout(function () {
        var _inputRef$current3;
        (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.focus();
      }, 100);
    }
  }, [isFocused, inputRef]);
  return /*#__PURE__*/React.createElement(Item, {
    appearance: appearance,
    contentRef: contentRef,
    icon: icon,
    placeholder: placeholder,
    showPlaceholder: showPlaceholder,
    itemType: "TASK",
    dataAttributes: dataAttributes,
    checkBoxId: checkBoxId
  }, children);
};

// This is to ensure that the "type" is exported, as it gets lost and not exported along with TaskItem after
// going through the high order component.

export default withAnalyticsEvents()(TaskItem);