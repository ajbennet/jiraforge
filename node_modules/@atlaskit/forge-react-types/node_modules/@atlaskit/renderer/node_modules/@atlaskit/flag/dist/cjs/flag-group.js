"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flagWidth = exports.default = exports.FlagGroupContext = void 0;
exports.useFlagGroup = useFlagGroup;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _motion = require("@atlaskit/motion");
var _portal = _interopRequireDefault(require("@atlaskit/portal"));
var _constants = require("@atlaskit/theme/constants");
var _visuallyHidden = _interopRequireDefault(require("@atlaskit/visually-hidden"));
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports

var gridSize = (0, _constants.gridSize)();
var flagWidth = exports.flagWidth = gridSize * 50;
var defaultFlagGroupContext = {
  onDismissed: _noop.default,
  isDismissAllowed: false
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var FlagGroupContext = exports.FlagGroupContext = /*#__PURE__*/(0, _react.createContext)(defaultFlagGroupContext);

// eslint-disable-next-line @repo/internal/react/require-jsdoc
function useFlagGroup() {
  return (0, _react.useContext)(FlagGroupContext);
}

// transition: none is set on first-of-type to prevent a bug in Firefox
// that causes a broken transition
var baseStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: flagWidth,
  position: 'absolute',
  insetBlockEnd: 0,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values
  transition: "transform ".concat(_motion.durations.medium, "ms ease-in-out"),
  // TODO: Use new breakpoints
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  '@media (max-width: 560px)': {
    width: '100vw'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':first-of-type': {
    transform: "translate(0,0)",
    transition: 'none'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':nth-of-type(n + 2)': {
    animationDuration: '0ms',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    transform: "translateX(0) translateY(100%) translateY(".concat(2 * gridSize, "px)")
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':nth-of-type(1)': {
    zIndex: 5
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':nth-of-type(2)': {
    zIndex: 4
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&:nth-of-type(n + 4)': {
    visibility: 'hidden'
  }
});

// Transform needed to push up while 1st flag is leaving
// Exiting time should match the exiting time of motion so is halved
var dismissAllowedStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&& + *': {
    transform: "translate(0, 0)",
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values
    transitionDuration: "".concat(_motion.exitingDurations.medium, "ms")
  }
});
var flagGroupContainerStyles = (0, _react2.css)({
  position: 'fixed',
  zIndex: 'flag',
  insetBlockEnd: "var(--ds-space-600, 48px)",
  insetInlineStart: "var(--ds-space-1000, 80px)",
  // TODO: Use new breakpoints
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  '@media (max-width: 560px)': {
    insetBlockEnd: 0,
    insetInlineStart: 0
  }
});

/**
 * __Flag group__
 *
 * A flag group is used to group a set of related flags, with entry and exit animations.
 *
 * - [Examples](https://atlassian.design/components/flag/flag-group/examples)
 * - [Code](https://atlassian.design/components/flag/flag-group/code)
 */
var FlagGroup = function FlagGroup(props) {
  var id = props.id,
    _props$label = props.label,
    label = _props$label === void 0 ? 'Flag notifications' : _props$label,
    _props$labelTag = props.labelTag,
    LabelTag = _props$labelTag === void 0 ? 'h2' : _props$labelTag,
    _props$shouldRenderTo = props.shouldRenderToParent,
    shouldRenderToParent = _props$shouldRenderTo === void 0 ? false : _props$shouldRenderTo,
    children = props.children,
    _props$onDismissed = props.onDismissed,
    onDismissed = _props$onDismissed === void 0 ? _noop.default : _props$onDismissed;
  var hasFlags = Array.isArray(children) ? children.length > 0 : Boolean(children);
  var dismissFlagContext = (0, _react.useMemo)(function () {
    return {
      onDismissed: onDismissed,
      isDismissAllowed: true
    };
  }, [onDismissed]);
  var renderChildren = function renderChildren() {
    return children && (0, _typeof2.default)(children) === 'object' ? _react.Children.map(children, function (flag, index) {
      var isDismissAllowed = index === 0;
      return (0, _react2.jsx)(_motion.SlideIn, {
        enterFrom: "left",
        fade: "inout",
        duration: "medium",
        animationTimingFunction: "ease-in"
      }, function (_ref) {
        var className = _ref.className,
          ref = _ref.ref;
        return (0, _react2.jsx)("div", {
          css: [baseStyles, isDismissAllowed && dismissAllowedStyles]
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
          ,
          className: className,
          ref: ref
        }, (0, _react2.jsx)(FlagGroupContext.Provider, {
          value:
          // Only the first flag should be able to be dismissed.
          isDismissAllowed ? dismissFlagContext : defaultFlagGroupContext
        }, flag));
      });
    }) : false;
  };
  var flags = (0, _react2.jsx)("div", {
    id: id,
    css: flagGroupContainerStyles
  }, hasFlags ? (0, _react2.jsx)(_visuallyHidden.default, null, (0, _react2.jsx)(LabelTag, null, label)) : null, (0, _react2.jsx)(_motion.ExitingPersistence, {
    appear: false
  }, renderChildren()));
  return shouldRenderToParent ? flags : (0, _react2.jsx)(_portal.default, {
    zIndex: _constants.layers.flag()
  }, flags);
};
var _default = exports.default = FlagGroup;