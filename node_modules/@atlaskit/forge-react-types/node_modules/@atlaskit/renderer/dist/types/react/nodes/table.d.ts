import React from 'react';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { OverflowShadowProps } from '@atlaskit/editor-common/ui';
import { SortOrder } from '@atlaskit/editor-common/types';
import type { RendererAppearance, StickyHeaderConfig } from '../../ui/Renderer/types';
import type { WithSmartCardStorageProps } from '../../ui/SmartCardStorage';
import type { StickyMode } from './table/sticky';
import { OverflowParent } from './table/sticky';
import type { SharedTableProps } from './table/types';
import { TableStickyScrollbar } from './TableStickyScrollbar';
export declare const isTableResizingEnabled: (appearance: RendererAppearance) => boolean;
export declare const isStickyScrollbarEnabled: (appearance: RendererAppearance) => boolean;
type TableProps = SharedTableProps & {
    children: React.ReactElement<any> | Array<React.ReactElement<any>>;
    tableNode?: PMNode;
    rendererAppearance?: RendererAppearance;
    allowColumnSorting?: boolean;
    stickyHeaders?: StickyHeaderConfig;
    allowTableAlignment?: boolean;
    allowTableResizing?: boolean;
};
interface TableOrderStatus {
    columnIndex: number;
    order: SortOrder;
}
interface TableState {
    stickyMode: StickyMode;
    wrapperWidth: number;
    headerRowHeight: number;
}
export declare class TableContainer extends React.Component<TableProps & OverflowShadowProps & WithSmartCardStorageProps, TableState> {
    state: TableState;
    tableRef: React.RefObject<HTMLTableElement>;
    stickyHeaderRef: React.RefObject<HTMLElement>;
    stickyScrollbarRef: React.RefObject<HTMLDivElement>;
    stickyWrapperRef: React.RefObject<HTMLDivElement>;
    wrapperRef: React.RefObject<HTMLDivElement>;
    stickyScrollbar?: TableStickyScrollbar;
    nextFrame: number | undefined;
    overflowParent: OverflowParent | null;
    private resizeObserver;
    private applyResizerChange;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TableProps, prevState: TableState): void;
    componentWillUnmount: () => void;
    getScrollTop: () => number;
    updateSticky: () => void;
    onScroll: () => void;
    onWrapperScrolled: () => void;
    get pinTop(): number | undefined;
    get shouldAddOverflowParentOffsetTop_DO_NOT_USE(): boolean | null | undefined;
    get stickyTop(): number | undefined;
    render(): React.JSX.Element;
    private grabFirstRowRef;
}
type TableProcessorState = {
    tableOrderStatus?: TableOrderStatus;
};
export declare class TableProcessor extends React.Component<TableProps & OverflowShadowProps & WithSmartCardStorageProps, TableProcessorState> {
    state: {
        tableOrderStatus: undefined;
    };
    render(): React.JSX.Element | null;
    private addSortableColumn;
    private changeSortOrder;
    private addNumberColumnIndexes;
}
declare const _default: {
    new (props: import("@atlaskit/editor-common/utils").Diff<{
        renderWidth?: number | undefined;
    } & Omit<SharedTableProps & {
        children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        tableNode?: PMNode | undefined;
        rendererAppearance?: RendererAppearance;
        allowColumnSorting?: boolean | undefined;
        stickyHeaders?: StickyHeaderConfig | undefined;
        allowTableAlignment?: boolean | undefined;
        allowTableResizing?: boolean | undefined;
    } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps> | Readonly<import("@atlaskit/editor-common/utils").Diff<{
        renderWidth?: number | undefined;
    } & Omit<SharedTableProps & {
        children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        tableNode?: PMNode | undefined;
        rendererAppearance?: RendererAppearance;
        allowColumnSorting?: boolean | undefined;
        stickyHeaders?: StickyHeaderConfig | undefined;
        allowTableAlignment?: boolean | undefined;
        allowTableResizing?: boolean | undefined;
    } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>): {
        render(): React.JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: import("@atlaskit/editor-common/utils").Diff<{
        renderWidth?: number | undefined;
    } & Omit<SharedTableProps & {
        children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        tableNode?: PMNode | undefined;
        rendererAppearance?: RendererAppearance;
        allowColumnSorting?: boolean | undefined;
        stickyHeaders?: StickyHeaderConfig | undefined;
        allowTableAlignment?: boolean | undefined;
        allowTableResizing?: boolean | undefined;
    } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>, context: any): {
        render(): React.JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("@atlaskit/editor-common/utils").Diff<{
            renderWidth?: number | undefined;
        } & Omit<SharedTableProps & {
            children: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
            tableNode?: PMNode | undefined;
            rendererAppearance?: RendererAppearance;
            allowColumnSorting?: boolean | undefined;
            stickyHeaders?: StickyHeaderConfig | undefined;
            allowTableAlignment?: boolean | undefined;
            allowTableResizing?: boolean | undefined;
        } & WithSmartCardStorageProps, "renderWidth">, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export default _default;
