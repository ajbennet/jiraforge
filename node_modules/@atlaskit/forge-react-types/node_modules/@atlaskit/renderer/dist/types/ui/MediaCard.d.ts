import React, { Component } from 'react';
import type { ADFEntity } from '@atlaskit/adf-utils/types';
import type { CardAppearance, CardDimensions, CardOnClickCallback, NumericalCardDimensions } from '@atlaskit/media-card';
import type { MediaClientConfig } from '@atlaskit/media-core';
import type { ImageResizeMode, Identifier, FileState, MediaClient } from '@atlaskit/media-client';
import type { MediaType } from '@atlaskit/adf-schema';
import type { ContextIdentifierProvider } from '@atlaskit/editor-common/provider-factory';
import type { ImageStatus } from '@atlaskit/editor-common/utils';
import type { MediaFeatureFlags } from '@atlaskit/media-common';
import type { RendererAppearance } from './Renderer/types';
import type { RendererContext } from '../react/types';
import type { MediaSSR } from '../types/mediaOptions';
export type MediaProvider = {
    viewMediaClientConfig: MediaClientConfig;
};
export interface MediaCardProps {
    id?: string;
    contextIdentifierProvider?: Promise<ContextIdentifierProvider>;
    eventHandlers?: {
        media?: {
            onClick?: CardOnClickCallback;
        };
    };
    shouldOpenMediaViewer?: boolean;
    type: MediaType;
    collection?: string;
    url?: string;
    cardDimensions?: CardDimensions;
    originalDimensions?: NumericalCardDimensions;
    resizeMode?: ImageResizeMode;
    appearance?: CardAppearance;
    rendererAppearance?: RendererAppearance;
    occurrenceKey?: string;
    imageStatus?: ImageStatus;
    disableOverlay?: boolean;
    useInlinePlayer?: boolean;
    rendererContext?: RendererContext;
    alt?: string;
    featureFlags?: MediaFeatureFlags;
    shouldEnableDownloadButton?: boolean;
    ssr?: MediaSSR;
    dataAttributes?: Record<string, any>;
}
interface State {
    contextIdentifierProvider?: ContextIdentifierProvider;
    fileState?: FileState;
}
export declare const mediaIdentifierMap: Map<string, Identifier>;
export declare const getListOfIdentifiersFromDoc: (doc?: ADFEntity) => Identifier[];
export declare class MediaCardView extends Component<MediaCardProps & {
    mediaClient?: MediaClient;
}, State> {
    state: State;
    componentDidMount(): Promise<void>;
    componentDidUpdate(prevProps: MediaCardProps): void;
    componentWillUnmount(): void;
    saveFileState: (id: string) => Promise<void>;
    private renderLoadingCard;
    private renderExternal;
    /**
     * We want to call provided `eventHandlers.media.onClick` when it's provided,
     * but we also don't want to call it when it's a video and inline video player is enabled.
     * This is due to consumers normally process this onClick call by opening media viewer and
     * we don't want that to happened described above text.
     */
    private getOnCardClickCallback;
    render(): React.JSX.Element | null;
}
export type ClipboardAttrs = {
    id: string;
    alt?: string;
    collection?: string;
    contextIdentifierProvider?: ContextIdentifierProvider;
    originalDimensions?: NumericalCardDimensions;
    fileState?: FileState;
};
export declare const getClipboardAttrs: ({ id, alt, collection, contextIdentifierProvider, originalDimensions, fileState, }: ClipboardAttrs) => {
    [key: string]: string | number | undefined;
};
export declare const MediaCardInternal: (props: MediaCardProps) => React.JSX.Element;
export declare const MediaCard: React.ComponentClass<MediaCardProps & import("@atlaskit/editor-common/utils").ImageLoaderProps, any>;
export {};
