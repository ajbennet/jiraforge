import { default as React } from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { RichMediaLayout as MediaSingleLayout } from '@atlaskit/adf-schema';
import type { MediaFeatureFlags } from '@atlaskit/media-common';
import type { EditorAppearance } from '@atlaskit/editor-common/types';
import type { EventHandlers, MediaSingleWidthType } from '@atlaskit/editor-common/ui';
import type { AnalyticsEventPayload } from '../../../analytics/events';
import type { RendererAppearance } from '../../../ui/Renderer/types';
export interface Props {
    children: React.ReactNode;
    layout: MediaSingleLayout;
    eventHandlers?: EventHandlers;
    width?: number;
    widthType?: MediaSingleWidthType;
    isInsideOfBlockNode?: boolean;
    rendererAppearance: RendererAppearance;
    fireAnalyticsEvent?: (event: AnalyticsEventPayload) => void;
    featureFlags?: MediaFeatureFlags;
    allowCaptions?: boolean;
    isInsideOfInlineExtension?: boolean;
    dataAttributes?: Record<string, any>;
    editorAppearance?: EditorAppearance;
}
export declare const getMediaContainerWidth: (currentContainerWidth: number, layout: MediaSingleLayout) => number;
declare const _default: React.FC<import("react-intl-next").WithIntlProps<Props & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<Props & WrappedComponentProps>;
};
export default _default;
