/// <reference types="react" />
import type { Fragment, Mark, Node } from '@atlaskit/editor-prosemirror/model';
import type { Serializer } from '../serializer';
import type { RendererAppearance, StickyHeaderConfig, HeadingAnchorLinksProps, NodeComponentsProps } from '../ui/Renderer/types';
import type { AnalyticsEventPayload } from '../analytics/events';
import type { TextWrapper } from './nodes';
import type { ExtensionHandlers } from '@atlaskit/editor-common/extensions';
import type { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { EventHandlers } from '@atlaskit/editor-common/ui';
import type { RendererContext, TextHighlighter } from './types';
import type { MediaOptions } from '../types/mediaOptions';
import type { SmartLinksOptions } from '../types/smartLinksOptions';
import type { EmojiResourceConfig } from '@atlaskit/emoji/resource';
export interface ReactSerializerInit {
    /**
     * Used for to set positions on nodes for annotations.
     *
     * When not provided defaults to 1.
     */
    startPos?: number;
    providers?: ProviderFactory;
    eventHandlers?: EventHandlers;
    extensionHandlers?: ExtensionHandlers;
    portal?: HTMLElement;
    objectContext?: RendererContext;
    appearance?: RendererAppearance;
    disableHeadingIDs?: boolean;
    disableActions?: boolean;
    allowHeadingAnchorLinks?: HeadingAnchorLinksProps;
    allowColumnSorting?: boolean;
    fireAnalyticsEvent?: (event: AnalyticsEventPayload) => void;
    shouldOpenMediaViewer?: boolean;
    allowAltTextOnImages?: boolean;
    stickyHeaders?: StickyHeaderConfig;
    allowMediaLinking?: boolean;
    surroundTextNodesWithTextWrapper?: boolean;
    media?: MediaOptions;
    emojiResourceConfig?: EmojiResourceConfig;
    smartLinks?: SmartLinksOptions;
    allowCopyToClipboard?: boolean;
    allowWrapCodeBlock?: boolean;
    allowPlaceholderText?: boolean;
    allowCustomPanels?: boolean;
    allowAnnotations?: boolean;
    allowSelectAllTrap?: boolean;
    nodeComponents?: NodeComponentsProps;
    allowWindowedCodeBlock?: boolean;
    isInsideOfInlineExtension?: boolean;
    textHighlighter?: TextHighlighter;
    allowTableAlignment?: boolean;
    allowTableResizing?: boolean;
}
interface ParentInfo {
    parentIsIncompleteTask: boolean;
    path: Array<Node>;
    pos: number;
}
export default class ReactSerializer implements Serializer<JSX.Element> {
    private providers?;
    private eventHandlers?;
    private extensionHandlers?;
    private portal?;
    private rendererContext?;
    private appearance?;
    private disableHeadingIDs?;
    private disableActions?;
    private headingIds;
    /**
     * The reason we have this extra array here is because we need to generate the same unique
     * heading id for 2 different nodes: headers and expands (check the implementation of
     * `getUniqueHeadingId` for more info).
     *
     * We will eventually need to refactor the current approach to generate unique ids
     * for headers under this ticket -> https://product-fabric.atlassian.net/browse/ED-9668
     */
    private expandHeadingIds;
    private allowHeadingAnchorLinks?;
    private allowColumnSorting?;
    private allowCopyToClipboard?;
    private allowWrapCodeBlock?;
    private allowPlaceholderText?;
    private allowCustomPanels?;
    private fireAnalyticsEvent?;
    private shouldOpenMediaViewer?;
    private allowAltTextOnImages?;
    private stickyHeaders?;
    private allowMediaLinking?;
    private initStartPos;
    private startPos;
    private surroundTextNodesWithTextWrapper;
    private media?;
    private emojiResourceConfig?;
    private smartLinks?;
    private allowAnnotations;
    private allowSelectAllTrap?;
    private nodeComponents?;
    private allowWindowedCodeBlock?;
    private isInsideOfInlineExtension?;
    private textHighlighter?;
    private allowTableAlignment?;
    private allowTableResizing?;
    constructor(init: ReactSerializerInit);
    private resetState;
    private getNodeProps;
    serializeFragment(fragment: Fragment, props?: any, target?: any, key?: string, parentInfo?: ParentInfo): JSX.Element | null;
    private serializeFragmentChild;
    private withMediaMarkProps;
    private serializeTextWrapper;
    private serializeMark;
    private renderNode;
    private renderMark;
    private getTableChildrenProps;
    private getTableProps;
    private getDateProps;
    private getMediaSingleProps;
    private getMediaProps;
    private getEmojiProps;
    private getEmbedCardProps;
    private getBlockCardProps;
    private getMediaGroupProps;
    private getMediaInlineProps;
    private getTaskItemProps;
    private getHardBreakProps;
    private getCodeBlockProps;
    private getPanelProps;
    private getUnsupportedContentProps;
    private getProps;
    private headingAnchorSupported;
    private getHeadingProps;
    private getExpandProps;
    private getHeadingId;
    private getUniqueHeadingId;
    private getAnnotationMarkProps;
    private getMarkProps;
    static getChildNodes(fragment: Fragment): (Node | TextWrapper)[];
    static getMarks(node: Node): Mark[];
    static buildMarkStructure(content: Node[]): Mark[];
    static fromSchema(_: unknown, init: ReactSerializerInit): ReactSerializer;
}
export {};
