import React from 'react';
import type { Diff } from '@atlaskit/editor-common/utils';
export interface WithSmartCardStorageProps {
    smartCardStorage: Map<string, string>;
}
export declare const Context: React.Context<Map<string, string>>;
export declare const Provider: ({ children }: React.PropsWithChildren<unknown>) => React.JSX.Element;
export declare const withSmartCardStorage: <Props extends WithSmartCardStorageProps>(WrappedComponent: React.ComponentType<React.PropsWithChildren<Props>>) => {
    new (props: Diff<Props, WithSmartCardStorageProps> | Readonly<Diff<Props, WithSmartCardStorageProps>>): {
        render(): React.JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Diff<Props, WithSmartCardStorageProps>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Diff<Props, WithSmartCardStorageProps>>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Diff<Props, WithSmartCardStorageProps>, context: any): {
        render(): React.JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Diff<Props, WithSmartCardStorageProps>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Diff<Props, WithSmartCardStorageProps>>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Diff<Props, WithSmartCardStorageProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
