import React, { useCallback, useContext } from 'react';
import { AnnotationsDraftContextWrapper, ProvidersContext } from './context';
import { RangeValidator as HoverRangeValidator } from './hover/range-validator';
import { SelectionRangeValidator } from './selection/range-validator';
import { useAnnotationRangeDispatch, useAnnotationRangeState } from './contexts/AnnotationRangeContext';
export const AnnotationsContextWrapper = props => {
  const providers = useContext(ProvidersContext);
  const {
    range,
    type
  } = useAnnotationRangeState();
  const {
    setDraftRange,
    clearDraftRange
  } = useAnnotationRangeDispatch();
  const {
    rendererRef,
    createAnalyticsEvent,
    children
  } = props;
  const inlineCommentProvider = providers && providers.inlineComment;
  const selectionComponent = inlineCommentProvider && inlineCommentProvider.selectionComponent;
  const hoverComponent = inlineCommentProvider && inlineCommentProvider.hoverComponent;

  // We want to set the draft to the range the user highlighted
  const setRangeForDraft = useCallback(() => {
    setDraftRange(range, type);
  }, [range, setDraftRange, type]);
  const clearRangeForDraft = useCallback(() => {
    clearDraftRange(type);
  }, [type, clearDraftRange]);
  const render = useCallback(({
    applyAnnotationDraftAt,
    clearAnnotationDraft
  }) => {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children, !!hoverComponent && /*#__PURE__*/React.createElement(HoverRangeValidator, {
      createAnalyticsEvent: createAnalyticsEvent,
      rendererRef: rendererRef
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      component: hoverComponent,
      applyAnnotationDraftAt: applyAnnotationDraftAt,
      clearAnnotationDraft: clearAnnotationDraft
    }), !!selectionComponent && /*#__PURE__*/React.createElement(SelectionRangeValidator, {
      createAnalyticsEvent: createAnalyticsEvent,
      rendererRef: rendererRef
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      selectionComponent: selectionComponent,
      applyAnnotationDraftAt: applyAnnotationDraftAt,
      clearAnnotationDraft: clearAnnotationDraft
    }));
  }, [hoverComponent, selectionComponent, children, rendererRef, createAnalyticsEvent]);
  if (!selectionComponent && !hoverComponent) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  return /*#__PURE__*/React.createElement(AnnotationsDraftContextWrapper, {
    setDraftRange: setRangeForDraft,
    clearDraftRange: clearRangeForDraft
  }, render);
};