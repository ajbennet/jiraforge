import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { ResourcedTaskItem } from '@atlaskit/task-decision';
export default function TaskItemWithProviders(props) {
  const {
    contextIdentifierProvider,
    objectAri,
    isRenderer,
    ...otherProps
  } = props;
  const [resolvedContextProvider, setResolvedContextProvider] = React.useState(undefined);
  const updateContextIdentifierProvider = React.useCallback(async contextIdentifierProvider => {
    if (contextIdentifierProvider) {
      try {
        const resolvedContextProvider = await contextIdentifierProvider;
        setResolvedContextProvider(resolvedContextProvider);
        return;
      } catch (err) {}
    }
    setResolvedContextProvider(undefined);
  }, []);
  React.useMemo(() => {
    updateContextIdentifierProvider(props.contextIdentifierProvider);
  }, [props.contextIdentifierProvider, updateContextIdentifierProvider]);
  const resolvedObjectId = resolvedContextProvider && resolvedContextProvider.objectId || objectAri;

  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  return /*#__PURE__*/React.createElement(ResourcedTaskItem, _extends({}, otherProps, {
    objectAri: resolvedObjectId,
    isRenderer: isRenderer
  }));
}