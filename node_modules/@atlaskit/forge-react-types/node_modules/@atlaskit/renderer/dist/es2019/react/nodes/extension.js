import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import ExtensionRenderer from '../../ui/ExtensionRenderer';
import { overflowShadow, WidthConsumer } from '@atlaskit/editor-common/ui';
import { calcBreakoutWidth } from '@atlaskit/editor-common/utils';
import { RendererCssClassName } from '../../consts';
export const renderExtension = (content, layout, options = {}, removeOverflow) => {
  const overflowContainerClass = !removeOverflow ? RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER : '';

  // by default, we assume the extension is at top level, (direct child of doc node)
  const {
    isTopLevel = true
  } = options || {};
  const centerAlignClass = isTopLevel && ['wide', 'full-width'].includes(layout) ? RendererCssClassName.EXTENSION_CENTER_ALIGN : '';
  return /*#__PURE__*/React.createElement(WidthConsumer, null, ({
    width
  }) => /*#__PURE__*/React.createElement("div", {
    ref: options.handleRef
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: `${RendererCssClassName.EXTENSION} ${options.shadowClassNames} ${centerAlignClass}`,
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      width: isTopLevel ? calcBreakoutWidth(layout, width) : '100%'
    },
    "data-layout": layout
  }, /*#__PURE__*/React.createElement("div", {
    className: overflowContainerClass
  }, content)));
};
const Extension = props => {
  const {
    text,
    layout = 'default',
    handleRef,
    shadowClassNames,
    path = []
  } = props;
  return /*#__PURE__*/React.createElement(ExtensionRenderer
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  , _extends({}, props, {
    type: "extension"
  }), ({
    result
  }) => {
    try {
      // Return the result directly if it's a valid JSX.Element
      if (result && /*#__PURE__*/React.isValidElement(result)) {
        return renderExtension(result, layout, {
          isTopLevel: path.length < 1,
          handleRef,
          shadowClassNames
        });
      }
    } catch (e) {
      /** We don't want this error to block renderer */
      /** We keep rendering the default content */
    }

    // Always return default content if anything goes wrong
    return renderExtension(text || 'extension', layout, {
      isTopLevel: path.length < 1,
      handleRef,
      shadowClassNames
    });
  });
};
export default overflowShadow(Extension, {
  overflowSelector: `.${RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER}`
});