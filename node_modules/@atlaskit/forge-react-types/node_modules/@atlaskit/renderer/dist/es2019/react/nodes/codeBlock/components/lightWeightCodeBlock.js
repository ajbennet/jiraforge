/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { forwardRef, useMemo } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { blockNodesVerticalMargin } from '@atlaskit/editor-shared-styles';
import { codeBlockSharedStyles, CodeBlockSharedCssClassName } from '@atlaskit/editor-common/styles';
import { useBidiWarnings } from '../../../hooks/use-bidi-warnings';
import { RendererCssClassName } from '../../../../consts';
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
const lightWeightCodeBlockStyles = css`
	.${CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER} {
		cursor: text;
	}
`;
export const LightWeightCodeBlockCssClassName = {
  CONTAINER: 'light-weight-code-block'
};
export const getLightWeightCodeBlockStylesForRootRendererStyleSheet = () => {
  // We overwrite the rule that clears margin-top for first nested codeblocks, as
  // our lightweight codeblock dom structure will always nest the codeblock inside
  // an extra container div which would constantly be targeted. Now, top-level
  // lightweight codeblock containers will not be targeted.
  // NOTE: This must be added after other .code-block styles in the root
  // Renderer stylesheet.
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return css`
		.${RendererCssClassName.DOCUMENT}
			> .${LightWeightCodeBlockCssClassName.CONTAINER}
			.${CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER} {
			margin-top: ${blockNodesVerticalMargin};
		}
	`;
};
const LightWeightCodeBlock = /*#__PURE__*/forwardRef(({
  text,
  codeBidiWarningTooltipEnabled = true,
  className
}, ref) => {
  const textRows = useMemo(() => (text !== null && text !== void 0 ? text : '').split('\n'), [text]);
  const {
    renderBidiWarnings
  } = useBidiWarnings({
    enableWarningTooltip: codeBidiWarningTooltipEnabled
  });
  const classNames = [LightWeightCodeBlockCssClassName.CONTAINER, className].join(' ');
  return jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: classNames,
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ,
    css: [codeBlockSharedStyles(), lightWeightCodeBlockStyles]
  }, jsx("div", {
    className: CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER
  }, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: CodeBlockSharedCssClassName.CODEBLOCK_CONTENT_WRAPPER
  }, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: CodeBlockSharedCssClassName.CODEBLOCK_LINE_NUMBER_GUTTER
  }, textRows.map((_, index) =>
  // Ignored via go/ees005
  // eslint-disable-next-line react/no-array-index-key
  jsx("span", {
    key: index
  }))), jsx("div", {
    className: CodeBlockSharedCssClassName.CODEBLOCK_CONTENT
  }, jsx("code", null, renderBidiWarnings(text))))));
});
export default LightWeightCodeBlock;