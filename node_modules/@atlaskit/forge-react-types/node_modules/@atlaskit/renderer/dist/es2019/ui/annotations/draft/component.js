import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Fragment } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { InsertDraftPosition } from '../types';
import { AnnotationsDraftContext } from '../context';
import { splitText, calcTextSplitOffset, findTextString } from './text';
import { calcInsertDraftPositionOnText } from './position';
import { dataAttributes } from './dom';
import { AnnotationSharedCSSByState } from '@atlaskit/editor-common/styles';
import { segmentText } from '../../../react/utils/segment-text';
import { renderTextSegments } from '../../../react/utils/render-text-segments';

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
const markStyles = () => css({
  color: 'inherit',
  backgroundColor: 'unset',
  WebkitTapHighlightColor: 'transparent'
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
AnnotationSharedCSSByState().common,
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
AnnotationSharedCSSByState().focus);
export const AnnotationDraft = ({
  draftPosition,
  children
}) => {
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    jsx("mark", _extends({
      "data-renderer-mark": true
    }, dataAttributes(draftPosition), {
      css: markStyles
    }), children)
  );
};
export const getAnnotationIndex = (annotationPosition, fragmentCount) => {
  if (annotationPosition === InsertDraftPosition.START) {
    return 0;
  }
  if (annotationPosition === InsertDraftPosition.END) {
    return fragmentCount - 1;
  }
  if (annotationPosition === InsertDraftPosition.INSIDE && fragmentCount === 3) {
    return 1;
  }
  return -1;
};
export const applyAnnotationOnText = ({
  texts,
  shouldApplyAnnotationAt,
  draftPosition,
  textHighlighter,
  marks
}) => {
  const annotateIndex = getAnnotationIndex(shouldApplyAnnotationAt, texts.length);
  return texts.map((value, index) => {
    const segments = segmentText(value, textHighlighter);
    if (annotateIndex === index) {
      return (
        // Ignored via go/ees005
        // eslint-disable-next-line react/no-array-index-key
        jsx(AnnotationDraft, {
          key: index,
          draftPosition: draftPosition
        }, renderTextSegments(segments, textHighlighter, marks || [], draftPosition.from))
      );
    }
    return (
      // Ignored via go/ees005
      // eslint-disable-next-line react/no-array-index-key
      jsx(React.Fragment, {
        key: index
      }, renderTextSegments(segments, textHighlighter, marks || [], draftPosition.from))
    );
  });
};
export const TextWithAnnotationDraft = ({
  startPos,
  endPos,
  children,
  textHighlighter,
  marks
}) => {
  const textPosition = React.useMemo(() => ({
    start: startPos,
    end: endPos
  }), [endPos, startPos]);
  const nextDraftPosition = React.useContext(AnnotationsDraftContext);
  const shouldApplyAnnotationAt = React.useMemo(() => {
    if (!nextDraftPosition) {
      return false;
    }
    return calcInsertDraftPositionOnText(textPosition, nextDraftPosition);
  }, [nextDraftPosition, textPosition]);
  const textString = findTextString(children);
  if (!textString) {
    return jsx(Fragment, null, children);
  }
  if (shouldApplyAnnotationAt === false || !nextDraftPosition) {
    const segments = segmentText(textString, textHighlighter);
    return jsx(Fragment, null, renderTextSegments(segments, textHighlighter, marks || [], startPos));
  }
  if (shouldApplyAnnotationAt === InsertDraftPosition.AROUND_TEXT) {
    const segments = segmentText(textString, textHighlighter);
    return jsx(AnnotationDraft, {
      key: 0,
      draftPosition: nextDraftPosition
    }, renderTextSegments(segments, textHighlighter, marks || [], startPos));
  }
  const offsets = calcTextSplitOffset(nextDraftPosition, textPosition, textString);
  const texts = splitText(textString, offsets);
  if (!texts) {
    const segments = segmentText(textString, textHighlighter);
    return jsx(Fragment, null, renderTextSegments(segments, textHighlighter, marks || [], startPos));
  }
  const components = applyAnnotationOnText({
    texts,
    shouldApplyAnnotationAt,
    draftPosition: nextDraftPosition,
    textHighlighter,
    marks
  });
  return jsx(Fragment, null, components);
};