import React, { useContext } from 'react';
import { useUserSelectionRange } from '../hooks/user-selection';
import { SelectionInlineCommentMounter } from './mounter';
import { RendererContext as ActionsContext } from '../../RendererActionsContext';
export const SelectionRangeValidator = props => {
  const {
    selectionComponent,
    rendererRef,
    applyAnnotationDraftAt,
    clearAnnotationDraft,
    createAnalyticsEvent
  } = props;
  const actions = useContext(ActionsContext);
  const [range, draftRange, clearRange] = useUserSelectionRange({
    rendererRef
  });
  if (!range && !draftRange) {
    return null;
  }
  const documentPosition = actions.getPositionFromRange(range);

  // This property is drilled down to consumers when a new range is selected to test it's validity
  let isAnnotationAllowedOnRange = false;
  try {
    isAnnotationAllowedOnRange = documentPosition && actions.isValidAnnotationPosition(documentPosition);
  } catch {
    isAnnotationAllowedOnRange = false;
  }
  return /*#__PURE__*/React.createElement(SelectionInlineCommentMounter, {
    range: range,
    draftRange: draftRange,
    wrapperDOM: rendererRef,
    component: selectionComponent,
    onClose: clearRange,
    documentPosition: documentPosition,
    isAnnotationAllowed: isAnnotationAllowedOnRange,
    applyAnnotation: actions.applyAnnotation.bind(actions),
    applyAnnotationDraftAt: applyAnnotationDraftAt,
    generateIndexMatch: actions.generateAnnotationIndexMatch.bind(actions),
    clearAnnotationDraft: clearAnnotationDraft,
    createAnalyticsEvent: createAnalyticsEvent
  });
};