import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import React, { useCallback, useRef } from 'react';
// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports
import { ACTION, ACTION_SUBJECT, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { clearNextSiblingMarginTopStyle, ExpandIconWrapper, ExpandLayoutWrapperWithRef, expandMessages, sharedExpandStyles, WidthProvider } from '@atlaskit/editor-common/ui';
import { akEditorLineHeight, relativeFontSizeToBase16 } from '@atlaskit/editor-shared-styles';
import { default as ChevronRightIconLegacy } from '@atlaskit/icon/glyph/chevron-right';
import ChevronRightIcon from '@atlaskit/icon/utility/chevron-right';
import Tooltip from '@atlaskit/tooltip';
import _uniqueId from 'lodash/uniqueId';
import { injectIntl } from 'react-intl-next';
import { MODE, PLATFORM } from '../analytics/events';
import { ActiveHeaderIdConsumer } from './active-header-id-provider';
const titleStyles = css({
  outline: 'none',
  border: 'none',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  fontSize: relativeFontSizeToBase16(14),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/use-tokens-typography -- Ignored via go/DSP-18766
  lineHeight: akEditorLineHeight,
  fontWeight: "var(--ds-font-weight-regular, 400)",
  display: 'flex',
  flex: 1,
  margin: 0,
  padding: `0 0 0 ${"var(--ds-space-050, 4px)"}`,
  textAlign: 'left'
});
const Container = props => {
  const paddingBottom = props.expanded ? "var(--ds-space-100, 8px)" : "var(--ds-space-0, 0px)";
  const sharedContainerStyles = sharedExpandStyles.containerStyles(props);

  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  const styles = () => css`
		${sharedContainerStyles()}
		padding: 0;
		padding-bottom: ${paddingBottom};
	`;
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading, @atlaskit/design-system/consistent-css-prop-usage
    jsx("div", _extends({
      css: styles
    }, props), props.children)
  );
};
const TitleContainer = props => {
  const paddingBottom = !props.expanded ? "var(--ds-space-100, 8px)" : "var(--ds-space-0, 0px)";

  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  const styles = () => css`
		${sharedExpandStyles.titleContainerStyles()}
		padding: ${"var(--ds-space-100, 8px)"};
		padding-bottom: ${paddingBottom};
	`;
  const {
    expanded,
    ...buttonProps
  } = props;
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading, @atlaskit/design-system/consistent-css-prop-usage
    jsx("button", _extends({
      type: "button",
      css: styles
    }, buttonProps), props.children)
  );
};
TitleContainer.displayName = 'TitleContainerButton';
const ContentContainer = props => {
  const sharedContentStyles = sharedExpandStyles.contentStyles(props);
  const visibility = props.expanded ? 'visible' : 'hidden';

  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression  -- needs manual remediation
  const styles = () => css`
		${sharedContentStyles()};
		padding-right: ${"var(--ds-space-200, 16px)"};
		padding-left: ${"var(--ds-space-400, 32px)"};
		visibility: ${visibility};
	`;
  return (
    // eslint-disable-next-line
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading, @atlaskit/design-system/consistent-css-prop-usage
    jsx("div", _extends({
      css: styles
    }, props), props.children)
  );
};
function fireExpandToggleAnalytics(nodeType, expanded, fireAnalyticsEvent) {
  if (!fireAnalyticsEvent) {
    return;
  }
  fireAnalyticsEvent({
    action: ACTION.TOGGLE_EXPAND,
    actionSubject: nodeType === 'expand' ? ACTION_SUBJECT.EXPAND : ACTION_SUBJECT.NESTED_EXPAND,
    attributes: {
      platform: PLATFORM.WEB,
      mode: MODE.RENDERER,
      expanded: !expanded
    },
    eventType: EVENT_TYPE.TRACK
  });
}
function Expand({
  title,
  children,
  nodeType,
  intl,
  fireAnalyticsEvent,
  nestedHeaderIds,
  rendererAppearance
}) {
  const [expanded, setExpanded] = React.useState(false);
  const [focused, setFocused] = React.useState(false);
  const isMobile = false;
  const label = intl.formatMessage(expanded ? expandMessages.collapseNode : expandMessages.expandNode);
  const {
    current: id
  } = useRef(_uniqueId('expand-title-'));
  const handleFocus = useCallback(() => setFocused(true), []);
  const handleBlur = useCallback(() => setFocused(false), []);
  return jsx(Container, {
    "data-testid": `expand-container-${nodeType}-${id}`,
    "data-node-type": nodeType,
    "data-title": title,
    "data-expanded": expanded,
    expanded: expanded,
    focused: focused
  }, nestedHeaderIds && nestedHeaderIds.length > 0 ? jsx(ActiveHeaderIdConsumer, {
    nestedHeaderIds: nestedHeaderIds,
    onNestedHeaderIdMatch: () => setExpanded(true)
  }) : null, jsx(TitleContainer, {
    onClick: e => {
      e.preventDefault();
      e.stopPropagation();
      fireExpandToggleAnalytics(nodeType, expanded, fireAnalyticsEvent);
      setExpanded(!expanded);
      e.persist();
      // @ts-ignore detail doesn't exist on type
      e.detail ? handleBlur() : handleFocus();
    },
    onFocus: handleFocus,
    onBlur: handleBlur,
    "aria-labelledby": id,
    "aria-expanded": expanded,
    contentEditable: false,
    expanded: expanded
  }, isMobile ? jsx(ExpandIconWrapper, {
    expanded: expanded
  }, jsx(ChevronRightIcon, {
    label: label,
    LEGACY_fallbackIcon: ChevronRightIconLegacy,
    spacing: "spacious"
  })) : jsx(Tooltip, {
    content: label,
    position: "top"
    // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
    ,
    tag: ExpandLayoutWrapperWithRef,
    testId: 'tooltip'
  }, jsx(ExpandIconWrapper, {
    expanded: expanded
  }, jsx(ChevronRightIcon, {
    label: label,
    LEGACY_fallbackIcon: ChevronRightIconLegacy,
    spacing: "spacious"
  }))), jsx("span", {
    css: titleStyles,
    id: id
  }, title || intl.formatMessage(expandMessages.expandDefaultTitle))), jsx(ContentContainer, {
    expanded: expanded
  }, jsx("div", {
    className: `${nodeType}-content-wrapper`
  }, jsx(WidthProvider, null, jsx("div", {
    css: clearNextSiblingMarginTopStyle
  }), children))));
}
export default injectIntl(Expand);