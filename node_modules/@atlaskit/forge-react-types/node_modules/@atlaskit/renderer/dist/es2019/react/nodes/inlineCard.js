import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { Card } from '@atlaskit/smart-card';
import { CardSSR } from '@atlaskit/smart-card/ssr';
import { UnsupportedInline } from '@atlaskit/editor-common/ui';
import { fg } from '@atlaskit/platform-feature-flags';
import { CardErrorBoundary } from './fallback';
import { withSmartCardStorage } from '../../ui/SmartCardStorage';
import { getCardClickHandler } from '../utils/getCardClickHandler';
import { AnalyticsContext } from '@atlaskit/analytics-next';
import { useInlineAnnotationProps } from '../../ui/annotations/element/useInlineAnnotationProps';
const InlineCard = props => {
  const {
    url,
    data,
    eventHandlers,
    portal,
    smartLinks
  } = props;
  const onClick = getCardClickHandler(eventHandlers, url);
  const cardProps = {
    url,
    data,
    onClick,
    container: portal
  };
  const {
    hideHoverPreview,
    actionOptions,
    ssr
  } = smartLinks || {};
  const analyticsData = {
    attributes: {
      location: 'renderer'
    },
    // Below is added for the future implementation of Linking Platform namespaced analytic context
    location: 'renderer'
  };
  const inlineAnnotationProps = useInlineAnnotationProps(props);
  if (ssr && url) {
    if (
    // eslint-disable-next-line @atlaskit/platform/no-invalid-feature-flag-usage
    fg('editor_inline_comments_on_inline_nodes')) {
      return jsx("span", _extends({
        "data-inline-card": true,
        "data-card-data": data ? JSON.stringify(data) : undefined,
        "data-card-url": url
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
      }, inlineAnnotationProps), jsx(AnalyticsContext, {
        data: analyticsData
      }, jsx(CardSSR, {
        appearance: "inline",
        url: url,
        showHoverPreview: !hideHoverPreview,
        actionOptions: actionOptions,
        onClick: onClick
      })));
    }
    return jsx(AnalyticsContext, {
      data: analyticsData
    }, jsx(CardSSR, {
      appearance: "inline",
      url: url,
      showHoverPreview: !hideHoverPreview,
      actionOptions: actionOptions,
      onClick: onClick
    }));
  }
  const onError = ({
    err
  }) => {
    if (err) {
      throw err;
    }
  };
  return jsx(AnalyticsContext, {
    data: analyticsData
  }, jsx("span", _extends({
    "data-inline-card": true,
    "data-card-data": data ? JSON.stringify(data) : undefined,
    "data-card-url": url
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, inlineAnnotationProps), jsx(CardErrorBoundary, _extends({
    unsupportedComponent: UnsupportedInline
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps), jsx(Card, _extends({
    appearance: "inline",
    showHoverPreview: !hideHoverPreview,
    actionOptions: actionOptions
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps, {
    onResolve: data => {
      if (!data.url || !data.title) {
        return;
      }
      props.smartCardStorage.set(data.url, data.title);
    },
    onError: onError
  })))));
};
export default withSmartCardStorage(InlineCard);