import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useContext, useState, useRef } from 'react';
import { Card, EmbedResizeMessageListener } from '@atlaskit/smart-card';
import { SmartCardContext } from '@atlaskit/link-provider';
import { WidthConsumer, UnsupportedBlock, MediaSingle as UIMediaSingle } from '@atlaskit/editor-common/ui';
import { akEditorDefaultLayoutWidth, akEditorFullWidthLayoutWidth, DEFAULT_EMBED_CARD_HEIGHT, DEFAULT_EMBED_CARD_WIDTH } from '@atlaskit/editor-shared-styles';
import { CardErrorBoundary } from './fallback';
import { FullPagePadding } from '../../ui/Renderer/style';
import { getCardClickHandler } from '../utils/getCardClickHandler';
import { AnalyticsContext } from '@atlaskit/analytics-next';
const embedCardWrapperStyles = css({
  width: '100%',
  height: '100%',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> div': {
    height: '100%'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.loader-wrapper': {
    height: '100%'
  },
  margin: '0 auto'
});
const uIMediaSingleLayoutStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
  marginLeft: '50%',
  transform: 'translateX(-50%)'
});
export default function EmbedCard(props) {
  var _smartLinks$frameStyl;
  const {
    url,
    data,
    eventHandlers,
    portal,
    layout,
    width,
    isInsideOfBlockNode,
    rendererAppearance,
    smartLinks,
    isInsideOfInlineExtension
  } = props;
  const embedIframeRef = useRef(null);
  const onClick = getCardClickHandler(eventHandlers, url);
  const {
    actionOptions
  } = smartLinks || {};
  const platform = 'web';
  const cardProps = {
    url,
    onClick,
    container: portal,
    platform,
    frameStyle: (_smartLinks$frameStyl = smartLinks === null || smartLinks === void 0 ? void 0 : smartLinks.frameStyle) !== null && _smartLinks$frameStyl !== void 0 ? _smartLinks$frameStyl : 'show',
    actionOptions
  };
  const [liveHeight, setLiveHeight] = useState(null);
  const [aspectRatio, setAspectRatio] = useState();
  const height = liveHeight || props.originalHeight;

  // We start with height and width defined with default values
  let originalHeight = DEFAULT_EMBED_CARD_HEIGHT;
  let originalWidth = DEFAULT_EMBED_CARD_WIDTH;

  // Then can override height and width with values from ADF if available
  if (props.originalHeight && props.originalWidth) {
    originalHeight = props.originalHeight;
    originalWidth = props.originalWidth;
  }

  // Then we can override it with aspectRatio that is comming from iframely via `resolve()`
  if (aspectRatio) {
    originalHeight = 1;
    originalWidth = aspectRatio;
  }

  // And finally if iframe sends live `height` events we use that as most precise measure.
  const isHeightOnlyMode = !(props.originalHeight && props.originalWidth) || liveHeight;
  if (height && isHeightOnlyMode) {
    originalHeight = height;
    originalWidth = undefined;
  }
  const padding = rendererAppearance === 'full-page' ? FullPagePadding * 2 : 0;
  const [hasPreview, setPreviewAvailableState] = useState(true);
  const cardContext = useContext(SmartCardContext);
  const onResolve = ({
    aspectRatio: resolvedAspectRatio
  }) => {
    const hasPreviewOnResolve = !!(cardContext && url && cardContext.extractors.getPreview(url, platform));
    if (!hasPreviewOnResolve) {
      setPreviewAvailableState(false);
    }
    setAspectRatio(resolvedAspectRatio);
  };
  const analyticsData = {
    attributes: {
      location: 'renderer'
    },
    // Below is added for the future implementation of Linking Platform namespaced analytic context
    location: 'renderer'
  };
  return jsx(AnalyticsContext, {
    data: analyticsData
  }, jsx(WidthConsumer, null, ({
    width: documentWidth
  }) => {
    const isFullWidth = rendererAppearance === 'full-width';
    let containerWidth = documentWidth;
    if (smartLinks !== null && smartLinks !== void 0 && smartLinks.ssr && !containerWidth) {
      // EDM-8114: When we are rendering on SSR, we have no idea what the width is.
      containerWidth = isFullWidth ? akEditorFullWidthLayoutWidth : akEditorDefaultLayoutWidth;
    }
    let nonFullWidthSize = containerWidth;
    if (!isInsideOfBlockNode && rendererAppearance !== 'comment') {
      const isContainerSizeGreaterThanMaxFullPageWidth = containerWidth - padding >= akEditorDefaultLayoutWidth;
      if (isContainerSizeGreaterThanMaxFullPageWidth) {
        nonFullWidthSize = akEditorDefaultLayoutWidth;
      } else {
        nonFullWidthSize = containerWidth - padding;
      }
    }
    const lineLength = isFullWidth ? Math.min(akEditorFullWidthLayoutWidth, containerWidth - padding) : nonFullWidthSize;
    const uiMediaSingleStyles = layout === 'full-width' || layout === 'wide' ? uIMediaSingleLayoutStyles : '';
    const onError = ({
      err
    }) => {
      if (err) {
        throw err;
      }
    };
    return (
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      jsx(CardErrorBoundary, _extends({
        unsupportedComponent: UnsupportedBlock
      }, cardProps), jsx(EmbedResizeMessageListener, {
        embedIframeRef: embedIframeRef,
        onHeightUpdate: setLiveHeight
      }, jsx(UIMediaSingle, {
        css: uiMediaSingleStyles,
        layout: layout,
        width: originalWidth,
        containerWidth: containerWidth,
        pctWidth: width,
        height: originalHeight,
        fullWidthMode: isFullWidth,
        nodeType: "embedCard",
        lineLength: isInsideOfBlockNode ? containerWidth : lineLength,
        hasFallbackContainer: hasPreview,
        isInsideOfInlineExtension: isInsideOfInlineExtension
      }, jsx("div", {
        css: embedCardWrapperStyles
      }, jsx("div", {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        className: "embedCardView-content-wrap",
        "data-embed-card": true,
        "data-layout": layout,
        "data-width": width,
        "data-card-data": data ? JSON.stringify(data) : undefined,
        "data-card-url": url,
        "data-card-original-height": originalHeight
      }, jsx(Card, _extends({
        appearance: "embed"
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
      }, cardProps, {
        onResolve: onResolve,
        inheritDimensions: true,
        embedIframeRef: embedIframeRef,
        onError: onError
      })))))))
    );
  }));
}