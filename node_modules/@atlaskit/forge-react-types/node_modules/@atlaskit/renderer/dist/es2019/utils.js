/* eslint-disable @atlaskit/editor/no-re-export */
// Entry file in package.json

import { defaultSchema } from '@atlaskit/adf-schema/schema-default';
import { JSONTransformer } from '@atlaskit/editor-json-transformer';

// Ignored via go/ees005
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function createEncoder(parser, encoder) {
  return value => encoder.encode(parser.parse(value));
}
export class ADFEncoder {
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  constructor(createTransformerWithSchema) {
    const transformer = createTransformerWithSchema(defaultSchema);
    this.encode = createEncoder(transformer, new JSONTransformer());
  }
}
export const getText = node => {
  return node.text || node.attrs && (node.attrs.text || node.attrs.shortName) || `[${typeof node.type === 'string' ? node.type : node.type.name}]`;
};
export const getEventHandler = (eventHandlers, type, eventName = 'onClick'
// Ignored via go/ees005
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return eventHandlers && type && eventHandlers[type] && eventHandlers[type][eventName];
};

/**
 * Traverse through parent elements of element. Return element for which evaluate(element) returns
 * true. If topElement is reached before evaluate returns true, return false. Does not run evaluate
 * on topElement.
 * @param element Starting HTMLElement
 * @param topElement HTMLElement to end search at. evaluate is not called on this element
 * @param evaluate Function which returns true or false based on the given element. eg: Checks if
 * element has desired classname.
 */
export function findInTree(element, topElement, evaluate) {
  if (element === topElement) {
    return false;
  }
  if (evaluate(element)) {
    return true;
  }
  if (!element.parentElement) {
    return false;
  }
  return findInTree(element.parentElement, topElement, evaluate);
}