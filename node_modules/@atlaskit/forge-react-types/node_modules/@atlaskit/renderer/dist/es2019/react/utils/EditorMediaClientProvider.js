import React, { useContext, useEffect, useMemo, useState } from 'react';
import { MediaClientContext, getMediaClient } from '@atlaskit/media-client-react';
import { useProvider } from '@atlaskit/editor-common/provider-factory';
export const EditorMediaClientProvider = ({
  children,
  ssr
}) => {
  const [mediaClientConfig, setMediaClientConfig] = useState();
  const mediaProvider = useProvider('mediaProvider');

  /**
   * If a mediaClientConfig is provided then we will force
   * skip the mediaClient from context
   */
  const shouldSkipContext = Boolean((ssr === null || ssr === void 0 ? void 0 : ssr.config) || mediaProvider);
  const contextMediaClient = useContext(MediaClientContext);

  // MediaClientProvider currently requires a mediaClientConfig
  // And inserting the MediaClientProvider will cause a re-render
  // We should use MediaClientProvider once it no longer requires a config
  const mediaClient = useMemo(() => mediaClientConfig ? getMediaClient(mediaClientConfig) : undefined, [mediaClientConfig]);

  // Consumers can override the mediaClient for renderer,
  // by not providing both SSR config and mediaProvider,
  // and provide a top level mediaClient context
  // This is useful for testing and creating examples.
  useEffect(() => {
    if (ssr !== null && ssr !== void 0 && ssr.config) {
      setMediaClientConfig(ssr.config);
    } else if (mediaProvider) {
      mediaProvider.then(provider => {
        setMediaClientConfig(provider.viewMediaClientConfig);
      });
    }
  }, [mediaProvider, ssr]);
  return /*#__PURE__*/React.createElement(MediaClientContext.Provider, {
    value: shouldSkipContext ? mediaClient : contextMediaClient
  }, children);
};