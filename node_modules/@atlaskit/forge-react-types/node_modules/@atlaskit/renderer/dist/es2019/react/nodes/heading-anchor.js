import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N200, N500, B400 } from '@atlaskit/theme/colors';
import LinkIcon from '@atlaskit/icon/glyph/link';
import Tooltip from '@atlaskit/tooltip';
import { injectIntl } from 'react-intl-next';
import { headingAnchorLinkMessages } from '../../messages';
export const HeadingAnchorWrapperClassName = 'heading-anchor-wrapper';
const CopyAnchorWrapperWithRef = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsx("span", _extends({}, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: HeadingAnchorWrapperClassName,
    ref: ref
  }), children);
});
const copyAnchorButtonStyles = css({
  display: 'inline',
  outline: 'none',
  backgroundColor: 'transparent',
  border: 'none',
  color: `var(--ds-icon, ${N500})`,
  cursor: 'pointer',
  right: 0
});
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
class HeadingAnchor extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      tooltipMessage: '',
      isClicked: false
    });
    _defineProperty(this, "setTooltipState", (message, isClicked = false) => {
      this.setState({
        // TODO: ED-14403 investigate why this does not translate
        tooltipMessage: this.props.intl.formatMessage(message),
        isClicked
      });
    });
    _defineProperty(this, "getCopyAriaLabel", () => {
      const {
        copyAriaLabel
      } = headingAnchorLinkMessages;
      return this.props.intl.formatMessage(copyAriaLabel);
    });
    _defineProperty(this, "copyToClipboard", async event => {
      const {
        copiedHeadingLinkToClipboard,
        failedToCopyHeadingLink
      } = headingAnchorLinkMessages;
      event.stopPropagation();
      try {
        await this.props.onCopyText();
        this.setTooltipState(copiedHeadingLinkToClipboard, true);
      } catch (e) {
        this.setTooltipState(failedToCopyHeadingLink);
      }
    });
    _defineProperty(this, "resetMessage", () => {
      this.setTooltipState(headingAnchorLinkMessages.copyHeadingLinkToClipboard);
    });
    _defineProperty(this, "renderAnchorButton", () => {
      const {
        hideFromScreenReader = false
      } = this.props;
      return jsx("button", {
        "data-testid": "anchor-button",
        css: copyAnchorButtonStyles,
        onMouseLeave: this.resetMessage,
        onClick: this.copyToClipboard,
        "aria-hidden": hideFromScreenReader,
        tabIndex: hideFromScreenReader ? undefined : -1,
        "aria-label": hideFromScreenReader ? undefined : this.state.tooltipMessage,
        type: "button"
      }, jsx(LinkIcon, {
        label: this.getCopyAriaLabel(),
        size: this.props.level > 3 ? 'small' : 'medium',
        primaryColor: this.state.isClicked ? `var(--ds-icon-selected, ${B400})` : `var(--ds-icon-subtle, ${N200})`
      }));
    });
  }
  componentDidMount() {
    this.resetMessage();
  }
  render() {
    const {
      tooltipMessage
    } = this.state;
    if (tooltipMessage) {
      // We set the key to the message to ensure it remounts when the message
      // changes, so that it correctly repositions.
      // @see https://ecosystem.atlassian.net/projects/AK/queues/issue/AK-6548
      return jsx(Tooltip
      // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
      , {
        tag: CopyAnchorWrapperWithRef,
        content: tooltipMessage,
        position: "top",
        delay: 0,
        key: tooltipMessage
      }, this.renderAnchorButton());
    }
    return this.renderAnchorButton();
  }
}
export default injectIntl(HeadingAnchor);