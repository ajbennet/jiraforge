import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import TipIcon from '@atlaskit/icon/glyph/editor/hint';
import { PanelType } from '@atlaskit/adf-schema';
import { panelSharedStylesWithoutPrefix, PanelSharedCssClassName } from '@atlaskit/editor-common/panel';
import { hexToEditorBackgroundPaletteColor } from '@atlaskit/editor-palette';
import EmojiIcon from '@atlaskit/icon/glyph/editor/emoji';
import { fg } from '@atlaskit/platform-feature-flags';
import EmojiItem from './emoji';
import { PanelInfoIcon, PanelSuccessIcon, PanelNoteIcon, PanelWarningIcon, PanelErrorIcon } from '@atlaskit/editor-common/icons';
const PanelStyled = ({
  backgroundColor,
  hasIcon,
  ...props
}) => {
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- nested css mixins are violations
  let styles = css`
		&.${PanelSharedCssClassName.prefix} {
			${panelSharedStylesWithoutPrefix()}

			&[data-panel-type=${PanelType.CUSTOM}] {
				${hasIcon ? '' : 'padding-left: 12px;padding-right: 12px;'}
			}
		}
	`;
  if (props['data-panel-type'] === PanelType.CUSTOM && backgroundColor) {
    // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- nested css mixins are violations
    styles = css`
			&.${PanelSharedCssClassName.prefix} {
				${panelSharedStylesWithoutPrefix()}
			}

			&[data-panel-type=${PanelType.CUSTOM}] {
				background-color: ${hexToEditorBackgroundPaletteColor(backgroundColor) || backgroundColor};
				${hasIcon ? '' : 'padding-left: 12px;padding-right: 12px;'}
			}
		`;
  }
  return (
    // eslint-disable-next-line
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("div", _extends({
      css: styles
    }, props), props.children)
  );
};
PanelStyled.displayName = 'PanelStyled';
const panelIcons = {
  info: PanelInfoIcon,
  success: PanelSuccessIcon,
  note: PanelNoteIcon,
  tip: TipIcon,
  warning: PanelWarningIcon,
  error: PanelErrorIcon,
  custom: EmojiIcon
};
const Panel = props => {
  const {
    allowCustomPanels,
    panelType: type,
    panelColor,
    panelIcon,
    panelIconId,
    panelIconText,
    providers,
    children
  } = props;
  // only allow custom panel type if flag is set
  // otherwise fall back to info if custom panel is given
  const panelType = allowCustomPanels ? type : type === PanelType.CUSTOM ? PanelType.INFO : type;
  const getIcon = () => {
    if (panelType === PanelType.CUSTOM) {
      if (panelIcon && providers) {
        return jsx(EmojiItem, {
          id: panelIconId,
          text: panelIconText,
          shortName: panelIcon,
          providers: providers
        });
      }
      return null;
    }
    const Icon = panelIcons[panelType];
    return fg('platform_editor_update_panel_icon_aria_label') ? jsx(Icon, {
      label: `${panelType} panel`
    }) : jsx(Icon, {
      label: `Panel ${panelType}`
    });
  };
  const icon = getIcon();
  const renderIcon = () => {
    if (icon) {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      return jsx("div", {
        className: PanelSharedCssClassName.icon
      }, icon);
    }
  };
  return jsx(PanelStyled
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: PanelSharedCssClassName.prefix,
    "data-panel-type": panelType,
    "data-panel-color": panelColor,
    "data-panel-icon": panelIcon,
    "data-panel-icon-id": panelIconId,
    "data-panel-icon-text": panelIconText,
    backgroundColor: panelColor,
    hasIcon: Boolean(icon)
  }, renderIcon(), jsx("div", {
    className: PanelSharedCssClassName.content
  }, children));
};
export default Panel;