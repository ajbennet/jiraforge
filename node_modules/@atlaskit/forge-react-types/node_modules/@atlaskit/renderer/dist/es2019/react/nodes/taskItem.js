import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { PureComponent } from 'react';
import { ProviderFactory, WithProviders } from '@atlaskit/editor-common/provider-factory';
import TaskItemWithProviders from './task-item-with-providers';
import { FabricElementsAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
import { TaskItemsFormatProvider, TaskItemsFormatConsumer } from '../../ui/TaskItemsFormatContext/TaskItemsFormatContext';
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
export default class TaskItem extends PureComponent {
  constructor(props) {
    super(props);
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(this, "renderWithProvider", providers => {
      const {
        taskDecisionProvider,
        contextIdentifierProvider
      } = providers;
      const {
        children,
        localId,
        state,
        rendererContext,
        disabled,
        dataAttributes
      } = this.props;
      let objectAri = '';
      if (rendererContext) {
        objectAri = rendererContext.objectAri || '';
      }
      return /*#__PURE__*/React.createElement(FabricElementsAnalyticsContext, {
        data: {
          userContext: 'document'
        }
      }, /*#__PURE__*/React.createElement(TaskItemsFormatProvider, null, /*#__PURE__*/React.createElement(TaskItemsFormatConsumer, null, ([, dispatch]) => /*#__PURE__*/React.createElement(TaskItemWithProviders, {
        objectAri: objectAri,
        taskId: localId,
        isDone: state === 'DONE',
        isRenderer: true,
        disabled: disabled,
        taskDecisionProvider: taskDecisionProvider,
        contextIdentifierProvider: contextIdentifierProvider,
        dataAttributes: dataAttributes,
        onChange: (_, isChecked) => {
          dispatch(isChecked);
        }
      }, children))));
    });
    this.providerFactory = props.providers || new ProviderFactory();
  }
  componentWillUnmount() {
    if (!this.props.providers) {
      // new ProviderFactory is created if no `providers` has been set
      // in this case when component is unmounted it's safe to destroy this providerFactory
      this.providerFactory.destroy();
    }
  }
  render() {
    return /*#__PURE__*/React.createElement(WithProviders, {
      providers: ['taskDecisionProvider', 'contextIdentifierProvider'],
      providerFactory: this.providerFactory,
      renderNode: this.renderWithProvider
    });
  }
}