import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { PureComponent } from 'react';
import { ProviderFactory, WithProviders } from '@atlaskit/editor-common/provider-factory';
import TaskItemWithProviders from './task-item-with-providers';
import { FabricElementsAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
import { TaskItemsFormatProvider, TaskItemsFormatConsumer } from '../../ui/TaskItemsFormatContext/TaskItemsFormatContext';
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var TaskItem = /*#__PURE__*/function (_PureComponent) {
  function TaskItem(props) {
    var _this;
    _classCallCheck(this, TaskItem);
    _this = _callSuper(this, TaskItem, [props]);
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(_this, "renderWithProvider", function (providers) {
      var taskDecisionProvider = providers.taskDecisionProvider,
        contextIdentifierProvider = providers.contextIdentifierProvider;
      var _this$props = _this.props,
        children = _this$props.children,
        localId = _this$props.localId,
        state = _this$props.state,
        rendererContext = _this$props.rendererContext,
        disabled = _this$props.disabled,
        dataAttributes = _this$props.dataAttributes;
      var objectAri = '';
      if (rendererContext) {
        objectAri = rendererContext.objectAri || '';
      }
      return /*#__PURE__*/React.createElement(FabricElementsAnalyticsContext, {
        data: {
          userContext: 'document'
        }
      }, /*#__PURE__*/React.createElement(TaskItemsFormatProvider, null, /*#__PURE__*/React.createElement(TaskItemsFormatConsumer, null, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          dispatch = _ref2[1];
        return /*#__PURE__*/React.createElement(TaskItemWithProviders, {
          objectAri: objectAri,
          taskId: localId,
          isDone: state === 'DONE',
          isRenderer: true,
          disabled: disabled,
          taskDecisionProvider: taskDecisionProvider,
          contextIdentifierProvider: contextIdentifierProvider,
          dataAttributes: dataAttributes,
          onChange: function onChange(_, isChecked) {
            dispatch(isChecked);
          }
        }, children);
      })));
    });
    _this.providerFactory = props.providers || new ProviderFactory();
    return _this;
  }
  _inherits(TaskItem, _PureComponent);
  return _createClass(TaskItem, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!this.props.providers) {
        // new ProviderFactory is created if no `providers` has been set
        // in this case when component is unmounted it's safe to destroy this providerFactory
        this.providerFactory.destroy();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(WithProviders, {
        providers: ['taskDecisionProvider', 'contextIdentifierProvider'],
        providerFactory: this.providerFactory,
        renderNode: this.renderWithProvider
      });
    }
  }]);
}(PureComponent);
export { TaskItem as default };