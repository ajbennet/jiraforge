import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useContext, useEffect, useMemo, useState } from 'react';
import { MediaClientContext, getMediaClient } from '@atlaskit/media-client-react';
import { useProvider } from '@atlaskit/editor-common/provider-factory';
export var EditorMediaClientProvider = function EditorMediaClientProvider(_ref) {
  var children = _ref.children,
    ssr = _ref.ssr;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    mediaClientConfig = _useState2[0],
    setMediaClientConfig = _useState2[1];
  var mediaProvider = useProvider('mediaProvider');

  /**
   * If a mediaClientConfig is provided then we will force
   * skip the mediaClient from context
   */
  var shouldSkipContext = Boolean((ssr === null || ssr === void 0 ? void 0 : ssr.config) || mediaProvider);
  var contextMediaClient = useContext(MediaClientContext);

  // MediaClientProvider currently requires a mediaClientConfig
  // And inserting the MediaClientProvider will cause a re-render
  // We should use MediaClientProvider once it no longer requires a config
  var mediaClient = useMemo(function () {
    return mediaClientConfig ? getMediaClient(mediaClientConfig) : undefined;
  }, [mediaClientConfig]);

  // Consumers can override the mediaClient for renderer,
  // by not providing both SSR config and mediaProvider,
  // and provide a top level mediaClient context
  // This is useful for testing and creating examples.
  useEffect(function () {
    if (ssr !== null && ssr !== void 0 && ssr.config) {
      setMediaClientConfig(ssr.config);
    } else if (mediaProvider) {
      mediaProvider.then(function (provider) {
        setMediaClientConfig(provider.viewMediaClientConfig);
      });
    }
  }, [mediaProvider, ssr]);
  return /*#__PURE__*/React.createElement(MediaClientContext.Provider, {
    value: shouldSkipContext ? mediaClient : contextMediaClient
  }, children);
};