import React from 'react';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { fg } from '@atlaskit/platform-feature-flags';
import HeadingAnchor from './heading-anchor';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import AnalyticsContext from '../../analytics/analyticsContext';
import { copyTextToClipboard } from '../utils/clipboard';
var getCurrentUrlWithHash = function getCurrentUrlWithHash() {
  var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var url = new URL(window.location.href);
  url.search = ''; // clear any query params so that the page will correctly scroll to the anchor
  url.hash = encodeURIComponent(hash);
  return url.href;
};
function hasRightAlignmentMark(marks) {
  if (!marks || !marks.length) {
    return false;
  }
  return marks.some(function (mark) {
    return mark.type.name === 'alignment' && mark.attrs.align === 'end';
  });
}
function WrappedHeadingAnchor(_ref) {
  var enableNestedHeaderLinks = _ref.enableNestedHeaderLinks,
    level = _ref.level,
    headingId = _ref.headingId,
    hideFromScreenReader = _ref.hideFromScreenReader;
  return /*#__PURE__*/React.createElement(AnalyticsContext.Consumer, null, function (_ref2) {
    var fireAnalyticsEvent = _ref2.fireAnalyticsEvent;
    return /*#__PURE__*/React.createElement(HeadingAnchor, {
      enableNestedHeaderLinks: enableNestedHeaderLinks,
      level: level,
      onCopyText: function onCopyText() {
        fireAnalyticsEvent({
          action: ACTION.CLICKED,
          actionSubject: ACTION_SUBJECT.BUTTON,
          actionSubjectId: ACTION_SUBJECT_ID.HEADING_ANCHOR_LINK,
          eventType: EVENT_TYPE.UI
        });
        return copyTextToClipboard(getCurrentUrlWithHash(headingId));
      },
      hideFromScreenReader: hideFromScreenReader
    });
  });
}
function Heading(props) {
  var headingId = props.headingId,
    dataAttributes = props.dataAttributes,
    allowHeadingAnchorLinks = props.allowHeadingAnchorLinks,
    marks = props.marks,
    invisible = props.invisible;
  var HX = "h".concat(props.level);
  var showAnchorLink = !!props.showAnchorLink;
  var isRightAligned = hasRightAlignmentMark(marks);
  var enableNestedHeaderLinks = allowHeadingAnchorLinks && allowHeadingAnchorLinks.allowNestedHeaderLinks;
  var headingIdToUse = invisible ? undefined : headingId;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HX, {
    id: headingIdToUse,
    "data-renderer-start-pos": dataAttributes['data-renderer-start-pos']
  }, /*#__PURE__*/React.createElement(React.Fragment, null, showAnchorLink && headingId && isRightAligned && /*#__PURE__*/React.createElement(WrappedHeadingAnchor, {
    level: props.level,
    enableNestedHeaderLinks: enableNestedHeaderLinks,
    headingId: headingId,
    hideFromScreenReader: fg('platform_editor_accessible_heading_copy_link')
  }), props.children, showAnchorLink && headingId && !isRightAligned && /*#__PURE__*/React.createElement(WrappedHeadingAnchor, {
    level: props.level,
    enableNestedHeaderLinks: enableNestedHeaderLinks,
    headingId: headingId,
    hideFromScreenReader: fg('platform_editor_accessible_heading_copy_link')
  }))), fg('platform_editor_accessible_heading_copy_link') && /*#__PURE__*/React.createElement(VisuallyHidden, {
    testId: "visually-hidden-heading-anchor"
  }, showAnchorLink && headingId && /*#__PURE__*/React.createElement(WrappedHeadingAnchor, {
    level: props.level,
    enableNestedHeaderLinks: enableNestedHeaderLinks,
    headingId: headingId
  })));
}
export default Heading;