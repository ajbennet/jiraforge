import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { Card } from '@atlaskit/smart-card';
import { UnsupportedBlock, UnsupportedInline, WidthConsumer } from '@atlaskit/editor-common/ui';
import { CardErrorBoundary } from './fallback';
import { getCardClickHandler } from '../utils/getCardClickHandler';
import InlineCard from './inlineCard';
import { AnalyticsContext } from '@atlaskit/analytics-next';
import { DatasourceTableView } from '@atlaskit/link-datasource';
import { N40 } from '@atlaskit/theme/colors';
import { calcBreakoutWidth, canRenderDatasource } from '@atlaskit/editor-common/utils';
var datasourceContainerStyle = css({
  borderRadius: "var(--ds-border-radius-200, 8px)",
  border: "1px solid ".concat("var(--ds-border, ".concat(N40, ")")),
  overflow: 'hidden',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
  marginLeft: '50%',
  marginBottom: "var(--ds-space-150, 0.75rem)",
  transform: 'translateX(-50%)'
});
export default function BlockCard(props) {
  var url = props.url,
    data = props.data,
    eventHandlers = props.eventHandlers,
    portal = props.portal,
    smartLinks = props.smartLinks,
    isNodeNested = props.isNodeNested;
  var _ref = smartLinks || {},
    actionOptions = _ref.actionOptions;
  var onClick = getCardClickHandler(eventHandlers, url);
  var platform = 'web';
  var cardProps = {
    url: url,
    data: data,
    onClick: onClick,
    container: portal,
    isDatasource: !!props.datasource,
    actionOptions: actionOptions
  };
  var analyticsData = {
    attributes: {
      location: 'renderer'
    },
    // Below is added for the future implementation of Linking Platform namespaced analytic context
    location: 'renderer'
  };
  var onError = function onError(_ref2) {
    var err = _ref2.err;
    if (err) {
      throw err;
    }
  };
  if (props.datasource) {
    var views = props.datasource.views;
    var tableView = views.find(function (view) {
      return view.type === 'table';
    });
    var shouldRenderDatasource = tableView && canRenderDatasource(props.datasource.id);
    if (shouldRenderDatasource) {
      var _tableView$properties;
      var columns = (_tableView$properties = tableView.properties) === null || _tableView$properties === void 0 ? void 0 : _tableView$properties.columns;
      var visibleColumnKeys = columns === null || columns === void 0 ? void 0 : columns.map(function (_ref3) {
        var key = _ref3.key;
        return key;
      });
      var columnCustomSizesEntries = columns === null || columns === void 0 ? void 0 : columns.filter(function (c) {
        return !!c.width;
      }).map(function (_ref4) {
        var key = _ref4.key,
          width = _ref4.width;
        return [key, width];
      });
      var columnCustomSizes = columnCustomSizesEntries !== null && columnCustomSizesEntries !== void 0 && columnCustomSizesEntries.length ? Object.fromEntries(columnCustomSizesEntries) : undefined;
      var wrappedColumnKeys = columns === null || columns === void 0 ? void 0 : columns.filter(function (c) {
        return c.isWrapped;
      }).map(function (c) {
        return c.key;
      });
      var datasource = props.datasource,
        layout = props.layout;
      return jsx(AnalyticsContext, {
        data: analyticsData
      }, jsx(CardErrorBoundary, _extends({
        unsupportedComponent: UnsupportedInline,
        datasourceId: props.datasource.id
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
      }, cardProps), jsx(WidthConsumer, null, function (_ref5) {
        var width = _ref5.width;
        return jsx("div", {
          css: datasourceContainerStyle,
          "data-testid": "renderer-datasource-table",
          style: {
            // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
            width: isNodeNested ? '100%' : calcBreakoutWidth(layout, width)
          }
        }, jsx(DatasourceTableView, {
          datasourceId: datasource.id,
          parameters: datasource.parameters,
          visibleColumnKeys: visibleColumnKeys,
          columnCustomSizes: columnCustomSizes,
          wrappedColumnKeys: wrappedColumnKeys && wrappedColumnKeys.length > 0 ? wrappedColumnKeys : undefined,
          url: url
        }));
      })));
    }
    return jsx(InlineCard, {
      data: data,
      url: url
    });
  }
  return jsx(AnalyticsContext, {
    data: analyticsData
  }, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "blockCardView-content-wrap",
    "data-block-card": true,
    "data-card-data": data ? JSON.stringify(data) : undefined,
    "data-card-url": url
  }, jsx(CardErrorBoundary, _extends({
    unsupportedComponent: UnsupportedBlock
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps), jsx(Card, _extends({
    appearance: "block",
    platform: platform
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps, {
    onError: onError
  })))));
}