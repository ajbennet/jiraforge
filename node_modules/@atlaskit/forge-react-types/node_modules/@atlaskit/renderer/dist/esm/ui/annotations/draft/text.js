function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import React from 'react';
var _findTextString = function findTextString(reactNode) {
  var result = null;
  var children = React.Children.toArray(reactNode);
  var _iterator = _createForOfIteratorHelper(children),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var childNode = _step.value;
      if (result) {
        break;
      } else if (typeof childNode === 'string') {
        result = childNode;
      } else if (isReactElement(childNode) && childNode.props.children) {
        result = _findTextString(childNode.props.children);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
};
export { _findTextString as findTextString };
function isReactElement(child) {
  return !!child.type;
}
export var splitText = function splitText(text, _ref) {
  var startOffset = _ref.startOffset,
    endOffset = _ref.endOffset;
  if (endOffset > text.length || endOffset - startOffset <= 0) {
    return null;
  }
  return [text.slice(0, startOffset), text.slice(startOffset, endOffset), text.slice(endOffset)].filter(Boolean);
};
export var calcTextSplitOffset = function calcTextSplitOffset(position, textPosition, text) {
  var start = textPosition.start,
    end = textPosition.end;
  var startOffset = Math.max(position.from - start, 0);
  var endOffset = Math.min(Math.abs(end - position.to - text.length), text.length);
  return {
    startOffset: startOffset,
    endOffset: endOffset
  };
};