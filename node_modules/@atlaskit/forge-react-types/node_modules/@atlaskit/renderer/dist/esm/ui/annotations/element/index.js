import React, { useMemo, useCallback, useContext } from 'react';
import { AnnotationMarkStates } from '@atlaskit/adf-schema';
import { MarkComponent } from './mark';
import { useInlineCommentsFilter } from '../hooks/use-inline-comments-filter';
import { useInlineCommentSubscriberContext } from '../hooks/use-inline-comment-subscriber';
import { useHasFocusEvent } from '../hooks/use-events';
import { InlineCommentsStateContext } from '../context';
import { AnnotationUpdateEvent } from '@atlaskit/editor-common/types';
var MarkElement = function MarkElement(_ref) {
  var annotationParentIds = _ref.annotationParentIds,
    children = _ref.children,
    dataAttributes = _ref.dataAttributes,
    id = _ref.id,
    useBlockLevel = _ref.useBlockLevel;
  var updateSubscriber = useInlineCommentSubscriberContext();
  var states = useContext(InlineCommentsStateContext);
  var _useHasFocusEvent = useHasFocusEvent({
      id: id,
      updateSubscriber: updateSubscriber
    }),
    hasFocus = _useHasFocusEvent.hasFocus,
    isHovered = _useHasFocusEvent.isHovered;
  var dataAttributesMemorized = useMemo(function () {
    return dataAttributes;
  }, [dataAttributes]);
  var onClick = useCallback(function (props) {
    if (!updateSubscriber) {
      return;
    }
    if (useBlockLevel) {
      return;
    }
    var eventTarget = props.eventTarget,
      annotationIds = props.annotationIds;
    updateSubscriber.emit(AnnotationUpdateEvent.ON_ANNOTATION_CLICK, {
      annotationIds: annotationIds,
      eventTarget: eventTarget
    });
  }, [updateSubscriber, useBlockLevel]);
  var activeParentIds = useInlineCommentsFilter({
    annotationIds: annotationParentIds,
    filter: {
      state: AnnotationMarkStates.ACTIVE
    }
  });
  return /*#__PURE__*/React.createElement(MarkComponent, {
    id: id,
    dataAttributes: dataAttributesMemorized,
    annotationParentIds: activeParentIds,
    onClick: onClick,
    hasFocus: hasFocus,
    isHovered: isHovered,
    state: states[id],
    useBlockLevel: useBlockLevel
  }, children);
};
export { MarkElement };