import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject, _templateObject2;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { forwardRef, useMemo } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { blockNodesVerticalMargin } from '@atlaskit/editor-shared-styles';
import { codeBlockSharedStyles, CodeBlockSharedCssClassName } from '@atlaskit/editor-common/styles';
import { useBidiWarnings } from '../../../hooks/use-bidi-warnings';
import { RendererCssClassName } from '../../../../consts';
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var lightWeightCodeBlockStyles = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t.", " {\n\t\tcursor: text;\n\t}\n"])), CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER);
export var LightWeightCodeBlockCssClassName = {
  CONTAINER: 'light-weight-code-block'
};
export var getLightWeightCodeBlockStylesForRootRendererStyleSheet = function getLightWeightCodeBlockStylesForRootRendererStyleSheet() {
  // We overwrite the rule that clears margin-top for first nested codeblocks, as
  // our lightweight codeblock dom structure will always nest the codeblock inside
  // an extra container div which would constantly be targeted. Now, top-level
  // lightweight codeblock containers will not be targeted.
  // NOTE: This must be added after other .code-block styles in the root
  // Renderer stylesheet.
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n\t\t.", "\n\t\t\t> .", "\n\t\t\t.", " {\n\t\t\tmargin-top: ", ";\n\t\t}\n\t"])), RendererCssClassName.DOCUMENT, LightWeightCodeBlockCssClassName.CONTAINER, CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER, blockNodesVerticalMargin);
};
var LightWeightCodeBlock = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var text = _ref.text,
    _ref$codeBidiWarningT = _ref.codeBidiWarningTooltipEnabled,
    codeBidiWarningTooltipEnabled = _ref$codeBidiWarningT === void 0 ? true : _ref$codeBidiWarningT,
    className = _ref.className;
  var textRows = useMemo(function () {
    return (text !== null && text !== void 0 ? text : '').split('\n');
  }, [text]);
  var _useBidiWarnings = useBidiWarnings({
      enableWarningTooltip: codeBidiWarningTooltipEnabled
    }),
    renderBidiWarnings = _useBidiWarnings.renderBidiWarnings;
  var classNames = [LightWeightCodeBlockCssClassName.CONTAINER, className].join(' ');
  return jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: classNames,
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ,
    css: [codeBlockSharedStyles(), lightWeightCodeBlockStyles]
  }, jsx("div", {
    className: CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER
  }, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: CodeBlockSharedCssClassName.CODEBLOCK_CONTENT_WRAPPER
  }, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: CodeBlockSharedCssClassName.CODEBLOCK_LINE_NUMBER_GUTTER
  }, textRows.map(function (_, index) {
    return (
      // Ignored via go/ees005
      // eslint-disable-next-line react/no-array-index-key
      jsx("span", {
        key: index
      })
    );
  })), jsx("div", {
    className: CodeBlockSharedCssClassName.CODEBLOCK_CONTENT
  }, jsx("code", null, renderBidiWarnings(text))))));
});
export default LightWeightCodeBlock;