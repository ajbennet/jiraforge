import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useState } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { CodeBlockSharedCssClassName } from '@atlaskit/editor-common/styles';
import { CodeBlock as AkCodeBlock } from '@atlaskit/code';
import { codeBidiWarningMessages } from '@atlaskit/editor-common/messages';
import CodeBlockContainer from './components/codeBlockContainer';
function CodeBlock(props) {
  var text = props.text,
    language = props.language,
    _props$allowCopyToCli = props.allowCopyToClipboard,
    allowCopyToClipboard = _props$allowCopyToCli === void 0 ? false : _props$allowCopyToCli,
    _props$allowWrapCodeB = props.allowWrapCodeBlock,
    allowWrapCodeBlock = _props$allowWrapCodeB === void 0 ? false : _props$allowWrapCodeB,
    codeBidiWarningTooltipEnabled = props.codeBidiWarningTooltipEnabled;
  var codeBidiWarningLabel = props.intl.formatMessage(codeBidiWarningMessages.label);
  var className = [CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER, props.className].join(' ');
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    wrapLongLines = _useState2[0],
    setWrapLongLines = _useState2[1];
  return jsx(CodeBlockContainer, {
    allowCopyToClipboard: allowCopyToClipboard,
    allowWrapCodeBlock: allowWrapCodeBlock
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    setWrapLongLines: setWrapLongLines,
    text: text,
    wrapLongLines: wrapLongLines
  }, jsx(AkCodeBlock, {
    testId: "renderer-code-block",
    language: language,
    text: text,
    codeBidiWarningLabel: codeBidiWarningLabel,
    codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled,
    shouldWrapLongLines: allowWrapCodeBlock && wrapLongLines
  }));
}
export default injectIntl(CodeBlock);