import { useEffect, useRef } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { useAnnotationRangeDispatch, useAnnotationRangeState } from '../contexts/AnnotationRangeContext';
import { isRangeInsideOfRendererContainer } from './utils';
import { isRoot } from '../../../steps';
export var useUserSelectionRange = function useUserSelectionRange(props) {
  var rendererDOM = props.rendererRef.current;
  var selectionTimeoutRef = useRef();
  var _useAnnotationRangeDi = useAnnotationRangeDispatch(),
    clearRange = _useAnnotationRangeDi.clearRange,
    setRange = _useAnnotationRangeDi.setRange;
  var _useAnnotationRangeSt = useAnnotationRangeState(),
    range = _useAnnotationRangeSt.range,
    draftRange = _useAnnotationRangeSt.draftRange,
    type = _useAnnotationRangeSt.type;
  useEffect(function () {
    if (!document || !rendererDOM) {
      return;
    }
    var onSelectionChange = function onSelectionChange(event) {
      if (selectionTimeoutRef.current) {
        clearTimeout(selectionTimeoutRef.current);
      }
      selectionTimeoutRef.current = setTimeout(function () {
        var sel = document.getSelection();
        if (!sel || sel.type !== 'Range' || sel.rangeCount !== 1) {
          return;
        }
        var _range = sel.getRangeAt(0);
        if (rendererDOM && isRangeInsideOfRendererContainer(rendererDOM, _range)) {
          if (fg('platform_editor_allow_annotation_triple_click')) {
            var startContainer = _range.startContainer,
              endContainer = _range.endContainer,
              commonAncestorContainer = _range.commonAncestorContainer;
            var parentNode = startContainer.parentNode;

            // ED-23493
            // On triple-click in Chrome and Safari, the native Selection API's range has endContainer as a non-text node
            // and commonAncestorContainer as root level div.ak-renderer-document when the node is followed by div or hr.

            // Triple clicks are the only case that can cause the endContainer to be a non-text node
            // Same check for highlight range logic in confluence/next/packages/comments-util/src/domUtils.ts Line 180
            var isTripleClick = endContainer.nodeType !== Node.TEXT_NODE;

            // isAnnotationAllowedOnRange range validation is checking if the parent container is root element and disable the comment if it is.
            // platform/packages/editor/renderer/src/steps/index.ts Line 180

            // This workaround ensures the endContainer is set to a text node when endContainer is non-text and the parent container is the root element
            if (isTripleClick &&
            // Ignored via go/ees005
            // eslint-disable-next-line @atlaskit/editor/no-as-casting
            isRoot(commonAncestorContainer) && (parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeName) === 'P' // ignore if the parent node is strong, em, etc.
            ) {
              var _parentNode$lastChild, _parentNode$lastChild2;
              var lastChild = parentNode !== null && parentNode !== void 0 && parentNode.lastChild && (parentNode === null || parentNode === void 0 || (_parentNode$lastChild = parentNode.lastChild) === null || _parentNode$lastChild === void 0 ? void 0 : _parentNode$lastChild.nodeType) === Node.TEXT_NODE ? parentNode === null || parentNode === void 0 ? void 0 : parentNode.lastChild : parentNode === null || parentNode === void 0 || (_parentNode$lastChild2 = parentNode.lastChild) === null || _parentNode$lastChild2 === void 0 ? void 0 : _parentNode$lastChild2.childNodes[0];
              _range.setEnd(lastChild, lastChild.length || 0);
            }
          }
          setRange(_range.cloneRange());
        }
      }, 250);
    };

    // Ignored via go/ees005
    // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
    document.addEventListener('selectionchange', onSelectionChange);
    return function () {
      // Ignored via go/ees005
      // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
      document.removeEventListener('selectionchange', onSelectionChange);
      clearRange();
    };
  }, [rendererDOM, setRange, clearRange]);
  return [type === 'selection' ? range : null, draftRange, clearRange];
};