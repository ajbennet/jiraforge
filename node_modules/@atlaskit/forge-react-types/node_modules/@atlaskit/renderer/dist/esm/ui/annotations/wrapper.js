import React, { useCallback, useContext } from 'react';
import { AnnotationsDraftContextWrapper, ProvidersContext } from './context';
import { RangeValidator as HoverRangeValidator } from './hover/range-validator';
import { SelectionRangeValidator } from './selection/range-validator';
import { useAnnotationRangeDispatch, useAnnotationRangeState } from './contexts/AnnotationRangeContext';
export var AnnotationsContextWrapper = function AnnotationsContextWrapper(props) {
  var providers = useContext(ProvidersContext);
  var _useAnnotationRangeSt = useAnnotationRangeState(),
    range = _useAnnotationRangeSt.range,
    type = _useAnnotationRangeSt.type;
  var _useAnnotationRangeDi = useAnnotationRangeDispatch(),
    setDraftRange = _useAnnotationRangeDi.setDraftRange,
    clearDraftRange = _useAnnotationRangeDi.clearDraftRange;
  var rendererRef = props.rendererRef,
    createAnalyticsEvent = props.createAnalyticsEvent,
    children = props.children;
  var inlineCommentProvider = providers && providers.inlineComment;
  var selectionComponent = inlineCommentProvider && inlineCommentProvider.selectionComponent;
  var hoverComponent = inlineCommentProvider && inlineCommentProvider.hoverComponent;

  // We want to set the draft to the range the user highlighted
  var setRangeForDraft = useCallback(function () {
    setDraftRange(range, type);
  }, [range, setDraftRange, type]);
  var clearRangeForDraft = useCallback(function () {
    clearDraftRange(type);
  }, [type, clearDraftRange]);
  var render = useCallback(function (_ref) {
    var applyAnnotationDraftAt = _ref.applyAnnotationDraftAt,
      clearAnnotationDraft = _ref.clearAnnotationDraft;
    return /*#__PURE__*/React.createElement(React.Fragment, null, children, !!hoverComponent && /*#__PURE__*/React.createElement(HoverRangeValidator, {
      createAnalyticsEvent: createAnalyticsEvent,
      rendererRef: rendererRef
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      component: hoverComponent,
      applyAnnotationDraftAt: applyAnnotationDraftAt,
      clearAnnotationDraft: clearAnnotationDraft
    }), !!selectionComponent && /*#__PURE__*/React.createElement(SelectionRangeValidator, {
      createAnalyticsEvent: createAnalyticsEvent,
      rendererRef: rendererRef
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      selectionComponent: selectionComponent,
      applyAnnotationDraftAt: applyAnnotationDraftAt,
      clearAnnotationDraft: clearAnnotationDraft
    }));
  }, [hoverComponent, selectionComponent, children, rendererRef, createAnalyticsEvent]);
  if (!selectionComponent && !hoverComponent) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  return /*#__PURE__*/React.createElement(AnnotationsDraftContextWrapper, {
    setDraftRange: setRangeForDraft,
    clearDraftRange: clearRangeForDraft
  }, render);
};