import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject, _templateObject2;
/* eslint-disable @atlaskit/design-system/prefer-primitives */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx, css } from '@emotion/react';
import { N40 } from '@atlaskit/theme/colors';
import React, { useState } from 'react';
import { renderExtension } from './extension';
import ExtensionRenderer from '../../ui/ExtensionRenderer';
import { WidthConsumer, sharedMultiBodiedExtensionStyles } from '@atlaskit/editor-common/ui';
import { RendererCssClassName } from '../../consts';
import { calcBreakoutWidth } from '@atlaskit/editor-common/utils';
var useMultiBodiedExtensionActions = function useMultiBodiedExtensionActions(_ref) {
  var updateActiveChild = _ref.updateActiveChild,
    children = _ref.children;
  var actions = React.useMemo(function () {
    return {
      changeActive: function changeActive(index) {
        return updateActiveChild(index);
      },
      addChild: function addChild() {
        return false;
      },
      getChildrenCount: function getChildrenCount() {
        return children ? children === null || children === void 0 ? void 0 : children.length : 0;
      },
      removeChild: function removeChild(index) {
        return false;
      },
      updateParameters: function updateParameters(parameters) {
        return false;
      },
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      getChildren: function getChildren() {
        return [];
      }
    };
  }, [updateActiveChild, children]);
  return actions;
};

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var navigationCssExtended = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t", ";\n\tmargin-left: 0 !important;\n\tmargin-right: 0 !important;\n\t.mbe-add-tab-button,\n\t.mbe-remove-tab {\n\t\tdisplay: none;\n\t}\n"])), sharedMultiBodiedExtensionStyles.mbeNavigation);
var MultiBodiedExtension = function MultiBodiedExtension(props) {
  var children = props.children,
    _props$layout = props.layout,
    layout = _props$layout === void 0 ? 'default' : _props$layout,
    _props$path = props.path,
    path = _props$path === void 0 ? [] : _props$path;
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    activeChildIndex = _useState2[0],
    setActiveChildIndex = _useState2[1];
  var removeOverflow = React.Children.toArray(children)
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  .map(function (child) {
    return /*#__PURE__*/React.isValidElement(child) ? child.props.nodeType === 'table' : false;
  }).every(Boolean);
  var overflowContainerClass = !removeOverflow ? RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER : '';
  var updateActiveChild = React.useCallback(function (index) {
    if (typeof index !== 'number') {
      // TODO: Make sure we log this somewhere if this happens
      setActiveChildIndex(0);
      return false;
    }
    setActiveChildIndex(index);
    return true;
  }, [setActiveChildIndex]);
  var actions = useMultiBodiedExtensionActions({
    updateActiveChild: updateActiveChild,
    children: children
  });
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  var containerCssExtended = css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n\t\t", ";\n\t\t.ak-renderer-extension {\n\t\t\tmargin-top: 0 !important;\n\t\t}\n\n\t\t[data-layout='full-width'],\n\t\t[data-layout='wide'] {\n\t\t\t.multiBodiedExtension-navigation {\n\t\t\t\tborder-right: 3px solid ", " !important;\n\t\t\t}\n\t\t}\n\n\t\t.multiBodiedExtension--frames\n\t\t\t> [data-extension-frame='true']:nth-of-type(", ") {\n\t\t\t", "\n\t\t\tmargin-left: 0;\n\t\t\tmargin-right: 0;\n\t\t}\n\t"])), sharedMultiBodiedExtensionStyles.mbeExtensionContainer, "var(--ds-border, ".concat(N40, ")"), activeChildIndex + 1, sharedMultiBodiedExtensionStyles.extensionFrameContent);
  var isTopLevel = path.length < 1;
  var centerAlignClass = isTopLevel && ['wide', 'full-width'].includes(layout) ? RendererCssClassName.EXTENSION_CENTER_ALIGN : '';
  function renderMbeContent(width) {
    return jsx("div", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: "".concat(RendererCssClassName.EXTENSION, " ").concat(centerAlignClass, " ").concat(overflowContainerClass),
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        width: isTopLevel ? calcBreakoutWidth(layout, width) : '100%'
      },
      "data-layout": layout
    }, jsx("nav", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: "multiBodiedExtension-navigation",
      css: navigationCssExtended,
      "data-testid": "multiBodiedExtension-navigation"
    }, jsx(ExtensionRenderer
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    , _extends({}, props, {
      actions: actions,
      type: "multiBodiedExtension"
    }), function (_ref2) {
      var result = _ref2.result;
      try {
        if (result && /*#__PURE__*/React.isValidElement(result)) {
          // Return the content directly if it's a valid JSX.Element
          return renderExtension(result, layout, {
            isTopLevel: path.length < 1
          });
        }
      } catch (e) {
        /** We don't want this error to block renderer */
        /** We keep rendering the default content */
      }

      // Always return default content if anything goes wrong
      return renderExtension(children, layout, {
        isTopLevel: path.length < 1
      });
    })), jsx("article", {
      "data-testid": "multiBodiedExtension--frames"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: "multiBodiedExtension--frames"
    }, children));
  }
  return jsx("section", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "multiBodiedExtension--container"
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    ,
    css: containerCssExtended,
    "data-testid": "multiBodiedExtension--container",
    "data-active-child-index": activeChildIndex,
    "data-layout": layout
  }, jsx(WidthConsumer, null, function (_ref3) {
    var width = _ref3.width;
    return renderMbeContent(width);
  }));
};
export default MultiBodiedExtension;