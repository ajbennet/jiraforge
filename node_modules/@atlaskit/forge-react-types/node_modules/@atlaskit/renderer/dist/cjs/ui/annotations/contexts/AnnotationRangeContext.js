"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnnotationRangeState = exports.useAnnotationRangeDispatch = exports.AnnotationRangeProvider = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function reducer(state, action) {
  switch (action.type) {
    case 'clear':
      if (!!state.range || !!state.type) {
        return {
          range: null,
          draftRange: null,
          type: null
        };
      }
      return state;
    case 'clearSelection':
      if (state.type === 'selection') {
        return _objectSpread(_objectSpread({}, state), {}, {
          range: null,
          type: null
        });
      }
      return state;
    case 'clearDraftSelection':
      if (state.type === 'selection') {
        return _objectSpread(_objectSpread({}, state), {}, {
          draftRange: null
        });
      }
      return state;
    case 'clearDraftHover':
      if (state.type === 'hover') {
        return _objectSpread(_objectSpread({}, state), {}, {
          draftRange: null
        });
      }
      return state;
    case 'clearHover':
      if (state.type === 'hover') {
        return {
          range: null,
          draftRange: null,
          type: null
        };
      }
      return state;
    case 'setSelection':
      if (state.range !== action.range || state.type !== 'selection') {
        return _objectSpread(_objectSpread({}, state), {}, {
          range: action.range,
          type: 'selection'
        });
      }
      return state;
    case 'setHover':
      if (state.range !== action.range || state.type !== 'hover') {
        return _objectSpread(_objectSpread({}, state), {}, {
          range: action.range,
          type: 'hover'
        });
      }
      return state;
    case 'setDraftSelection':
      if (state.draftRange !== action.draftRange || state.type !== 'selection') {
        return {
          range: null,
          draftRange: action.draftRange,
          type: null
        };
      }
      return state;
    case 'setDraftHover':
      if (state.draftRange !== action.draftRange || state.type !== 'hover') {
        return _objectSpread(_objectSpread({}, state), {}, {
          draftRange: action.draftRange
        });
      }
      return state;
  }
}
var AnnotationRangeStateContext = /*#__PURE__*/(0, _react.createContext)({
  range: null,
  draftRange: null,
  type: null
});
var AnnotationRangeDispatchContext = /*#__PURE__*/(0, _react.createContext)({
  clearRange: function clearRange() {},
  clearSelectionRange: function clearSelectionRange() {},
  clearDraftRange: function clearDraftRange() {},
  clearHoverRange: function clearHoverRange() {},
  setRange: function setRange() {},
  setDraftRange: function setDraftRange() {}
});
var AnnotationRangeProvider = exports.AnnotationRangeProvider = function AnnotationRangeProvider(_ref) {
  var children = _ref.children,
    allowCommentsOnMedia = _ref.allowCommentsOnMedia;
  var _useReducer = (0, _react.useReducer)(reducer, {
      range: null,
      draftRange: null,
      type: null
    }),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    _useReducer2$ = _useReducer2[0],
    range = _useReducer2$.range,
    draftRange = _useReducer2$.draftRange,
    type = _useReducer2$.type,
    dispatch = _useReducer2[1];
  var clearRange = (0, _react.useCallback)(function () {
    return dispatch({
      type: 'clear'
    });
  }, []);
  var clearSelectionRange = (0, _react.useCallback)(function () {
    return dispatch({
      type: 'clearSelection'
    });
  }, []);
  var clearDraftRange = (0, _react.useCallback)(function (type) {
    if (type === 'hover') {
      dispatch({
        type: 'clearDraftHover'
      });
      return;
    }
    dispatch({
      type: 'clearDraftSelection'
    });
  }, []);
  var clearHoverRange = (0, _react.useCallback)(function () {
    return dispatch({
      type: 'clearHover'
    });
  }, []);
  var setRange = (0, _react.useCallback)(function (range) {
    return dispatch({
      type: 'setSelection',
      range: range
    });
  }, []);
  var setDraftRange = (0, _react.useCallback)(function (range, type) {
    if (type === 'hover') {
      dispatch({
        type: 'setDraftHover',
        draftRange: range
      });
      return;
    }
    dispatch({
      type: 'setDraftSelection',
      draftRange: range
    });
  }, []);
  var setHoverTarget = (0, _react.useCallback)(function (target) {
    // the HoverComponent expects an element deeply nested inside media, these classes work with the current implementation
    var mediaNode = target.querySelector('.media-card-inline-player, .media-file-card-view');
    if (!mediaNode) {
      return;
    }
    var range = document.createRange();
    range.setStartBefore(mediaNode);
    range.setEndAfter(mediaNode);
    dispatch({
      type: 'setHover',
      range: range
    });
  }, []);
  var stateData = (0, _react.useMemo)(function () {
    return {
      range: range,
      draftRange: draftRange,
      type: type
    };
  }, [range, draftRange, type]);
  var dispatchData = (0, _react.useMemo)(function () {
    return {
      clearRange: clearRange,
      clearSelectionRange: clearSelectionRange,
      clearDraftRange: clearDraftRange,
      clearHoverRange: clearHoverRange,
      setRange: setRange,
      setDraftRange: setDraftRange,
      setHoverTarget: !!allowCommentsOnMedia ? setHoverTarget : undefined
    };
  }, [allowCommentsOnMedia, clearRange, clearSelectionRange, clearDraftRange, clearHoverRange, setRange, setDraftRange, setHoverTarget]);
  return /*#__PURE__*/_react.default.createElement(AnnotationRangeStateContext.Provider, {
    value: stateData
  }, /*#__PURE__*/_react.default.createElement(AnnotationRangeDispatchContext.Provider, {
    value: dispatchData
  }, children));
};
var useAnnotationRangeState = exports.useAnnotationRangeState = function useAnnotationRangeState() {
  return (0, _react.useContext)(AnnotationRangeStateContext);
};
var useAnnotationRangeDispatch = exports.useAnnotationRangeDispatch = function useAnnotationRangeDispatch() {
  return (0, _react.useContext)(AnnotationRangeDispatchContext);
};