"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkElement = void 0;
var _react = _interopRequireWildcard(require("react"));
var _adfSchema = require("@atlaskit/adf-schema");
var _mark = require("./mark");
var _useInlineCommentsFilter = require("../hooks/use-inline-comments-filter");
var _useInlineCommentSubscriber = require("../hooks/use-inline-comment-subscriber");
var _useEvents = require("../hooks/use-events");
var _context = require("../context");
var _types = require("@atlaskit/editor-common/types");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MarkElement = exports.MarkElement = function MarkElement(_ref) {
  var annotationParentIds = _ref.annotationParentIds,
    children = _ref.children,
    dataAttributes = _ref.dataAttributes,
    id = _ref.id,
    useBlockLevel = _ref.useBlockLevel;
  var updateSubscriber = (0, _useInlineCommentSubscriber.useInlineCommentSubscriberContext)();
  var states = (0, _react.useContext)(_context.InlineCommentsStateContext);
  var _useHasFocusEvent = (0, _useEvents.useHasFocusEvent)({
      id: id,
      updateSubscriber: updateSubscriber
    }),
    hasFocus = _useHasFocusEvent.hasFocus,
    isHovered = _useHasFocusEvent.isHovered;
  var dataAttributesMemorized = (0, _react.useMemo)(function () {
    return dataAttributes;
  }, [dataAttributes]);
  var onClick = (0, _react.useCallback)(function (props) {
    if (!updateSubscriber) {
      return;
    }
    if (useBlockLevel) {
      return;
    }
    var eventTarget = props.eventTarget,
      annotationIds = props.annotationIds;
    updateSubscriber.emit(_types.AnnotationUpdateEvent.ON_ANNOTATION_CLICK, {
      annotationIds: annotationIds,
      eventTarget: eventTarget
    });
  }, [updateSubscriber, useBlockLevel]);
  var activeParentIds = (0, _useInlineCommentsFilter.useInlineCommentsFilter)({
    annotationIds: annotationParentIds,
    filter: {
      state: _adfSchema.AnnotationMarkStates.ACTIVE
    }
  });
  return /*#__PURE__*/_react.default.createElement(_mark.MarkComponent, {
    id: id,
    dataAttributes: dataAttributesMemorized,
    annotationParentIds: activeParentIds,
    onClick: onClick,
    hasFocus: hasFocus,
    isHovered: isHovered,
    state: states[id],
    useBlockLevel: useBlockLevel
  }, children);
};