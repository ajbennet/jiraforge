"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActiveHeaderIdProvider = exports.ActiveHeaderIdConsumer = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _React$createContext = /*#__PURE__*/_react.default.createContext(undefined),
  Provider = exports.ActiveHeaderIdProvider = _React$createContext.Provider,
  Consumer = _React$createContext.Consumer;
/**
 * We need to expose this abstraction on top of the native Consumer in order to control when
 * The consumer will get notified when a match has happened. If we use the Consumer directly in
 * Expand components without this inner state, everytime a new prop comes in, and the `newActiveHeaderId`
 * is the same as before, we will set the expand to true forever, until the active header id changes.
 * Thus, the user won't be able to collapse the expand.
 *
 * By exposing `onNestedHeaderIdMatch` here we can control when will consumers be notified:
 * only when a `newActiveHeaderId` comes in from the Provider and the list of header ids includes it.
 */
var ActiveHeaderIdConsumer = exports.ActiveHeaderIdConsumer = function ActiveHeaderIdConsumer(_ref) {
  var nestedHeaderIds = _ref.nestedHeaderIds,
    onNestedHeaderIdMatch = _ref.onNestedHeaderIdMatch;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    activeHeaderId = _useState2[0],
    setActiveHeaderId = _useState2[1];
  return /*#__PURE__*/_react.default.createElement(Consumer, null, function (newActiveHeaderId) {
    if (!newActiveHeaderId || !nestedHeaderIds.includes(newActiveHeaderId)) {
      setActiveHeaderId(undefined);
    } else if (newActiveHeaderId !== activeHeaderId && nestedHeaderIds.includes(newActiveHeaderId)) {
      setActiveHeaderId(newActiveHeaderId);
      onNestedHeaderIdMatch();
    }
    return null;
  });
};