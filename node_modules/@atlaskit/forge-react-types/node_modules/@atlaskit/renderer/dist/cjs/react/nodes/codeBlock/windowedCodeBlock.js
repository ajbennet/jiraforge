"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _styles = require("@atlaskit/editor-common/styles");
var _useInViewport2 = require("../../hooks/use-in-viewport");
var _useBidiWarnings2 = require("../../hooks/use-bidi-warnings");
var _lightWeightCodeBlock = _interopRequireDefault(require("./components/lightWeightCodeBlock"));
var _codeBlockContainer = _interopRequireDefault(require("./components/codeBlockContainer"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var LazyAkCodeBlock = /*#__PURE__*/(0, _react.lazy)(
/*#__PURE__*/
// Ignored via go/ees005
// eslint-disable-next-line require-await
(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
  return _regenerator.default.wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        return _context.abrupt("return", Promise.resolve().then(function () {
          return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_renderer-codeBlock" */
          '@atlaskit/code/block'));
        }));
      case 1:
      case "end":
        return _context.stop();
    }
  }, _callee);
})));
var joinWithSpaces = function joinWithSpaces() {
  for (var _len = arguments.length, strs = new Array(_len), _key = 0; _key < _len; _key++) {
    strs[_key] = arguments[_key];
  }
  return strs.join(' ');
};
var MemoizedLightWeightCodeBlock = /*#__PURE__*/(0, _react.memo)(_lightWeightCodeBlock.default);
var WindowedCodeBlock = function WindowedCodeBlock(_ref2) {
  var text = _ref2.text,
    language = _ref2.language,
    allowCopyToClipboard = _ref2.allowCopyToClipboard,
    _ref2$allowWrapCodeBl = _ref2.allowWrapCodeBlock,
    allowWrapCodeBlock = _ref2$allowWrapCodeBl === void 0 ? false : _ref2$allowWrapCodeBl,
    codeBidiWarningTooltipEnabled = _ref2.codeBidiWarningTooltipEnabled,
    rootClassName = _ref2.className;
  var _useBidiWarnings = (0, _useBidiWarnings2.useBidiWarnings)({
      enableWarningTooltip: codeBidiWarningTooltipEnabled
    }),
    warningLabel = _useBidiWarnings.warningLabel;
  var _useInViewport = (0, _useInViewport2.useInViewport)(),
    isInViewport = _useInViewport.isInViewport,
    trackingRef = _useInViewport.trackingRef;
  var className = joinWithSpaces(_styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER, rootClassName);
  var memoizedLightWeightCodeBlock = (0, _react2.jsx)(MemoizedLightWeightCodeBlock, {
    ref: trackingRef,
    text: text,
    codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: rootClassName
  });
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    wrapLongLines = _useState2[0],
    setWrapLongLines = _useState2[1];
  return isInViewport ? (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_react.Suspense, {
    fallback: memoizedLightWeightCodeBlock
  }, (0, _react2.jsx)(_codeBlockContainer.default, {
    allowCopyToClipboard: allowCopyToClipboard,
    allowWrapCodeBlock: allowWrapCodeBlock
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    setWrapLongLines: setWrapLongLines,
    text: text,
    wrapLongLines: wrapLongLines
  }, (0, _react2.jsx)(LazyAkCodeBlock, {
    language: language,
    text: text,
    codeBidiWarningLabel: warningLabel,
    codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled,
    shouldWrapLongLines: allowWrapCodeBlock && wrapLongLines
  })))) : memoizedLightWeightCodeBlock;
};
var _default = exports.default = WindowedCodeBlock;