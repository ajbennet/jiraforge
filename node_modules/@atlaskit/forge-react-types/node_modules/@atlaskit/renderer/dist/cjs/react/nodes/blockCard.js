"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockCard;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@emotion/react");
var _smartCard = require("@atlaskit/smart-card");
var _ui = require("@atlaskit/editor-common/ui");
var _fallback = require("./fallback");
var _getCardClickHandler = require("../utils/getCardClickHandler");
var _inlineCard = _interopRequireDefault(require("./inlineCard"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _linkDatasource = require("@atlaskit/link-datasource");
var _colors = require("@atlaskit/theme/colors");
var _utils = require("@atlaskit/editor-common/utils");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var datasourceContainerStyle = (0, _react.css)({
  borderRadius: "var(--ds-border-radius-200, 8px)",
  border: "1px solid ".concat("var(--ds-border, ".concat(_colors.N40, ")")),
  overflow: 'hidden',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
  marginLeft: '50%',
  marginBottom: "var(--ds-space-150, 0.75rem)",
  transform: 'translateX(-50%)'
});
function BlockCard(props) {
  var url = props.url,
    data = props.data,
    eventHandlers = props.eventHandlers,
    portal = props.portal,
    smartLinks = props.smartLinks,
    isNodeNested = props.isNodeNested;
  var _ref = smartLinks || {},
    actionOptions = _ref.actionOptions;
  var onClick = (0, _getCardClickHandler.getCardClickHandler)(eventHandlers, url);
  var platform = 'web';
  var cardProps = {
    url: url,
    data: data,
    onClick: onClick,
    container: portal,
    isDatasource: !!props.datasource,
    actionOptions: actionOptions
  };
  var analyticsData = {
    attributes: {
      location: 'renderer'
    },
    // Below is added for the future implementation of Linking Platform namespaced analytic context
    location: 'renderer'
  };
  var onError = function onError(_ref2) {
    var err = _ref2.err;
    if (err) {
      throw err;
    }
  };
  if (props.datasource) {
    var views = props.datasource.views;
    var tableView = views.find(function (view) {
      return view.type === 'table';
    });
    var shouldRenderDatasource = tableView && (0, _utils.canRenderDatasource)(props.datasource.id);
    if (shouldRenderDatasource) {
      var _tableView$properties;
      var columns = (_tableView$properties = tableView.properties) === null || _tableView$properties === void 0 ? void 0 : _tableView$properties.columns;
      var visibleColumnKeys = columns === null || columns === void 0 ? void 0 : columns.map(function (_ref3) {
        var key = _ref3.key;
        return key;
      });
      var columnCustomSizesEntries = columns === null || columns === void 0 ? void 0 : columns.filter(function (c) {
        return !!c.width;
      }).map(function (_ref4) {
        var key = _ref4.key,
          width = _ref4.width;
        return [key, width];
      });
      var columnCustomSizes = columnCustomSizesEntries !== null && columnCustomSizesEntries !== void 0 && columnCustomSizesEntries.length ? Object.fromEntries(columnCustomSizesEntries) : undefined;
      var wrappedColumnKeys = columns === null || columns === void 0 ? void 0 : columns.filter(function (c) {
        return c.isWrapped;
      }).map(function (c) {
        return c.key;
      });
      var datasource = props.datasource,
        layout = props.layout;
      return (0, _react.jsx)(_analyticsNext.AnalyticsContext, {
        data: analyticsData
      }, (0, _react.jsx)(_fallback.CardErrorBoundary, (0, _extends2.default)({
        unsupportedComponent: _ui.UnsupportedInline,
        datasourceId: props.datasource.id
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
      }, cardProps), (0, _react.jsx)(_ui.WidthConsumer, null, function (_ref5) {
        var width = _ref5.width;
        return (0, _react.jsx)("div", {
          css: datasourceContainerStyle,
          "data-testid": "renderer-datasource-table",
          style: {
            // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
            width: isNodeNested ? '100%' : (0, _utils.calcBreakoutWidth)(layout, width)
          }
        }, (0, _react.jsx)(_linkDatasource.DatasourceTableView, {
          datasourceId: datasource.id,
          parameters: datasource.parameters,
          visibleColumnKeys: visibleColumnKeys,
          columnCustomSizes: columnCustomSizes,
          wrappedColumnKeys: wrappedColumnKeys && wrappedColumnKeys.length > 0 ? wrappedColumnKeys : undefined,
          url: url
        }));
      })));
    }
    return (0, _react.jsx)(_inlineCard.default, {
      data: data,
      url: url
    });
  }
  return (0, _react.jsx)(_analyticsNext.AnalyticsContext, {
    data: analyticsData
  }, (0, _react.jsx)("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "blockCardView-content-wrap",
    "data-block-card": true,
    "data-card-data": data ? JSON.stringify(data) : undefined,
    "data-card-url": url
  }, (0, _react.jsx)(_fallback.CardErrorBoundary, (0, _extends2.default)({
    unsupportedComponent: _ui.UnsupportedBlock
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps), (0, _react.jsx)(_smartCard.Card, (0, _extends2.default)({
    appearance: "block",
    platform: platform
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps, {
    onError: onError
  })))));
}