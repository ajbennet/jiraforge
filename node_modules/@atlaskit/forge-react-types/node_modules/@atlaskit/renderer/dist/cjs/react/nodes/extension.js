"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderExtension = exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _ExtensionRenderer = _interopRequireDefault(require("../../ui/ExtensionRenderer"));
var _ui = require("@atlaskit/editor-common/ui");
var _utils = require("@atlaskit/editor-common/utils");
var _consts = require("../../consts");
var renderExtension = exports.renderExtension = function renderExtension(content, layout) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var removeOverflow = arguments.length > 3 ? arguments[3] : undefined;
  var overflowContainerClass = !removeOverflow ? _consts.RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER : '';

  // by default, we assume the extension is at top level, (direct child of doc node)
  var _ref = options || {},
    _ref$isTopLevel = _ref.isTopLevel,
    isTopLevel = _ref$isTopLevel === void 0 ? true : _ref$isTopLevel;
  var centerAlignClass = isTopLevel && ['wide', 'full-width'].includes(layout) ? _consts.RendererCssClassName.EXTENSION_CENTER_ALIGN : '';
  return /*#__PURE__*/_react.default.createElement(_ui.WidthConsumer, null, function (_ref2) {
    var width = _ref2.width;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: options.handleRef
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: "".concat(_consts.RendererCssClassName.EXTENSION, " ").concat(options.shadowClassNames, " ").concat(centerAlignClass),
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        width: isTopLevel ? (0, _utils.calcBreakoutWidth)(layout, width) : '100%'
      },
      "data-layout": layout
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: overflowContainerClass
    }, content));
  });
};
var Extension = function Extension(props) {
  var text = props.text,
    _props$layout = props.layout,
    layout = _props$layout === void 0 ? 'default' : _props$layout,
    handleRef = props.handleRef,
    shadowClassNames = props.shadowClassNames,
    _props$path = props.path,
    path = _props$path === void 0 ? [] : _props$path;
  return /*#__PURE__*/_react.default.createElement(_ExtensionRenderer.default
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  , (0, _extends2.default)({}, props, {
    type: "extension"
  }), function (_ref3) {
    var result = _ref3.result;
    try {
      // Return the result directly if it's a valid JSX.Element
      if (result && /*#__PURE__*/_react.default.isValidElement(result)) {
        return renderExtension(result, layout, {
          isTopLevel: path.length < 1,
          handleRef: handleRef,
          shadowClassNames: shadowClassNames
        });
      }
    } catch (e) {
      /** We don't want this error to block renderer */
      /** We keep rendering the default content */
    }

    // Always return default content if anything goes wrong
    return renderExtension(text || 'extension', layout, {
      isTopLevel: path.length < 1,
      handleRef: handleRef,
      shadowClassNames: shadowClassNames
    });
  });
};
var _default = exports.default = (0, _ui.overflowShadow)(Extension, {
  overflowSelector: ".".concat(_consts.RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER)
});