"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _hint = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/hint"));
var _adfSchema = require("@atlaskit/adf-schema");
var _panel = require("@atlaskit/editor-common/panel");
var _editorPalette = require("@atlaskit/editor-palette");
var _emoji = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/emoji"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _emoji2 = _interopRequireDefault(require("./emoji"));
var _icons = require("@atlaskit/editor-common/icons");
var _templateObject, _templateObject2;
var _excluded = ["backgroundColor", "hasIcon"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var PanelStyled = function PanelStyled(_ref) {
  var backgroundColor = _ref.backgroundColor,
    hasIcon = _ref.hasIcon,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- nested css mixins are violations
  var styles = (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\t\t&.", " {\n\t\t\t", "\n\n\t\t\t&[data-panel-type=", "] {\n\t\t\t\t", "\n\t\t\t}\n\t\t}\n\t"])), _panel.PanelSharedCssClassName.prefix, (0, _panel.panelSharedStylesWithoutPrefix)(), _adfSchema.PanelType.CUSTOM, hasIcon ? '' : 'padding-left: 12px;padding-right: 12px;');
  if (props['data-panel-type'] === _adfSchema.PanelType.CUSTOM && backgroundColor) {
    // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- nested css mixins are violations
    styles = (0, _react2.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n\t\t\t&.", " {\n\t\t\t\t", "\n\t\t\t}\n\n\t\t\t&[data-panel-type=", "] {\n\t\t\t\tbackground-color: ", ";\n\t\t\t\t", "\n\t\t\t}\n\t\t"])), _panel.PanelSharedCssClassName.prefix, (0, _panel.panelSharedStylesWithoutPrefix)(), _adfSchema.PanelType.CUSTOM, (0, _editorPalette.hexToEditorBackgroundPaletteColor)(backgroundColor) || backgroundColor, hasIcon ? '' : 'padding-left: 12px;padding-right: 12px;');
  }
  return (
    // eslint-disable-next-line
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", (0, _extends2.default)({
      css: styles
    }, props), props.children)
  );
};
PanelStyled.displayName = 'PanelStyled';
var panelIcons = {
  info: _icons.PanelInfoIcon,
  success: _icons.PanelSuccessIcon,
  note: _icons.PanelNoteIcon,
  tip: _hint.default,
  warning: _icons.PanelWarningIcon,
  error: _icons.PanelErrorIcon,
  custom: _emoji.default
};
var Panel = function Panel(props) {
  var allowCustomPanels = props.allowCustomPanels,
    type = props.panelType,
    panelColor = props.panelColor,
    panelIcon = props.panelIcon,
    panelIconId = props.panelIconId,
    panelIconText = props.panelIconText,
    providers = props.providers,
    children = props.children;
  // only allow custom panel type if flag is set
  // otherwise fall back to info if custom panel is given
  var panelType = allowCustomPanels ? type : type === _adfSchema.PanelType.CUSTOM ? _adfSchema.PanelType.INFO : type;
  var getIcon = function getIcon() {
    if (panelType === _adfSchema.PanelType.CUSTOM) {
      if (panelIcon && providers) {
        return (0, _react2.jsx)(_emoji2.default, {
          id: panelIconId,
          text: panelIconText,
          shortName: panelIcon,
          providers: providers
        });
      }
      return null;
    }
    var Icon = panelIcons[panelType];
    return (0, _platformFeatureFlags.fg)('platform_editor_update_panel_icon_aria_label') ? (0, _react2.jsx)(Icon, {
      label: "".concat(panelType, " panel")
    }) : (0, _react2.jsx)(Icon, {
      label: "Panel ".concat(panelType)
    });
  };
  var icon = getIcon();
  var renderIcon = function renderIcon() {
    if (icon) {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      return (0, _react2.jsx)("div", {
        className: _panel.PanelSharedCssClassName.icon
      }, icon);
    }
  };
  return (0, _react2.jsx)(PanelStyled
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: _panel.PanelSharedCssClassName.prefix,
    "data-panel-type": panelType,
    "data-panel-color": panelColor,
    "data-panel-icon": panelIcon,
    "data-panel-icon-id": panelIconId,
    "data-panel-icon-text": panelIconText,
    backgroundColor: panelColor,
    hasIcon: Boolean(icon)
  }, renderIcon(), (0, _react2.jsx)("div", {
    className: _panel.PanelSharedCssClassName.content
  }, children));
};
var _default = exports.default = Panel;