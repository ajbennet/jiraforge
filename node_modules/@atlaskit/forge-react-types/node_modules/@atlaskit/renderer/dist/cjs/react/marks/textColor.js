"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TextColor;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _adfSchema = require("@atlaskit/adf-schema");
var _editorPalette = require("@atlaskit/editor-palette");
var _tokens = require("@atlaskit/tokens");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function TextColor(props) {
  var _useThemeObserver = (0, _tokens.useThemeObserver)(),
    colorMode = _useThemeObserver.colorMode;
  // Note -- while there is no way to create custom colors using default tooling
  // the editor does supported ad hoc color values -- and there may be content
  // which has been migrated or created via apis which use such values.
  var paletteColorValue;

  /**
   * The Editor persists custom text colors when content has been migrated from the old editor, or created via
   * apis.
   *
   * This behaviour predates the introduction of dark mode.
   *
   * Without the inversion logic below, text with custom colors, can be hard to read when the user loads the page in dark mode.
   *
   * This introduces inversion of the presentation of the custom text colors when the user is in dark mode.
   *
   * This can be done without additional changes to account for users copying and pasting content inside the Editor, because of
   * how we detect text colors copied from external editor sources. Where we load the background color from a
   * seperate attribute (data-text-custom-color), instead of the inline style.
   *
   * See the following document for more details on this behaviour
   * https://hello.atlassian.net/wiki/spaces/CCECO/pages/2908658046/Unsupported+custom+text+colors+in+dark+theme+Editor+Job+Story
   */
  var tokenColor = (0, _editorPalette.hexToEditorTextPaletteColor)(props.color);
  if (tokenColor) {
    paletteColorValue = (0, _editorPalette.hexToEditorTextPaletteColor)(props.color) || props.color;
  } else {
    if (colorMode === 'dark') {
      // if we have a custom color, we need to check if we are in dark mode
      paletteColorValue = (0, _adfSchema.getDarkModeLCHColor)(props.color);
    } else {
      // if we are in light mode, we can just set the color
      paletteColorValue = props.color;
    }
  }
  var style = (0, _react.useMemo)(function () {
    return (0, _defineProperty2.default)({}, '--custom-palette-color', paletteColorValue);
  }, [paletteColorValue]);
  return /*#__PURE__*/_react.default.createElement("span", (0, _extends2.default)({}, props.dataAttributes, {
    "data-text-custom-color": props.color
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: "fabric-text-color-mark"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style
  }), props.children);
}