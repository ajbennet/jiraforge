"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorMediaClientProvider = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _mediaClientReact = require("@atlaskit/media-client-react");
var _providerFactory = require("@atlaskit/editor-common/provider-factory");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var EditorMediaClientProvider = exports.EditorMediaClientProvider = function EditorMediaClientProvider(_ref) {
  var children = _ref.children,
    ssr = _ref.ssr;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    mediaClientConfig = _useState2[0],
    setMediaClientConfig = _useState2[1];
  var mediaProvider = (0, _providerFactory.useProvider)('mediaProvider');

  /**
   * If a mediaClientConfig is provided then we will force
   * skip the mediaClient from context
   */
  var shouldSkipContext = Boolean((ssr === null || ssr === void 0 ? void 0 : ssr.config) || mediaProvider);
  var contextMediaClient = (0, _react.useContext)(_mediaClientReact.MediaClientContext);

  // MediaClientProvider currently requires a mediaClientConfig
  // And inserting the MediaClientProvider will cause a re-render
  // We should use MediaClientProvider once it no longer requires a config
  var mediaClient = (0, _react.useMemo)(function () {
    return mediaClientConfig ? (0, _mediaClientReact.getMediaClient)(mediaClientConfig) : undefined;
  }, [mediaClientConfig]);

  // Consumers can override the mediaClient for renderer,
  // by not providing both SSR config and mediaProvider,
  // and provide a top level mediaClient context
  // This is useful for testing and creating examples.
  (0, _react.useEffect)(function () {
    if (ssr !== null && ssr !== void 0 && ssr.config) {
      setMediaClientConfig(ssr.config);
    } else if (mediaProvider) {
      mediaProvider.then(function (provider) {
        setMediaClientConfig(provider.viewMediaClientConfig);
      });
    }
  }, [mediaProvider, ssr]);
  return /*#__PURE__*/_react.default.createElement(_mediaClientReact.MediaClientContext.Provider, {
    value: shouldSkipContext ? mediaClient : contextMediaClient
  }, children);
};