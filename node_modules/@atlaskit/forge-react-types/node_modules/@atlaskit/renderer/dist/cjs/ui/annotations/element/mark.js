"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkComponent = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _styles = require("@atlaskit/editor-common/styles");
var _adfSchema = require("@atlaskit/adf-schema");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _reactIntlNext = require("react-intl-next");
var _messages = require("../../../messages");
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- `AnnotationSharedCSSByState` is not object-safe
var markStyles = function markStyles() {
  return (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\tcolor: inherit;\n\tbackground-color: unset;\n\t-webkit-tap-highlight-color: transparent;\n\n\t&[data-mark-annotation-state='", "'] {\n\t\t", "\n\t\t", "\n\n\t\t&:focus,\n\t\t\t&[data-has-focus='true'] {\n\t\t\t", "\n\t\t}\n\t\t&[data-is-hovered='true']:not([data-has-focus='true']) {\n\t\t\t", "\n\t\t}\n\t}\n"])), _adfSchema.AnnotationMarkStates.ACTIVE, (0, _platformFeatureFlags.fg)('editor_inline_comments_on_inline_nodes') ? (0, _styles.AnnotationSharedCSSByState)().common : '', (0, _styles.AnnotationSharedCSSByState)().blur, (0, _styles.AnnotationSharedCSSByState)().focus, (0, _platformFeatureFlags.fg)('confluence-frontend-comments-panel') ? (0, _styles.AnnotationSharedCSSByState)().hover : '');
};
var isMobile = function isMobile() {
  // Ignored via go/ees005
  // eslint-disable-next-line require-unicode-regexp
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
};
var accessibilityStyles = function accessibilityStyles(startMarker, endMarker) {
  return (0, _react2.css)({
    '&::before, &::after': {
      clipPath: 'inset(100%)',
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: '1px',
      overflow: 'hidden',
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: '1px'
    },
    '&::before': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
      content: "' [".concat(startMarker, "] '")
    },
    '&::after': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
      content: "' [".concat(endMarker, "] '")
    }
  });
};
var MarkComponent = exports.MarkComponent = function MarkComponent(_ref) {
  var annotationParentIds = _ref.annotationParentIds,
    children = _ref.children,
    dataAttributes = _ref.dataAttributes,
    id = _ref.id,
    state = _ref.state,
    hasFocus = _ref.hasFocus,
    isHovered = _ref.isHovered,
    onClick = _ref.onClick,
    useBlockLevel = _ref.useBlockLevel;
  var intl = (0, _reactIntlNext.useIntl)();
  var annotationIds = (0, _react.useMemo)(function () {
    return (0, _toConsumableArray2.default)(new Set([].concat((0, _toConsumableArray2.default)(annotationParentIds), [id])));
  }, [id, annotationParentIds]);
  var onMarkClick = (0, _react.useCallback)(function (event) {
    // prevent inline mark logic for media block marks
    if (event.currentTarget instanceof HTMLElement && event.currentTarget.getAttribute('data-block-mark')) {
      return;
    }

    // prevents multiple callback on overlapping annotations
    if (event.defaultPrevented || state !== _adfSchema.AnnotationMarkStates.ACTIVE) {
      return;
    }
    if ((0, _platformFeatureFlags.fg)('editor_inline_comments_on_inline_nodes')) {
      // We only want to interfere with click events if the click is on some ui inside the renderer document
      // This is to prevent the click events from portaled content (such as link previews and mention profiles)
      if (event.target instanceof HTMLElement && event.target.closest('.ak-renderer-document')) {
        if (event.target.closest('[data-mention-id]')) {
          // don't prevent default for mentions
        } else {
          // prevents from opening link URL inside webView in Safari
          event.preventDefault();
          event.stopPropagation();
        }
      }
    } else {
      // prevents from opening link URL inside webView in Safari
      event.preventDefault();
    }

    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    onClick({
      eventTarget: event.target,
      annotationIds: annotationIds
    });
  }, [annotationIds, onClick, state]);
  var onMarkEnter = function onMarkEnter(evt) {
    var _document$activeEleme;
    var focusedElementTag = (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.tagName;
    if (focusedElementTag === 'MARK' && evt.key === 'Enter') {
      onMarkClick(evt);
    }
  };
  var overriddenData = !state ? dataAttributes : _objectSpread(_objectSpread({}, dataAttributes), {}, {
    'data-mark-annotation-state': state,
    'data-has-focus': hasFocus,
    'data-is-hovered': isHovered
  });
  var desktopAccessibilityAttributes = isMobile() ? {} : {
    role: 'button',
    tabIndex: 0,
    onKeyDown: onMarkEnter,
    'aria-expanded': hasFocus
  };
  var accessibility = state !== _adfSchema.AnnotationMarkStates.ACTIVE ? {
    'aria-disabled': true
  } : _objectSpread({
    'aria-details': annotationIds.join(', ')
  }, desktopAccessibilityAttributes);
  var getAccessibilityStyles = function getAccessibilityStyles() {
    if (isMobile()) {
      return {};
    }
    if (state !== _adfSchema.AnnotationMarkStates.RESOLVED) {
      var startMarker = intl.formatMessage(_messages.inlineCommentMessages.contentRendererInlineCommentMarkerStart);
      var endMarker = intl.formatMessage(_messages.inlineCommentMessages.contentRendererInlineCommentMarkerEnd);
      return accessibilityStyles(startMarker, endMarker);
    } else {
      return {};
    }
  };
  return (0, _react2.jsx)(useBlockLevel ? 'div' : 'mark', _objectSpread(_objectSpread(_objectSpread((0, _defineProperty2.default)({
    id: id
  }, (0, _platformFeatureFlags.fg)('editor_inline_comments_on_inline_nodes') ? 'onClickCapture' : 'onClick', onMarkClick), accessibility), overriddenData), !useBlockLevel && {
    css: [markStyles, getAccessibilityStyles()]
  }), children);
};