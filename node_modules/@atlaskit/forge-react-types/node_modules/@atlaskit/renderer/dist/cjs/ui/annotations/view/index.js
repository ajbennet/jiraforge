"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnnotationView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _context = require("../context");
var _useEvents = require("../hooks/use-events");
var _RendererActionsContext = require("../../../ui/RendererActionsContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var AnnotationView = exports.AnnotationView = function AnnotationView(props) {
  var providers = (0, _react.useContext)(_context.ProvidersContext);
  var actionContext = (0, _react.useContext)(_RendererActionsContext.RendererContext);
  var inlineCommentProvider = providers && providers.inlineComment;
  var updateSubscriber = inlineCommentProvider && inlineCommentProvider.updateSubscriber || null;
  var viewComponentProps = (0, _useEvents.useAnnotationClickEvent)({
    updateSubscriber: updateSubscriber,
    createAnalyticsEvent: props.createAnalyticsEvent,
    isNestedRender: props.isNestedRender
  });
  var ViewComponent = inlineCommentProvider && inlineCommentProvider.viewComponent;
  var deleteAnnotation = (0, _react.useMemo)(function () {
    return function (annotationInfo) {
      return actionContext.deleteAnnotation(annotationInfo.id, annotationInfo.type);
    };
  }, [actionContext]);

  // For view mode, the finding of inline node types is a bit more complex,
  // that's why we will not provide it as a `inlineNodeTypes` props to the view component,
  // to speed up the rendering process.
  var getInlineNodeTypes = (0, _react.useCallback)(function (annotationId) {
    return actionContext.getInlineNodeTypes(annotationId);
  }, [actionContext]);
  if (ViewComponent && viewComponentProps) {
    var annotations = viewComponentProps.annotations,
      clickElementTarget = viewComponentProps.clickElementTarget;
    return /*#__PURE__*/_react.default.createElement(ViewComponent, {
      annotations: annotations,
      clickElementTarget: clickElementTarget,
      deleteAnnotation: deleteAnnotation,
      getInlineNodeTypes: getInlineNodeTypes
    });
  }
  return null;
};