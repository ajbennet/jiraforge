"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnnotationsWrapper = exports.AnnotationsPositionContext = void 0;
var _react = _interopRequireDefault(require("react"));
var _adfSchema = require("@atlaskit/adf-schema");
var _view = require("./view");
var _wrapper = require("./wrapper");
var _context = require("./context");
var _useLoadAnnotations = require("./hooks/use-load-annotations");
var _useEvents = require("./hooks/use-events");
var _analyticsNext = require("@atlaskit/analytics-next");
var _AnnotationRangeContext = require("./contexts/AnnotationRangeContext");
var _AnnotationHoverContext = require("./contexts/AnnotationHoverContext");
var LoadAnnotations = /*#__PURE__*/_react.default.memo(function (_ref) {
  var adfDocument = _ref.adfDocument,
    isNestedRender = _ref.isNestedRender,
    onLoadComplete = _ref.onLoadComplete;
  (0, _useLoadAnnotations.useLoadAnnotations)({
    adfDocument: adfDocument,
    isNestedRender: isNestedRender,
    onLoadComplete: onLoadComplete
  });
  return null;
});

// This is used by renderers when setting the data-start-pos attribute on commentable nodes
// By default it is 1 (the possible starting position of any document).
// The bodied extension component then sets a new value for this context based on its on position
// in the document.
var AnnotationsPositionContext = exports.AnnotationsPositionContext = /*#__PURE__*/_react.default.createContext({
  startPos: 1
});
var AnnotationsWrapper = exports.AnnotationsWrapper = function AnnotationsWrapper(props) {
  var _annotationProvider$i, _annotationProvider$i2;
  var children = props.children,
    annotationProvider = props.annotationProvider,
    rendererRef = props.rendererRef,
    adfDocument = props.adfDocument,
    isNestedRender = props.isNestedRender,
    onLoadComplete = props.onLoadComplete;
  var updateSubscriber = annotationProvider && annotationProvider.inlineComment && annotationProvider.inlineComment.updateSubscriber;
  var inlineCommentAnnotationsState = (0, _useEvents.useAnnotationStateByTypeEvent)({
    type: _adfSchema.AnnotationTypes.INLINE_COMMENT,
    updateSubscriber: updateSubscriber || null
  });
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  return /*#__PURE__*/_react.default.createElement(_context.ProvidersContext.Provider, {
    value: annotationProvider
  }, /*#__PURE__*/_react.default.createElement(_context.InlineCommentsStateContext.Provider, {
    value: inlineCommentAnnotationsState
  }, /*#__PURE__*/_react.default.createElement(_AnnotationRangeContext.AnnotationRangeProvider, {
    allowCommentsOnMedia: (_annotationProvider$i = annotationProvider === null || annotationProvider === void 0 || (_annotationProvider$i2 = annotationProvider.inlineComment) === null || _annotationProvider$i2 === void 0 ? void 0 : _annotationProvider$i2.allowCommentsOnMedia) !== null && _annotationProvider$i !== void 0 ? _annotationProvider$i : false
  }, /*#__PURE__*/_react.default.createElement(_AnnotationHoverContext.AnnotationHoverContext, null, /*#__PURE__*/_react.default.createElement(_wrapper.AnnotationsContextWrapper, {
    createAnalyticsEvent: createAnalyticsEvent,
    rendererRef: rendererRef
  }, /*#__PURE__*/_react.default.createElement(LoadAnnotations, {
    adfDocument: adfDocument,
    isNestedRender: isNestedRender,
    onLoadComplete: onLoadComplete
  }), /*#__PURE__*/_react.default.createElement(_view.AnnotationView, {
    isNestedRender: isNestedRender,
    createAnalyticsEvent: createAnalyticsEvent
  }), children)))));
};