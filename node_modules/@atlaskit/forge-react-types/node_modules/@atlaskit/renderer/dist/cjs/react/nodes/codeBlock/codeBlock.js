"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _styles = require("@atlaskit/editor-common/styles");
var _code = require("@atlaskit/code");
var _messages = require("@atlaskit/editor-common/messages");
var _codeBlockContainer = _interopRequireDefault(require("./components/codeBlockContainer"));
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

function CodeBlock(props) {
  var text = props.text,
    language = props.language,
    _props$allowCopyToCli = props.allowCopyToClipboard,
    allowCopyToClipboard = _props$allowCopyToCli === void 0 ? false : _props$allowCopyToCli,
    _props$allowWrapCodeB = props.allowWrapCodeBlock,
    allowWrapCodeBlock = _props$allowWrapCodeB === void 0 ? false : _props$allowWrapCodeB,
    codeBidiWarningTooltipEnabled = props.codeBidiWarningTooltipEnabled;
  var codeBidiWarningLabel = props.intl.formatMessage(_messages.codeBidiWarningMessages.label);
  var className = [_styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER, props.className].join(' ');
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    wrapLongLines = _useState2[0],
    setWrapLongLines = _useState2[1];
  return (0, _react2.jsx)(_codeBlockContainer.default, {
    allowCopyToClipboard: allowCopyToClipboard,
    allowWrapCodeBlock: allowWrapCodeBlock
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    setWrapLongLines: setWrapLongLines,
    text: text,
    wrapLongLines: wrapLongLines
  }, (0, _react2.jsx)(_code.CodeBlock, {
    testId: "renderer-code-block",
    language: language,
    text: text,
    codeBidiWarningLabel: codeBidiWarningLabel,
    codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled,
    shouldWrapLongLines: allowWrapCodeBlock && wrapLongLines
  }));
}
var _default = exports.default = (0, _reactIntlNext.injectIntl)(CodeBlock);