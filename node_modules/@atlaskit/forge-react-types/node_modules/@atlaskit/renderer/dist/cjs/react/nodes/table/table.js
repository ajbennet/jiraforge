"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = void 0;
var _react = _interopRequireDefault(require("react"));
var _colgroup = require("./colgroup");
var _nodeWidth = require("@atlaskit/editor-common/node-width");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var Table = exports.Table = /*#__PURE__*/_react.default.memo(function (_ref) {
  var _tableNode$attrs;
  var innerRef = _ref.innerRef,
    isNumberColumnEnabled = _ref.isNumberColumnEnabled,
    columnWidths = _ref.columnWidths,
    layout = _ref.layout,
    renderWidth = _ref.renderWidth,
    children = _ref.children,
    tableNode = _ref.tableNode,
    rendererAppearance = _ref.rendererAppearance,
    isInsideOfBlockNode = _ref.isInsideOfBlockNode,
    isInsideOfTable = _ref.isInsideOfTable,
    isinsideMultiBodiedExtension = _ref.isinsideMultiBodiedExtension,
    allowTableResizing = _ref.allowTableResizing;
  var tableWidth = tableNode ? (0, _nodeWidth.getTableContainerWidth)(tableNode) : _editorSharedStyles.akEditorDefaultLayoutWidth;
  if (rendererAppearance === 'comment' && allowTableResizing && tableNode && !((_tableNode$attrs = tableNode.attrs) !== null && _tableNode$attrs !== void 0 && _tableNode$attrs.width)) {
    tableWidth = 'inherit';
  }
  if (rendererAppearance === 'comment' && !allowTableResizing) {
    tableWidth = renderWidth;
  }
  var tableLayout = tableNode === null || tableNode === void 0 ? void 0 : tableNode.attrs.layout;
  var tableDisplayMode = tableNode === null || tableNode === void 0 ? void 0 : tableNode.attrs.displayMode;
  return /*#__PURE__*/_react.default.createElement("table", {
    "data-testid": "renderer-table",
    "data-number-column": isNumberColumnEnabled,
    "data-table-width": tableWidth,
    "data-layout": tableLayout,
    "data-table-display-mode": tableDisplayMode,
    ref: innerRef
  }, /*#__PURE__*/_react.default.createElement(_colgroup.Colgroup, {
    columnWidths: columnWidths,
    layout: layout,
    isNumberColumnEnabled: isNumberColumnEnabled,
    renderWidth: renderWidth,
    tableNode: tableNode,
    rendererAppearance: rendererAppearance,
    isInsideOfBlockNode: isInsideOfBlockNode,
    isInsideOfTable: isInsideOfTable,
    isinsideMultiBodiedExtension: isinsideMultiBodiedExtension,
    allowTableResizing: allowTableResizing
  }), /*#__PURE__*/_react.default.createElement("tbody", null, children));
});