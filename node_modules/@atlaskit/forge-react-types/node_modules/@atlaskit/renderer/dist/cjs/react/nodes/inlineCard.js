"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@emotion/react");
var _smartCard = require("@atlaskit/smart-card");
var _ssr = require("@atlaskit/smart-card/ssr");
var _ui = require("@atlaskit/editor-common/ui");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _fallback = require("./fallback");
var _SmartCardStorage = require("../../ui/SmartCardStorage");
var _getCardClickHandler = require("../utils/getCardClickHandler");
var _analyticsNext = require("@atlaskit/analytics-next");
var _useInlineAnnotationProps = require("../../ui/annotations/element/useInlineAnnotationProps");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var InlineCard = function InlineCard(props) {
  var url = props.url,
    data = props.data,
    eventHandlers = props.eventHandlers,
    portal = props.portal,
    smartLinks = props.smartLinks;
  var onClick = (0, _getCardClickHandler.getCardClickHandler)(eventHandlers, url);
  var cardProps = {
    url: url,
    data: data,
    onClick: onClick,
    container: portal
  };
  var _ref = smartLinks || {},
    hideHoverPreview = _ref.hideHoverPreview,
    actionOptions = _ref.actionOptions,
    ssr = _ref.ssr;
  var analyticsData = {
    attributes: {
      location: 'renderer'
    },
    // Below is added for the future implementation of Linking Platform namespaced analytic context
    location: 'renderer'
  };
  var inlineAnnotationProps = (0, _useInlineAnnotationProps.useInlineAnnotationProps)(props);
  if (ssr && url) {
    if (
    // eslint-disable-next-line @atlaskit/platform/no-invalid-feature-flag-usage
    (0, _platformFeatureFlags.fg)('editor_inline_comments_on_inline_nodes')) {
      return (0, _react.jsx)("span", (0, _extends2.default)({
        "data-inline-card": true,
        "data-card-data": data ? JSON.stringify(data) : undefined,
        "data-card-url": url
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
      }, inlineAnnotationProps), (0, _react.jsx)(_analyticsNext.AnalyticsContext, {
        data: analyticsData
      }, (0, _react.jsx)(_ssr.CardSSR, {
        appearance: "inline",
        url: url,
        showHoverPreview: !hideHoverPreview,
        actionOptions: actionOptions,
        onClick: onClick
      })));
    }
    return (0, _react.jsx)(_analyticsNext.AnalyticsContext, {
      data: analyticsData
    }, (0, _react.jsx)(_ssr.CardSSR, {
      appearance: "inline",
      url: url,
      showHoverPreview: !hideHoverPreview,
      actionOptions: actionOptions,
      onClick: onClick
    }));
  }
  var onError = function onError(_ref2) {
    var err = _ref2.err;
    if (err) {
      throw err;
    }
  };
  return (0, _react.jsx)(_analyticsNext.AnalyticsContext, {
    data: analyticsData
  }, (0, _react.jsx)("span", (0, _extends2.default)({
    "data-inline-card": true,
    "data-card-data": data ? JSON.stringify(data) : undefined,
    "data-card-url": url
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, inlineAnnotationProps), (0, _react.jsx)(_fallback.CardErrorBoundary, (0, _extends2.default)({
    unsupportedComponent: _ui.UnsupportedInline
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps), (0, _react.jsx)(_smartCard.Card, (0, _extends2.default)({
    appearance: "inline",
    showHoverPreview: !hideHoverPreview,
    actionOptions: actionOptions
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, cardProps, {
    onResolve: function onResolve(data) {
      if (!data.url || !data.title) {
        return;
      }
      props.smartCardStorage.set(data.url, data.title);
    },
    onError: onError
  })))));
};
var _default = exports.default = (0, _SmartCardStorage.withSmartCardStorage)(InlineCard);