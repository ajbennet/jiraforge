"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLightWeightCodeBlockStylesForRootRendererStyleSheet = exports.default = exports.LightWeightCodeBlockCssClassName = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _styles = require("@atlaskit/editor-common/styles");
var _useBidiWarnings2 = require("../../../hooks/use-bidi-warnings");
var _consts = require("../../../../consts");
var _templateObject, _templateObject2;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var lightWeightCodeBlockStyles = (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\t.", " {\n\t\tcursor: text;\n\t}\n"])), _styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER);
var LightWeightCodeBlockCssClassName = exports.LightWeightCodeBlockCssClassName = {
  CONTAINER: 'light-weight-code-block'
};
var getLightWeightCodeBlockStylesForRootRendererStyleSheet = exports.getLightWeightCodeBlockStylesForRootRendererStyleSheet = function getLightWeightCodeBlockStylesForRootRendererStyleSheet() {
  // We overwrite the rule that clears margin-top for first nested codeblocks, as
  // our lightweight codeblock dom structure will always nest the codeblock inside
  // an extra container div which would constantly be targeted. Now, top-level
  // lightweight codeblock containers will not be targeted.
  // NOTE: This must be added after other .code-block styles in the root
  // Renderer stylesheet.
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return (0, _react2.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n\t\t.", "\n\t\t\t> .", "\n\t\t\t.", " {\n\t\t\tmargin-top: ", ";\n\t\t}\n\t"])), _consts.RendererCssClassName.DOCUMENT, LightWeightCodeBlockCssClassName.CONTAINER, _styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER, _editorSharedStyles.blockNodesVerticalMargin);
};
var LightWeightCodeBlock = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var text = _ref.text,
    _ref$codeBidiWarningT = _ref.codeBidiWarningTooltipEnabled,
    codeBidiWarningTooltipEnabled = _ref$codeBidiWarningT === void 0 ? true : _ref$codeBidiWarningT,
    className = _ref.className;
  var textRows = (0, _react.useMemo)(function () {
    return (text !== null && text !== void 0 ? text : '').split('\n');
  }, [text]);
  var _useBidiWarnings = (0, _useBidiWarnings2.useBidiWarnings)({
      enableWarningTooltip: codeBidiWarningTooltipEnabled
    }),
    renderBidiWarnings = _useBidiWarnings.renderBidiWarnings;
  var classNames = [LightWeightCodeBlockCssClassName.CONTAINER, className].join(' ');
  return (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: classNames,
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ,
    css: [(0, _styles.codeBlockSharedStyles)(), lightWeightCodeBlockStyles]
  }, (0, _react2.jsx)("div", {
    className: _styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTAINER
  }, (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: _styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTENT_WRAPPER
  }, (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: _styles.CodeBlockSharedCssClassName.CODEBLOCK_LINE_NUMBER_GUTTER
  }, textRows.map(function (_, index) {
    return (
      // Ignored via go/ees005
      // eslint-disable-next-line react/no-array-index-key
      (0, _react2.jsx)("span", {
        key: index
      })
    );
  })), (0, _react2.jsx)("div", {
    className: _styles.CodeBlockSharedCssClassName.CODEBLOCK_CONTENT
  }, (0, _react2.jsx)("code", null, renderBidiWarnings(text))))));
});
var _default = exports.default = LightWeightCodeBlock;