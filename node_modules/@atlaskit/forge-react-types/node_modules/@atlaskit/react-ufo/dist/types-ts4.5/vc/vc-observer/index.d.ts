import { type UnbindFn } from 'bind-event-listener';
import type { ComponentsLogType, VCAbortReason, VCAbortReasonType, VCEntryType, VCIgnoreReason, VCRatioType, VCRawDataType, VCResult } from '../../common/vc/types';
import { MultiRevisionHeatmap } from './heatmap/heatmap';
import { Observers, type SelectorConfig } from './observers';
type GetVCResultType = {
    start: number;
    stop: number;
    tti: number;
    prefix?: string;
    ssr?: number;
    vc?: VCRawDataType | null;
};
export type VCObserverOptions = {
    heatmapSize?: number | undefined;
    oldDomUpdates?: boolean | undefined;
    devToolsEnabled?: boolean | undefined;
    selectorConfig?: SelectorConfig | undefined;
    isPostInteraction?: boolean;
};
export declare class VCObserver {
    abortReason: VCAbortReasonType;
    outOfBoundaryInfo: string;
    /** config * */
    static VCParts: readonly [
        "25",
        "50",
        "75",
        "80",
        "85",
        "90",
        "95",
        "98",
        "99"
    ];
    viewport: {
        w: number;
        h: number;
    };
    arraySize: number;
    heatmap: number[][];
    heatmapNext: number[][];
    multiHeatmap: MultiRevisionHeatmap | null;
    componentsLog: ComponentsLogType;
    vcRatios: VCRatioType;
    active: boolean;
    totalTime: number;
    startTime: number;
    observers: Observers;
    private _startMeasureTimestamp;
    ssr: {
        reactRendered: number;
    };
    devToolsEnabled: boolean;
    oldDomUpdatesEnabled: boolean;
    unbind: UnbindFn[];
    isPostInteraction?: boolean;
    constructor(options: VCObserverOptions);
    start({ startTime }: {
        startTime: number;
    }): void;
    stop(): void;
    getAbortReasonInfo: () => string | null;
    getVCRawData: () => VCRawDataType | null;
    getIgnoredElements(componentsLog: ComponentsLogType): {
        targetName: string;
        ignoreReason: VCIgnoreReason | undefined;
    }[];
    getVCResult: ({ start, stop, tti, prefix, ssr, vc }: GetVCResultType) => VCResult;
    static calculateVC({ heatmap, ssr, componentsLog, viewport, }: {
        heatmap: number[][];
        ssr?: number;
        componentsLog: ComponentsLogType;
        viewport: {
            w: number;
            h: number;
        };
    }): {
        VC: {
            [key: string]: number | null;
        };
        VCBox: {
            [key: string]: string[] | null;
        };
        VCEntries: {
            abs: number[][];
            rel: VCEntryType[];
            speedIndex: number;
        };
        totalPainted: number;
    };
    setSSRElement(element: HTMLElement): void;
    setReactRootRenderStart(startTime?: number): void;
    setReactRootRenderStop(stopTime?: number): void;
    private handleUpdate;
    private legacyHandleUpdate;
    private onViewportChangeDetected;
    abortObservation(abortReason?: VCAbortReason): void;
    private setAbortReason;
    private resetState;
    private getCleanHeatmap;
    private setViewportSize;
    private mapPixelsToHeatmap;
    private getElementRatio;
    private applyChangesToHeatMap;
    static makeVCReturnObj<T>(): {
        [key: string]: T | null;
    };
    private abortReasonCallback;
    private attachAbortListeners;
    private detachAbortListeners;
    private measureStart;
    private measureStop;
}
export {};
