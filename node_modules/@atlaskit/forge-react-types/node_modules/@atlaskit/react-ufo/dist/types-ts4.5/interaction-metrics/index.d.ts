import type { AbortReasonType, ApdexType, BM3Event, CustomData, CustomTiming, InteractionError, InteractionMetrics, InteractionType, LifecycleMarkType, LoadProfilerEventInfo, Mark, MarkType, PostInteractionLogOutput, ReactProfilerTiming, RequestInfo, Span, SpanType } from '../common';
import { type TraceIdContext } from '../experience-trace-id-context';
import { type FeatureFlagValue } from '../feature-flags-accessed';
import type { LabelStack } from '../interaction-context';
import PostInteractionLog from './post-interaction-log';
export type { InteractionMetrics, LifecycleMarkType, Span, Mark, MarkType, InteractionType, AbortReasonType, ReactProfilerTiming, RequestInfo, ApdexType, CustomData, CustomTiming, InteractionError, };
export declare const postInteractionLog: PostInteractionLog;
export declare function getActiveInteraction(): InteractionMetrics | undefined;
export declare function remove(interactionId: string): void;
export declare function updatePageLoadInteractionName(ufoName: string, routeName?: string | null | undefined): void;
export declare function addMetadata(interactionId: string, data: Record<string, unknown>): void;
export declare function addCustomData(interactionId: string, labelStack: LabelStack, data: CustomData): void;
export declare function addCustomTiming(interactionId: string, labelStack: LabelStack, data: CustomTiming): void;
export declare function addMark(interactionId: string, type: MarkType, name: string, labelStack: LabelStack | null, time?: number): void;
export declare function addMarkToAll(type: MarkType, name: string, labelStack: LabelStack | null, time?: number): void;
export declare function addSpan(interactionId: string, type: SpanType, name: string, labelStack: LabelStack | null, start: number, end?: number, size?: number): void;
export declare function addSpanToAll(type: SpanType, name: string, labelStack: LabelStack | null, start: number, end?: number, size?: number): void;
export declare function addPreload(moduleId: string, timestamp: number): void;
export declare function addLoad(identifier: string, start: number, end: number): void;
export declare function extractModuleName(input: string): string;
export declare function addHold(interactionId: string, labelStack: LabelStack, name: string, experimental: boolean): () => void;
export declare function addHoldByID(interactionId: string, labelStack: LabelStack, name: string, id: string, ignoreOnSubmit?: boolean): () => void;
export declare function removeHoldByID(interactionId: string, id: string): void;
export declare function getCurrentInteractionType(interactionId: string): InteractionType | null;
export declare const ModuleLoadingProfiler: {
    onPreload(moduleId: string, _priority?: number): void;
    onLoadStart(info: LoadProfilerEventInfo): void;
    onLoadComplete(info: LoadProfilerEventInfo): void;
    placeholderFallBackMounted(id: string, moduleId: string): void;
    placeholderFallBackUnmounted(id: string): void;
};
export declare function addError(interactionId: string, name: string, labelStack: LabelStack | null, errorType: string, errorMessage: string, errorStack?: string, forcedError?: boolean): void;
export declare function addErrorToAll(name: string, labelStack: LabelStack | null, errorType: string, errorMessage: string, errorStack?: string): void;
export declare const addProfilerTimings: (interactionId: string, labelStack: LabelStack, type: 'mount' | 'update' | 'nested-update', actualDuration: number, baseDuration: number, startTime: number, commitTime: number) => void;
export declare const sinkInteractionHandler: (sinkFn: (id: string, data: InteractionMetrics) => void) => void;
export declare const sinkPostInteractionLogHandler: (sinkFn: (output: PostInteractionLogOutput) => void | Promise<void>) => void;
export declare function tryComplete(interactionId: string, endTime?: number): void;
export declare function abort(interactionId: string, abortReason: AbortReasonType): void;
export declare function abortByNewInteraction(interactionId: string, interactionName: string): void;
export declare function abortAll(abortReason: AbortReasonType, abortedByInteractionName?: string): void;
export declare function addOnCancelCallback(id: string, cancelCallback: () => void): void;
export declare function addNewInteraction(interactionId: string, ufoName: string, type: InteractionType, startTime: number, rate: number, labelStack: LabelStack | null, routeName?: string | null, trace?: TraceIdContext | null): void;
export declare function addBrowserMetricEvent(event: BM3Event): void;
export declare function addApdexToAll(apdex: ApdexType): void;
export declare function addApdex(interactionId: string, apdexInfo: {
    key: string;
    stopTime: number;
    startTime?: number;
    labelStack?: LabelStack;
}): void;
export declare function addRequestInfo(interactionId: string, labelStack: LabelStack, requestInfo: RequestInfo): void;
export declare function addSegment(labelStack: LabelStack): void;
export declare function removeSegment(labelStack: LabelStack): void;
export declare function addRedirect(interactionId: string, fromUfoName: string, nextUfoName: string, nextRouteName: string, time: number): void;
declare global {
    interface Window {
        __REACT_UFO_ENABLE_PERF_TRACING?: boolean;
        __UFO_COMPACT_PAYLOAD__?: boolean;
        __CRITERION__?: {
            addFeatureFlagAccessed?: (flagName: string, flagValue: FeatureFlagValue) => void;
            addUFOHold?: (id: string, name: string, labelStack: string, startTime: number) => void;
            removeUFOHold?: (id: string) => void;
            getFeatureFlagOverride?: (flagName: string) => boolean | undefined;
            getExperimentValueOverride?: <T>(experimentName: string, parameterName: string) => T;
        };
    }
}
export declare const interactionSpans: Span[];
export declare function addCustomSpans(name: string, start: number, end?: number, size?: number, labelStack?: LabelStack): void;
