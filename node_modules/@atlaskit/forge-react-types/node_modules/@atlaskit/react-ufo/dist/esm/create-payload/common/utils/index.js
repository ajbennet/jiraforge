import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @typescript-eslint/no-non-null-asserted-optional-chain */
import { REACT_UFO_VERSION } from '../../../common/constants';
export var sanitizeUfoName = function sanitizeUfoName(name) {
  return name.replace(/_/g, '-');
};
export function isSegmentLabel(obj) {
  return obj && typeof obj.name === 'string' && typeof obj.segmentId === 'string';
}
export function buildSegmentTree(labelStacks) {
  var r = {
    n: 'segment-tree-root',
    c: {}
  };
  labelStacks.forEach(function (labelStack) {
    var currentNode = r;
    labelStack.forEach(function (label) {
      var name = label.name;
      var id = isSegmentLabel(label) ? label.segmentId : undefined;
      var key = id !== undefined ? id : name;
      if (!currentNode.c) {
        currentNode.c = {};
      }
      if (!currentNode.c[key]) {
        currentNode.c[key] = {
          n: name
        };
      }
      currentNode = currentNode.c[key];
    });
  });
  return {
    r: r
  };
}
export function stringifyLabelStackFully(labelStack) {
  return labelStack.map(function (l) {
    if (isSegmentLabel(l)) {
      return "".concat(l.name, ":").concat(l.segmentId);
    }
    return l.name;
  }).join('/');
}
function getLabelStackReference(labelStack) {
  return labelStack.map(function (l) {
    return isSegmentLabel(l) ? l.segmentId : l.name;
  }).join('/');
}
export function labelStackStartWith(labelStack, startWith) {
  return stringifyLabelStackFully(labelStack).startsWith(stringifyLabelStackFully(startWith));
}
export function optimizeLabelStack(labelStack) {
  return REACT_UFO_VERSION === '2.0.0' ? getLabelStackReference(labelStack) : labelStack.map(function (ls) {
    return _objectSpread({
      n: ls.name
    }, ls.segmentId ? {
      s: ls.segmentId
    } : {});
  });
}