import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { calculateTransferType, DISK_KEY, MEMORY_KEY, NETWORK_KEY, round } from './utils';
export var CHRSummary = /*#__PURE__*/function () {
  function CHRSummary() {
    _classCallCheck(this, CHRSummary);
    _defineProperty(this, "bundles", _defineProperty(_defineProperty(_defineProperty({}, MEMORY_KEY, 0), DISK_KEY, 0), NETWORK_KEY, 0));
    _defineProperty(this, "bundlesCount", 0);
    _defineProperty(this, "size", _defineProperty(_defineProperty(_defineProperty({}, MEMORY_KEY, 0), DISK_KEY, 0), NETWORK_KEY, 0));
    _defineProperty(this, "sizeTotal", 0);
  }
  return _createClass(CHRSummary, [{
    key: "add",
    value: function add(asset) {
      var size = 'size' in asset ? asset.size : undefined;
      var encodedSize = 'encodedSize' in asset ? Number(asset.encodedSize) : 0;
      var type = calculateTransferType(asset.type, asset.duration, size);
      if (type === null) {
        return;
      }
      this.bundles[type] += 1;
      this.bundlesCount += 1;
      this.size[type] += encodedSize;
      this.sizeTotal += encodedSize;
    }
  }], [{
    key: "makePayload",
    value: function makePayload(summary) {
      var size = summary.size,
        bundlesCount = summary.bundlesCount,
        sizeTotal = summary.sizeTotal;
      var cachedSize = size[MEMORY_KEY] + size[DISK_KEY];
      var sizeRatio = round(cachedSize / summary.sizeTotal);
      return {
        size: sizeTotal,
        chr: sizeRatio,
        count: bundlesCount
      };
    }
  }]);
}();
export var CHRReporter = /*#__PURE__*/function () {
  function CHRReporter() {
    _classCallCheck(this, CHRReporter);
    _defineProperty(this, "all", new CHRSummary());
    _defineProperty(this, "allAtlassian", new CHRSummary());
    _defineProperty(this, "preloaded", new CHRSummary());
  }
  return _createClass(CHRReporter, [{
    key: "get",
    value: function get(resourceTimings, assetsClassification) {
      var _this = this;
      try {
        Object.entries(resourceTimings).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            label = _ref2[0],
            entry = _ref2[1];
          if (assetsClassification.all) {
            _this.all.add(entry);
          }
          if (assetsClassification.allAtlassian({
            label: label,
            entry: entry
          })) {
            _this.allAtlassian.add(entry);
          }
          if (assetsClassification.preloaded({
            label: label,
            entry: entry
          })) {
            _this.preloaded.add(entry);
          }
        });
        if (this.all.bundlesCount === 0) {
          return null;
        }
        return {
          all: CHRSummary.makePayload(this.all),
          allAtlassian: CHRSummary.makePayload(this.allAtlassian),
          preloaded: CHRSummary.makePayload(this.preloaded)
        };
      } catch (error) {
        return null;
      }
    }
  }]);
}();