import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
export var ViewportUpdateClassifier = /*#__PURE__*/function () {
  function ViewportUpdateClassifier() {
    _classCallCheck(this, ViewportUpdateClassifier);
    _defineProperty(this, "types", []);
    _defineProperty(this, "filters", []);
    _defineProperty(this, "removedFilters", []);
    _defineProperty(this, "__combinedTypes", []);
    _defineProperty(this, "__combinedFilters", []);
  }
  return _createClass(ViewportUpdateClassifier, [{
    key: "VCCalculationMethod",
    value: function VCCalculationMethod(_) {
      return {
        VC: {},
        VCBox: {}
      };
    }
  }, {
    key: "mergeConfig",
    value: function mergeConfig() {
      var _this = this;
      this.__combinedTypes = [].concat(_toConsumableArray(this.types), _toConsumableArray((this === null || this === void 0 ? void 0 : this.__combinedTypes) || []));
      var previousFilters = this.removedFilters.length === 0 ? this.__combinedFilters : this.__combinedFilters.filter(function (filter) {
        return !_this.removedFilters.includes(filter.name);
      });
      this.__combinedFilters = [].concat(_toConsumableArray(this.filters), _toConsumableArray(previousFilters));
    }
  }, {
    key: "classifyUpdate",
    value: function classifyUpdate(_ref) {
      var element = _ref.element,
        type = _ref.type,
        tags = _ref.tags,
        ignoreReason = _ref.ignoreReason;
      if (!this.__combinedTypes.includes(type)) {
        return false;
      }
      return this.__combinedFilters.every(function (_ref2) {
        var filter = _ref2.filter,
          name = _ref2.name;
        return filter({
          type: type,
          tags: tags,
          ignoreReason: ignoreReason
        });
      });
    }
  }]);
}();