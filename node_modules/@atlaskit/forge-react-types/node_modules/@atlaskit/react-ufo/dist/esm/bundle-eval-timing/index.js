import { roundEpsilon } from '../round-number';
var config = null;
export function configure(bundleEvalTimingConfiguration) {
  config = bundleEvalTimingConfiguration;
}
var getPerformanceObject = function getPerformanceObject() {
  var _window;
  return ((_window = window) !== null && _window !== void 0 ? _window : {}).performance;
};
export function getBundleEvalTimings(interactionStartTime) {
  if (config == null) {
    return {};
  }
  var started = {};
  var timings = {};
  var cachedConfig = config;
  var performance = getPerformanceObject();
  performance === null || performance === void 0 || performance.getEntriesByType('mark').forEach(function (mark) {
    var result = cachedConfig.mapPerformanceMark(mark.name);
    if (!result) {
      return;
    }
    var type = result.type,
      name = result.name;
    if (type === 'start' && mark.startTime >= interactionStartTime) {
      started[name] = mark;
      return;
    }
    if (type === 'end' && started[name]) {
      timings[name] = {
        startTime: roundEpsilon(started[name].startTime - interactionStartTime),
        duration: roundEpsilon(mark.startTime - started[name].startTime)
      };
      delete started[name];
    }
  });
  if (Object.keys(timings).length === 0) {
    return {};
  }
  return timings;
}