"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExperimentalMetricsPayload = createExperimentalMetricsPayload;
exports.createPayloads = createPayloads;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _bowserUltralight = _interopRequireDefault(require("bowser-ultralight"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _additionalPayload = require("../additional-payload");
var _assets = require("../assets");
var bundleEvalTiming = _interopRequireWildcard(require("../bundle-eval-timing"));
var _coinflip = _interopRequireDefault(require("../coinflip"));
var _constants = require("../common/constants");
var _config = require("../config");
var _createExperimentalInteractionMetricsPayload = require("../create-experimental-interaction-metrics-payload");
var _customTimings = require("../custom-timings");
var _globalErrorHandler = require("../global-error-handler");
var _hiddenTiming = require("../hidden-timing");
var initialPageLoadExtraTiming = _interopRequireWildcard(require("../initial-page-load-extra-timing"));
var _interactionMetrics = require("../interaction-metrics");
var resourceTiming = _interopRequireWildcard(require("../resource-timing"));
var _roundNumber = require("../round-number");
var ssr = _interopRequireWildcard(require("../ssr"));
var _vc = require("../vc");
var _utils = require("./common/utils");
var _excluded = ["labelStack", "time"],
  _excluded2 = ["stopTime", "labelStack"],
  _excluded3 = ["labelStack"],
  _excluded4 = ["labelStack"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getUfoNameOverride(interaction) {
  var ufoName = interaction.ufoName,
    apdex = interaction.apdex;
  try {
    var ufoNameOverrides = (0, _config.getUfoNameOverrides)();
    if (ufoNameOverrides != null) {
      var metricKey = apdex.length > 0 ? apdex[0].key : '';
      if (ufoNameOverrides[ufoName][metricKey]) {
        return ufoNameOverrides[ufoName][metricKey];
      }
    }
    return ufoName;
  } catch (e) {
    return ufoName;
  }
}
function getEarliestLegacyStopTime(interaction, labelStack) {
  var earliestLegacyStopTime = null;
  interaction.apdex.forEach(function (a) {
    var _a$labelStack, _earliestLegacyStopTi;
    if (!(a !== null && a !== void 0 && a.stopTime)) {
      return;
    }
    if (!(0, _utils.labelStackStartWith)((_a$labelStack = a.labelStack) !== null && _a$labelStack !== void 0 ? _a$labelStack : [], labelStack)) {
      return;
    }
    if (a.stopTime > interaction.start && ((_earliestLegacyStopTi = earliestLegacyStopTime) !== null && _earliestLegacyStopTi !== void 0 ? _earliestLegacyStopTi : a.stopTime) >= a.stopTime) {
      earliestLegacyStopTime = a.stopTime;
    }
  });
  return earliestLegacyStopTime;
}
function getBm3EndTimeOrFallbackValue(interaction) {
  var _getEarliestLegacySto;
  var labelStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var fallbackValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : interaction.end;
  if (interaction.type === 'press') {
    return fallbackValue;
  }
  return (_getEarliestLegacySto = getEarliestLegacyStopTime(interaction, labelStack)) !== null && _getEarliestLegacySto !== void 0 ? _getEarliestLegacySto : fallbackValue;
}
var getPageVisibilityUpToTTI = function getPageVisibilityUpToTTI(interaction) {
  var start = interaction.start;
  var bm3EndTimeOrInteractionEndTime = getBm3EndTimeOrFallbackValue(interaction);
  return (0, _hiddenTiming.getPageVisibilityState)(start, bm3EndTimeOrInteractionEndTime);
};
var getPageVisibilityUpToTTAI = function getPageVisibilityUpToTTAI(interaction) {
  var start = interaction.start,
    end = interaction.end;
  return (0, _hiddenTiming.getPageVisibilityState)(start, end);
};
var getVisibilityStateFromPerformance = function getVisibilityStateFromPerformance(stop) {
  try {
    var results = performance.getEntriesByType('visibility-state');
    if (!results || results.length === 0) {
      return null;
    }
    return results.reduce(function () {
      var acc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var _ref = arguments.length > 1 ? arguments[1] : undefined,
        name = _ref.name,
        startTime = _ref.startTime;
      if (startTime > stop) {
        return acc;
      }
      if (acc === null && name === null) {
        return null;
      }
      if (acc === null) {
        return name;
      }
      if (acc !== name) {
        return 'mixed';
      }
      return acc;
    }, null);
  } catch (e) {
    return null;
  }
};
var getMoreAccuratePageVisibilityUpToTTI = function getMoreAccuratePageVisibilityUpToTTI(interaction) {
  var old = getPageVisibilityUpToTTI(interaction);
  var tti = getEarliestLegacyStopTime(interaction, []);
  if (!tti) {
    return old;
  }
  var buffered = getVisibilityStateFromPerformance(tti);
  if (!buffered) {
    return old;
  }
  if (buffered !== old) {
    return 'mixed';
  }
  return old;
};
var getMoreAccuratePageVisibilityUpToTTAI = function getMoreAccuratePageVisibilityUpToTTAI(interaction) {
  var old = getPageVisibilityUpToTTAI(interaction);
  var buffered = getVisibilityStateFromPerformance(interaction.end);
  if (!buffered) {
    return old;
  }
  if (buffered !== old) {
    return 'mixed';
  }
  return old;
};
var getInteractionStatus = function getInteractionStatus(interaction) {
  var originalInteractionStatus = interaction.abortReason ? 'ABORTED' : 'SUCCEEDED';
  var hasBm3TTI = interaction.apdex.length > 0;
  var overrideStatus = hasBm3TTI ? 'SUCCEEDED' : originalInteractionStatus;
  return {
    originalInteractionStatus: originalInteractionStatus,
    overrideStatus: overrideStatus
  };
};
var getResourceTimings = function getResourceTimings(start, end) {
  var _resourceTiming$getRe;
  return (_resourceTiming$getRe = resourceTiming.getResourceTimings(start, end)) !== null && _resourceTiming$getRe !== void 0 ? _resourceTiming$getRe : undefined;
};
var getBundleEvalTimings = function getBundleEvalTimings(start) {
  return bundleEvalTiming.getBundleEvalTimings(start);
};
var getSSRSuccess = function getSSRSuccess(type) {
  return type === 'page_load' ? ssr.getSSRSuccess() : undefined;
};
var getSSRFeatureFlags = function getSSRFeatureFlags(type) {
  return type === 'page_load' ? ssr.getSSRFeatureFlags() : undefined;
};
var getPaintMetrics = function getPaintMetrics(type) {
  if (type !== 'page_load') {
    return {};
  }
  var metrics = {};
  performance.getEntriesByType('paint').forEach(function (entry) {
    if (entry.name === 'first-paint') {
      metrics['metric:fp'] = Math.round(entry.startTime);
    }
    if (entry.name === 'first-contentful-paint') {
      metrics['metric:fcp'] = Math.round(entry.startTime);
    }
  });
  return metrics;
};
var getTTAI = function getTTAI(interaction) {
  var start = interaction.start,
    end = interaction.end;
  var pageVisibilityUpToTTAI = getPageVisibilityUpToTTAI(interaction);
  return !interaction.abortReason && pageVisibilityUpToTTAI === 'visible' ? Math.round(end - start) : undefined;
};
var getVCMetrics = function getVCMetrics(interaction) {
  var _config$vc, _config$vc$ssrWhiteli, _interaction$apdex, _config$experimentalI;
  var config = (0, _config.getConfig)();
  if (!(config !== null && config !== void 0 && (_config$vc = config.vc) !== null && _config$vc !== void 0 && _config$vc.enabled)) {
    return {};
  }
  if (interaction.type !== 'page_load' && interaction.type !== 'transition') {
    return {};
  }
  var isSSREnabled = (config === null || config === void 0 ? void 0 : config.ssr) || (config === null || config === void 0 || (_config$vc$ssrWhiteli = config.vc.ssrWhitelist) === null || _config$vc$ssrWhiteli === void 0 ? void 0 : _config$vc$ssrWhiteli.includes(interaction.ufoName));
  var ssr = interaction.type === 'page_load' && isSSREnabled ? {
    ssr: getSSRDoneTimeValue(config)
  } : null;
  _interactionMetrics.postInteractionLog.setVCObserverSSRConfig(ssr);
  var tti = (_interaction$apdex = interaction.apdex) === null || _interaction$apdex === void 0 || (_interaction$apdex = _interaction$apdex[0]) === null || _interaction$apdex === void 0 ? void 0 : _interaction$apdex.stopTime;
  var prefix = 'ufo';
  var result = (0, _vc.getVCObserver)().getVCResult(_objectSpread({
    start: interaction.start,
    stop: interaction.end,
    tti: tti,
    prefix: prefix,
    vc: interaction.vc
  }, ssr));
  if ((_config$experimentalI = config.experimentalInteractionMetrics) !== null && _config$experimentalI !== void 0 && _config$experimentalI.enabled) {
    (0, _vc.getVCObserver)().stop();
  }
  _interactionMetrics.postInteractionLog.setLastInteractionFinishVCResult(result);
  var VC = result === null || result === void 0 ? void 0 : result['metrics:vc'];
  if (!VC || !(result !== null && result !== void 0 && result["".concat(prefix, ":vc:clean")])) {
    return result;
  }
  var interactionStatus = getInteractionStatus(interaction);
  var pageVisibilityUpToTTAI = getPageVisibilityUpToTTAI(interaction);
  if (interactionStatus.originalInteractionStatus !== 'SUCCEEDED' || pageVisibilityUpToTTAI !== 'visible') {
    return result;
  }
  if ((0, _platformFeatureFlags.fg)('ufo_vc_multiheatmap')) {
    var _result;
    (_result = result["".concat(prefix, ":vc:rev")]) === null || _result === void 0 || _result.forEach(function (element) {
      var _element$vcDetails;
      if ((_element$vcDetails = element.vcDetails) !== null && _element$vcDetails !== void 0 && (_element$vcDetails = _element$vcDetails['90']) !== null && _element$vcDetails !== void 0 && _element$vcDetails.t) {
        var _element$vcDetails$;
        element['metric:vc90'] = (_element$vcDetails$ = element.vcDetails['90']) === null || _element$vcDetails$ === void 0 ? void 0 : _element$vcDetails$.t;
      }
    });
  }
  return _objectSpread(_objectSpread({}, result), {}, {
    'metric:vc90': VC['90']
  });
};
var getNavigationMetrics = function getNavigationMetrics(type) {
  if (type !== 'page_load') {
    return {};
  }
  var entries = performance.getEntriesByType('navigation');
  if (entries.length === 0) {
    return {};
  }
  var navigation = entries[0];
  var metrics = {
    // From https://www.w3.org/TR/resource-timing/
    redirectStart: Math.round(navigation.redirectStart),
    redirectEnd: Math.round(navigation.redirectEnd),
    fetchStart: Math.round(navigation.fetchStart),
    domainLookupStart: Math.round(navigation.domainLookupStart),
    domainLookupEnd: Math.round(navigation.domainLookupEnd),
    connectStart: Math.round(navigation.connectStart),
    connectEnd: Math.round(navigation.connectEnd),
    secureConnectionStart: Math.round(navigation.secureConnectionStart),
    requestStart: Math.round(navigation.requestStart),
    responseStart: Math.round(navigation.responseStart),
    responseEnd: Math.round(navigation.responseEnd),
    encodedBodySize: Math.round(navigation.encodedBodySize),
    decodedBodySize: Math.round(navigation.decodedBodySize),
    transferSize: Math.round(navigation.transferSize),
    // From https://www.w3.org/TR/navigation-timing-2/
    redirectCount: navigation.redirectCount,
    type: navigation.type,
    unloadEventEnd: Math.round(navigation.unloadEventEnd),
    unloadEventStart: Math.round(navigation.unloadEventStart),
    workerStart: Math.round(navigation.workerStart),
    nextHopProtocol: navigation.nextHopProtocol

    // The following properties are ignored because they provided limited value on a modern stack (e.g. the content
    // is usually rendered and interactive before the dom is fully parsed, dont't play well with streamed content...)
    //   * domComplete
    //   * domContentLoadedEventEnd
    //   * domContentLoadedEventStart
    //   * domInteractive
    //   * loadEventEnd
    //   * loadEventStart
  };
  return {
    'metrics:navigation': metrics
  };
};
var getPPSMetrics = function getPPSMetrics(interaction) {
  var _interaction$apdex2;
  var start = interaction.start,
    end = interaction.end;
  var config = (0, _config.getConfig)();
  var interactionStatus = getInteractionStatus(interaction);
  var pageVisibilityUpToTTAI = getPageVisibilityUpToTTAI(interaction);
  var tti = (_interaction$apdex2 = interaction.apdex) === null || _interaction$apdex2 === void 0 || (_interaction$apdex2 = _interaction$apdex2[0]) === null || _interaction$apdex2 === void 0 ? void 0 : _interaction$apdex2.stopTime;
  var ttai = interactionStatus.originalInteractionStatus === 'SUCCEEDED' && pageVisibilityUpToTTAI === 'visible' ? Math.round(end - start) : undefined;
  var PPSMetricsAtTTI = tti !== undefined ? (0, _additionalPayload.getLighthouseMetrics)({
    start: start,
    stop: tti
  }) : null;
  var PPSMetricsAtTTAI = ttai !== undefined ? (0, _additionalPayload.getLighthouseMetrics)({
    start: start,
    stop: interaction.end
  }) : null;
  if (config !== null && config !== void 0 && config.shouldCalculateLighthouseMetricsFromTTAI && PPSMetricsAtTTAI !== null) {
    return PPSMetricsAtTTAI;
  }
  if (PPSMetricsAtTTI !== null) {
    return _objectSpread(_objectSpread({}, PPSMetricsAtTTI), {}, {
      'metrics@ttai': PPSMetricsAtTTAI
    });
  }
  return {};
};
function getSSRProperties(type) {
  return {
    'ssr:success': getSSRSuccess(type),
    'ssr:featureFlags': getSSRFeatureFlags(type)
  };
}
var getAssetsMetrics = function getAssetsMetrics(interaction, resourceTimings) {
  try {
    var config = (0, _config.getConfig)();
    var type = interaction.type;
    var isCHREnabled = (0, _platformFeatureFlags.fg)('ufo_chr_config');
    var allowedTypes = ['page_load', 'transition'];
    var assetsClassification = config === null || config === void 0 ? void 0 : config.assetsClassification;
    if (!isCHREnabled || !allowedTypes.includes(type) || !assetsClassification) {
      // Skip if: FG disabled, not allowed type or assetsClassification isn't configured
      return {};
    }
    var reporter = new _assets.CHRReporter();
    var assets = reporter.get(resourceTimings, assetsClassification);
    if (assets) {
      // Only add assets in case it exists
      return {
        'event:assets': assets
      };
    }
    return {};
  } catch (error) {
    // Skip CHR in case of error
    return {};
  }
};
var getBrowserMetadata = function getBrowserMetadata() {
  var data = {};
  var now = new Date();
  data['event:localHour'] = now.getHours(); // returns the hours for this date according to local time
  data['event:localDayOfWeek'] = now.getDay(); // Sunday - Saturday : 0 - 6
  data['event:localTimezoneOffset'] = now.getTimezoneOffset(); // A number representing the difference, in minutes, between the date as evaluated in the UTC time zone and as evaluated in the local time zone.

  if (navigator.userAgent != null) {
    var browser = _bowserUltralight.default.getParser(navigator.userAgent);
    data['event:browser:name'] = browser.getBrowserName();
    data['event:browser:version'] = browser.getBrowserVersion();
  }
  if (navigator.hardwareConcurrency != null) {
    data['event:cpus'] = navigator.hardwareConcurrency;
  }
  if (navigator.deviceMemory != null) {
    data['event:memory'] = navigator.deviceMemory;
  }

  // eslint-disable-next-line compat/compat
  if (navigator.connection != null) {
    data['event:network:effectiveType'] = navigator.connection.effectiveType;
    data['event:network:rtt'] = navigator.connection.rtt;
    data['event:network:downlink'] = navigator.connection.downlink;
  }
  return data;
};
var getTracingContextData = function getTracingContextData(interaction) {
  var trace = interaction.trace,
    start = interaction.start;
  var tracingContextData = {};
  if (trace) {
    tracingContextData = {
      'ufo:tracingContext': {
        'X-B3-TraceId': trace.traceId,
        'X-B3-SpanId': trace.spanId,
        // eslint-disable-next-line compat/compat
        browserTimeOrigin: +(performance.timeOrigin + start).toFixed(2)
      }
    };
  }
  return tracingContextData;
};
function optimizeCustomData(interaction) {
  var customData = interaction.customData,
    legacyMetrics = interaction.legacyMetrics;
  var customDataMap = customData.reduce(function (result, _ref2) {
    var _result$get$data, _result$get;
    var labelStack = _ref2.labelStack,
      data = _ref2.data;
    var label = (0, _utils.stringifyLabelStackFully)(labelStack);
    var value = (_result$get$data = (_result$get = result.get(label)) === null || _result$get === void 0 ? void 0 : _result$get.data) !== null && _result$get$data !== void 0 ? _result$get$data : {};
    result.set(label, {
      labelStack: (0, _utils.optimizeLabelStack)(labelStack),
      data: Object.assign(value, data)
    });
    return result;
  }, new Map());
  if (legacyMetrics) {
    var legacyMetricsFiltered = legacyMetrics.filter(function (item) {
      return item.type === 'PAGE_LOAD';
    }).reduce(function (result, currentValue) {
      for (var _i = 0, _Object$entries = Object.entries(currentValue.custom || {}); _i < _Object$entries.length; _i++) {
        var _result$get$data2, _result$get2;
        var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
          _key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        var label = (0, _utils.stringifyLabelStackFully)([]);
        var labelValue = (_result$get$data2 = (_result$get2 = result.get(label)) === null || _result$get2 === void 0 ? void 0 : _result$get2.data) !== null && _result$get$data2 !== void 0 ? _result$get$data2 : {};
        result.set(label, {
          labelStack: (0, _utils.optimizeLabelStack)([]),
          data: Object.assign(labelValue, (0, _defineProperty2.default)({}, _key, value))
        });
      }
      return result;
    }, new Map());
    return [].concat((0, _toConsumableArray2.default)(customDataMap.values()), (0, _toConsumableArray2.default)(legacyMetricsFiltered.values()));
  }
  return (0, _toConsumableArray2.default)(customDataMap.values());
}
function optimizeReactProfilerTimings(reactProfilerTimings, interactionStart) {
  var reactProfilerTimingsMap = reactProfilerTimings.reduce(function (result, _ref3) {
    var labelStack = _ref3.labelStack,
      startTime = _ref3.startTime,
      commitTime = _ref3.commitTime,
      actualDuration = _ref3.actualDuration,
      type = _ref3.type;
    if (labelStack && startTime >= interactionStart) {
      var label = (0, _utils.stringifyLabelStackFully)(labelStack);
      var start = Math.round(startTime);
      var end = Math.round(commitTime);
      var timing = result.get(label) || {
        labelStack: (0, _utils.optimizeLabelStack)(labelStack),
        startTime: start,
        endTime: end,
        mountCount: 0,
        rerenderCount: 0,
        renderDuration: 0
      };
      if (start < timing.startTime) {
        timing.startTime = start;
      }
      if (end > timing.endTime) {
        timing.endTime = end;
      }
      if (type === 'mount') {
        timing.mountCount += 1;
      }
      if (type === 'update') {
        timing.rerenderCount += 1;
      }
      timing.renderDuration += Math.round(actualDuration);
      result.set(label, timing);
    }
    return result;
  }, new Map());
  return (0, _toConsumableArray2.default)(reactProfilerTimingsMap.values());
}
function optimizeRedirects(redirects, interactionStart) {
  var lastRedirectTime = interactionStart;
  var updatedRedirects = redirects.sort(function (a, b) {
    return a.time - b.time;
  }).reduce(function (result, redirect) {
    var fromInteractionName = redirect.fromInteractionName,
      time = redirect.time;
    if (lastRedirectTime >= interactionStart) {
      result.push({
        labelStack: [{
          n: fromInteractionName
        }],
        startTime: Math.round(lastRedirectTime),
        endTime: Math.round(time)
      });
    }
    lastRedirectTime = time;
    return result;
  }, []);
  return updatedRedirects;
}
function optimizeHoldInfo(holdInfo, interactionStart) {
  var holdInfoMap = holdInfo.reduce(function (result, hold) {
    var labelStack = hold.labelStack,
      name = hold.name,
      start = hold.start,
      end = hold.end,
      ignoreOnSubmit = hold.ignoreOnSubmit;
    if (labelStack && !ignoreOnSubmit && start >= interactionStart) {
      var label = (0, _utils.stringifyLabelStackFully)([].concat((0, _toConsumableArray2.default)(labelStack), [{
        name: name
      }]));
      var startTime = Math.round(start);
      var endTime = Math.round(end);
      var timing = result.get(label) || {
        labelStack: (0, _utils.optimizeLabelStack)([].concat((0, _toConsumableArray2.default)(labelStack), [{
          name: name
        }])),
        startTime: startTime,
        endTime: endTime
      };
      if (startTime < timing.startTime) {
        timing.startTime = startTime;
      }
      if (endTime > timing.endTime) {
        timing.endTime = endTime;
      }
      result.set(label, timing);
    }
    return result;
  }, new Map());
  return (0, _toConsumableArray2.default)(holdInfoMap.values());
}
function optimizeSpans(spans, interactionStart) {
  var updatedSpans = spans.reduce(function (result, span) {
    var labelStack = span.labelStack,
      type = span.type,
      name = span.name,
      start = span.start,
      end = span.end;
    if (labelStack && start >= interactionStart) {
      result.push({
        labelStack: (0, _utils.optimizeLabelStack)([].concat((0, _toConsumableArray2.default)(labelStack), [{
          name: name
        }])),
        startTime: Math.round(start),
        endTime: Math.round(end),
        type: type
      });
    }
    return result;
  }, []);
  return updatedSpans;
}
function optimizeRequestInfo(requestInfo, interactionStart) {
  var updatedRequestInfo = requestInfo.reduce(function (result, reqInfo) {
    var labelStack = reqInfo.labelStack,
      name = reqInfo.name,
      start = reqInfo.start,
      end = reqInfo.end,
      networkStart = reqInfo.networkStart,
      networkComplete = reqInfo.networkComplete;
    var startTime = networkStart !== null && networkStart !== void 0 ? networkStart : start;
    var endTime = networkComplete !== null && networkComplete !== void 0 ? networkComplete : end;
    if (labelStack && start >= interactionStart && endTime) {
      result.push({
        labelStack: (0, _utils.optimizeLabelStack)([].concat((0, _toConsumableArray2.default)(labelStack), [{
          name: name
        }])),
        startTime: Math.round(startTime),
        endTime: Math.round(endTime)
      });
    }
    return result;
  }, []);
  return updatedRequestInfo;
}
function optimizeCustomTimings(customTimings, interactionStart) {
  return customTimings.reduce(function (result, item) {
    Object.keys(item.data).forEach(function (key) {
      if (item.data[key].startTime >= interactionStart) {
        result.push({
          labelStack: [{
            n: key
          }],
          startTime: Math.round(item.data[key].startTime),
          endTime: Math.round(item.data[key].endTime)
        });
      }
    });
    return result;
  }, []);
}
function optimizeMarks(marks) {
  return marks.map(function (_ref4) {
    var labelStack = _ref4.labelStack,
      time = _ref4.time,
      others = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
    return _objectSpread(_objectSpread({}, others), {}, {
      labelStack: labelStack && (0, _utils.optimizeLabelStack)(labelStack),
      time: Math.round(time)
    });
  });
}
function optimizeApdex(apdex) {
  return apdex.map(function (_ref5) {
    var stopTime = _ref5.stopTime,
      labelStack = _ref5.labelStack,
      others = (0, _objectWithoutProperties2.default)(_ref5, _excluded2);
    return _objectSpread(_objectSpread({}, others), {}, {
      stopTime: Math.round(stopTime)
    }, labelStack ? {
      labelStack: (0, _utils.optimizeLabelStack)(labelStack)
    } : {});
  });
}
function objectToArray() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.keys(obj).reduce(function (result, key) {
    result.push({
      label: key,
      data: obj[key]
    });
    return result;
  }, []);
}
function getBM3SubmetricsTimings(submetrics) {
  if (!submetrics) {
    return null;
  }
  var submetricsTimings = submetrics.filter(function (item) {
    return typeof item.stop === 'number' && !!item.key && typeof item.start === 'number';
  }).map(function (item) {
    var childSubmetrics;
    var newKey = "include/".concat(item.key);
    if (item.submetrics) {
      childSubmetrics = getBM3SubmetricsTimings(item.submetrics);
    }
    return _objectSpread((0, _defineProperty2.default)({}, newKey, {
      endTime: item.stop - item.start,
      startTime: item.start
    }), childSubmetrics ? childSubmetrics : {});
  });
  return submetricsTimings;
}
function getBm3TrackerTimings(interaction) {
  var interactionLegacyMetrics = interaction.legacyMetrics;
  if (!interactionLegacyMetrics) {
    return {};
  }
  var legacyMetrics = interactionLegacyMetrics.map(function (item) {
    var _item$config, _item$config2, _item$marks;
    return {
      key: item.key,
      startTime: item.start,
      stopTime: item.stop,
      type: (_item$config = item.config) === null || _item$config === void 0 ? void 0 : _item$config.type,
      reactUFOName: (_item$config2 = item.config) === null || _item$config2 === void 0 ? void 0 : _item$config2.reactUFOName,
      fmp: ((_item$marks = item.marks) === null || _item$marks === void 0 ? void 0 : _item$marks['fmp']) || item.stop,
      source: 'bm3',
      timings: (0, _customTimings.getBm3Timings)(item.marks, item.config.timings),
      submetrics: getBM3SubmetricsTimings(item.submetrics),
      pageVisibleState: item.pageVisibleState
    };
  }).filter(function (item) {
    return !!item.type;
  });
  return {
    legacyMetrics: legacyMetrics
  };
}
function getSSRDoneTimeValue(config) {
  var _config$ssr, _config$ssr2;
  return config !== null && config !== void 0 && (_config$ssr = config.ssr) !== null && _config$ssr !== void 0 && _config$ssr.getSSRDoneTime ? config === null || config === void 0 || (_config$ssr2 = config.ssr) === null || _config$ssr2 === void 0 ? void 0 : _config$ssr2.getSSRDoneTime() : ssr.getSSRDoneTime();
}
function getPayloadSize(payload) {
  return Math.round(new TextEncoder().encode(JSON.stringify(payload)).length / 1024);
}
function getStylesheetMetrics() {
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  if (!(0, _platformFeatureFlags.fg)('ufo_capture_stylesheet_metrics')) {
    return {};
  }
  try {
    var stylesheets = Array.from(document.styleSheets);
    var stylesheetCount = stylesheets.length;
    var cssrules = Array.from(document.styleSheets).reduce(function (acc, item) {
      // Other domain stylesheets throw a SecurityError
      try {
        return acc + item.cssRules.length;
      } catch (e) {
        return acc;
      }
    }, 0);
    var styleElements = document.querySelectorAll('style').length;
    var styleProps = document.querySelectorAll('[style]');
    var styleDeclarations = Array.from(document.querySelectorAll('[style]')).reduce(function (acc, item) {
      try {
        if ('style' in item) {
          return acc + item.style.length;
        } else {
          return acc;
        }
      } catch (e) {
        return acc;
      }
    }, 0);
    return {
      'ufo:stylesheets': stylesheetCount,
      'ufo:styleElements': styleElements,
      'ufo:styleProps': styleProps.length,
      'ufo:styleDeclarations': styleDeclarations,
      'ufo:cssrules': cssrules
    };
  } catch (e) {
    return {};
  }
}
var regularTTAI;
var expTTAI;
function getErrorCounts(interaction) {
  return {
    'ufo:errors:globalCount': (0, _globalErrorHandler.getGlobalErrorCount)(),
    'ufo:errors:count': interaction.errors.length
  };
}
function createInteractionMetricsPayload(interaction, interactionId, experimental) {
  var _window$location, _config$additionalPay;
  var interactionPayloadStart = performance.now();
  var config = (0, _config.getConfig)();
  if (!config) {
    throw Error('UFO Configuration not provided');
  }
  var end = interaction.end,
    start = interaction.start,
    ufoName = interaction.ufoName,
    knownSegments = interaction.knownSegments,
    rate = interaction.rate,
    type = interaction.type,
    abortReason = interaction.abortReason,
    routeName = interaction.routeName,
    featureFlags = interaction.featureFlags,
    previousInteractionName = interaction.previousInteractionName,
    isPreviousInteractionAborted = interaction.isPreviousInteractionAborted,
    abortedByInteractionName = interaction.abortedByInteractionName;
  var pageVisibilityAtTTI = getPageVisibilityUpToTTI(interaction);
  var pageVisibilityAtTTAI = getPageVisibilityUpToTTAI(interaction);
  var segments = config.killswitchNestedSegments ? [] : knownSegments;
  var segmentTree = _constants.REACT_UFO_VERSION === '2.0.0' ? (0, _utils.buildSegmentTree)(segments.map(function (segment) {
    return segment.labelStack;
  })) : {};
  var isDetailedPayload = pageVisibilityAtTTAI === 'visible';
  var isPageLoad = type === 'page_load';
  var calculatePageVisibilityFromTheStartOfPageLoad = config.enableBetterPageVisibilityApi && isPageLoad;
  var moreAccuratePageVisibilityAtTTI = calculatePageVisibilityFromTheStartOfPageLoad ? getMoreAccuratePageVisibilityUpToTTI(interaction) : null;
  var moreAccuratePageVisibilityAtTTAI = calculatePageVisibilityFromTheStartOfPageLoad ? getMoreAccuratePageVisibilityUpToTTAI(interaction) : null;
  var labelStack = interaction.labelStack ? {
    labelStack: (0, _utils.optimizeLabelStack)(interaction.labelStack)
  } : {};
  // Page Load
  var getPageLoadInteractionMetrics = function getPageLoadInteractionMetrics() {
    var _config$ssr3;
    if (!isPageLoad) {
      return {};
    }
    var config = (0, _config.getConfig)();
    var SSRDoneTimeValue = getSSRDoneTimeValue(config);
    var SSRDoneTime = SSRDoneTimeValue !== undefined ? {
      SSRDoneTime: Math.round(SSRDoneTimeValue)
    } : {};
    return _objectSpread(_objectSpread({}, SSRDoneTime), {}, {
      isBM3ConfigSSRDoneAsFmp: interaction.metaData.__legacy__bm3ConfigSSRDoneAsFmp,
      isUFOConfigSSRDoneAsFmp: interaction.metaData.__legacy__bm3ConfigSSRDoneAsFmp || !!(config !== null && config !== void 0 && (_config$ssr3 = config.ssr) !== null && _config$ssr3 !== void 0 && _config$ssr3.getSSRDoneTime)
    });
  };
  // Detailed payload. Page visibility = visible
  var getDetailedInteractionMetrics = function getDetailedInteractionMetrics(resourceTimings) {
    if (experimental || window.__UFO_COMPACT_PAYLOAD__ || !isDetailedPayload) {
      return {};
    }
    var spans = [].concat((0, _toConsumableArray2.default)(interaction.spans), (0, _toConsumableArray2.default)(_interactionMetrics.interactionSpans));
    _interactionMetrics.interactionSpans.length = 0;
    return {
      errors: interaction.errors.map(function (_ref6) {
        var labelStack = _ref6.labelStack,
          others = (0, _objectWithoutProperties2.default)(_ref6, _excluded3);
        return _objectSpread(_objectSpread({}, others), {}, {
          labelStack: labelStack && (0, _utils.optimizeLabelStack)(labelStack)
        });
      }),
      holdActive: (0, _toConsumableArray2.default)(interaction.holdActive.values()),
      redirects: optimizeRedirects(interaction.redirects, start),
      holdInfo: optimizeHoldInfo(experimental ? interaction.holdExpInfo : interaction.holdInfo, start),
      spans: optimizeSpans(spans, start),
      requestInfo: optimizeRequestInfo(interaction.requestInfo, start),
      customTimings: optimizeCustomTimings(interaction.customTimings, start),
      bundleEvalTimings: objectToArray(getBundleEvalTimings(start)),
      resourceTimings: objectToArray(resourceTimings)
    };
  };
  // Page load & detailed payload
  var getPageLoadDetailedInteractionMetrics = function getPageLoadDetailedInteractionMetrics() {
    var _config$ssr4;
    if (!isPageLoad || !isDetailedPayload) {
      return {};
    }
    var config = (0, _config.getConfig)();
    return {
      initialPageLoadExtraTimings: objectToArray(initialPageLoadExtraTiming.getTimings()),
      SSRTimings: config !== null && config !== void 0 && (_config$ssr4 = config.ssr) !== null && _config$ssr4 !== void 0 && _config$ssr4.getSSRTimings ? config.ssr.getSSRTimings() : objectToArray(ssr.getSSRTimings())
    };
  };
  if (experimental) {
    expTTAI = getTTAI(interaction);
  } else {
    regularTTAI = getTTAI(interaction);
  }
  var newUFOName = (0, _utils.sanitizeUfoName)(ufoName);
  var resourceTimings = getResourceTimings(start, end);
  var payload = {
    actionSubject: 'experience',
    action: 'measured',
    eventType: 'operational',
    source: 'measured',
    tags: ['observability'],
    attributes: {
      properties: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
        // basic
        'event:hostname': ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || 'unknown',
        'event:product': config.product,
        'event:schema': '1.0.0',
        'event:sizeInKb': 0,
        'event:source': {
          name: 'react-ufo/web',
          version: _constants.REACT_UFO_VERSION,
          payloadSource: 'platform'
        },
        'event:region': config.region || 'unknown',
        'experience:key': experimental ? 'custom.experimental-interaction-metrics' : 'custom.interaction-metrics',
        'experience:name': newUFOName
      }, getBrowserMetadata()), getSSRProperties(type)), getAssetsMetrics(interaction, resourceTimings)), getPPSMetrics(interaction)), getPaintMetrics(type)), getNavigationMetrics(type)), getVCMetrics(interaction)), experimental ? (0, _createExperimentalInteractionMetricsPayload.getExperimentalVCMetrics)(interaction) : undefined), (_config$additionalPay = config.additionalPayloadData) === null || _config$additionalPay === void 0 ? void 0 : _config$additionalPay.call(config, interaction)), getTracingContextData(interaction)), getStylesheetMetrics()), getErrorCounts(interaction)), {}, {
        interactionMetrics: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
          namePrefix: config.namePrefix || '',
          segmentPrefix: config.segmentPrefix || '',
          interactionId: interactionId,
          pageVisibilityAtTTI: pageVisibilityAtTTI,
          pageVisibilityAtTTAI: pageVisibilityAtTTAI,
          experimental__pageVisibilityAtTTI: moreAccuratePageVisibilityAtTTI,
          experimental__pageVisibilityAtTTAI: moreAccuratePageVisibilityAtTTAI,
          // raw interaction metrics
          rate: rate,
          routeName: routeName,
          type: type,
          abortReason: abortReason,
          featureFlags: featureFlags,
          previousInteractionName: previousInteractionName,
          isPreviousInteractionAborted: isPreviousInteractionAborted,
          abortedByInteractionName: abortedByInteractionName,
          // performance
          apdex: optimizeApdex(interaction.apdex),
          end: Math.round(end),
          start: Math.round(start),
          segments: _constants.REACT_UFO_VERSION === '2.0.0' ? segmentTree : segments.map(function (_ref7) {
            var labelStack = _ref7.labelStack,
              others = (0, _objectWithoutProperties2.default)(_ref7, _excluded4);
            return _objectSpread(_objectSpread({}, others), {}, {
              labelStack: (0, _utils.optimizeLabelStack)(labelStack)
            });
          }),
          marks: optimizeMarks(interaction.marks),
          customData: optimizeCustomData(interaction),
          reactProfilerTimings: optimizeReactProfilerTimings(interaction.reactProfilerTimings, start)
        }, labelStack), getPageLoadInteractionMetrics()), getDetailedInteractionMetrics(resourceTimings)), getPageLoadDetailedInteractionMetrics()), getBm3TrackerTimings(interaction)), {}, {
          'metric:ttai': experimental ? regularTTAI || expTTAI : undefined,
          'metric:experimental:ttai': expTTAI
        }),
        'ufo:payloadTime': (0, _roundNumber.roundEpsilon)(performance.now() - interactionPayloadStart)
      })
    }
  };
  if (experimental) {
    regularTTAI = undefined;
    expTTAI = undefined;
  }
  payload.attributes.properties['event:sizeInKb'] = getPayloadSize(payload.attributes.properties);
  return payload;
}
function createPayloads(interactionId, interaction) {
  var ufoNameOverride = getUfoNameOverride(interaction);
  var modifiedInteraction = _objectSpread(_objectSpread({}, interaction), {}, {
    ufoName: ufoNameOverride
  });
  var interactionMetricsPayload = createInteractionMetricsPayload(modifiedInteraction, interactionId);
  return [interactionMetricsPayload];
}
function createExperimentalMetricsPayload(interactionId, interaction) {
  var config = (0, _config.getConfig)();
  if (!config) {
    throw Error('UFO Configuration not provided');
  }
  var ufoName = (0, _utils.sanitizeUfoName)(interaction.ufoName);
  var rate = (0, _config.getExperimentalInteractionRate)(ufoName, interaction.type);
  if (!(0, _coinflip.default)(rate)) {
    return null;
  }
  var pageVisibilityState = (0, _hiddenTiming.getPageVisibilityState)(interaction.start, interaction.end);
  if (pageVisibilityState !== 'visible') {
    return null;
  }
  return createInteractionMetricsPayload(interaction, interactionId, true);
}