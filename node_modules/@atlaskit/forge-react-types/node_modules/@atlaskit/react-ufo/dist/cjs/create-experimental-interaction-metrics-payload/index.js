"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExperimentalVCMetrics = exports.experimentalVC = exports.ExperimentalVCMetrics = void 0;
exports.installInteractionSink = installInteractionSink;
exports.onExperimentalInteractionComplete = onExperimentalInteractionComplete;
exports.sinkExperimentalHandler = sinkExperimentalHandler;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _hiddenTiming = require("../hidden-timing");
var _vcObserver = require("../vc/vc-observer");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var interactionBuffer = [];
var bufferInteractionData = function bufferInteractionData(interactionId, data) {
  interactionBuffer.push({
    interactionId: interactionId,
    data: data
  });
};
function clearInteractionBuffer() {
  interactionBuffer.length = 0;
}
function appendInteractionData(interactionId, data) {
  bufferInteractionData(interactionId, data);
}
function installInteractionSink(handler) {
  var _iterator = _createForOfIteratorHelper(interactionBuffer),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
        _interactionId = _step$value.interactionId,
        data = _step$value.data;
      handler(_interactionId, data);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  clearInteractionBuffer();
  bufferInteractionData = handler;
}
function sinkExperimentalHandler(sinkFn) {
  installInteractionSink(sinkFn);
}
function onExperimentalInteractionComplete(interactionId, data) {
  var endTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : performance.now();
  if (data.ufoName) {
    data.end = endTime;
    appendInteractionData(interactionId, data);
    clearInteractionBuffer();
  }
}
var ExperimentalVCMetrics = exports.ExperimentalVCMetrics = /*#__PURE__*/function () {
  function ExperimentalVCMetrics() {
    (0, _classCallCheck2.default)(this, ExperimentalVCMetrics);
    (0, _defineProperty2.default)(this, "vcObserver", null);
  }
  return (0, _createClass2.default)(ExperimentalVCMetrics, [{
    key: "initialize",
    value: function initialize(options) {
      if (this.vcObserver === null) {
        this.vcObserver = new _vcObserver.VCObserver(_objectSpread(_objectSpread({}, options), {}, {
          isPostInteraction: true
        }));
      }
      return this;
    }
  }, {
    key: "start",
    value: function start(_ref) {
      var _this$vcObserver;
      var startTime = _ref.startTime;
      (_this$vcObserver = this.vcObserver) === null || _this$vcObserver === void 0 || _this$vcObserver.start({
        startTime: startTime
      });
    }
  }]);
}();
var experimentalVC = exports.experimentalVC = new ExperimentalVCMetrics();
var getExperimentalVCMetrics = exports.getExperimentalVCMetrics = function getExperimentalVCMetrics(interaction) {
  if (experimentalVC.vcObserver) {
    var _interaction$apdex;
    var prefix = 'ufo-experimental';
    var result = experimentalVC.vcObserver.getVCResult({
      start: interaction.start,
      stop: interaction.end,
      tti: (_interaction$apdex = interaction.apdex) === null || _interaction$apdex === void 0 || (_interaction$apdex = _interaction$apdex[0]) === null || _interaction$apdex === void 0 ? void 0 : _interaction$apdex.stopTime,
      prefix: prefix,
      vc: interaction.vc
    });
    var VC = result === null || result === void 0 ? void 0 : result['metrics:vc'];
    if (!VC || !(result !== null && result !== void 0 && result["".concat(prefix, ":vc:clean")])) {
      return result;
    }
    var pageVisibilityUpToTTAI = (0, _hiddenTiming.getPageVisibilityState)(interaction.start, interaction.end);
    if (interaction.abortReason || pageVisibilityUpToTTAI !== 'visible') {
      return result;
    }
    return _objectSpread(_objectSpread({}, result), {}, {
      'metric:experimental:vc90': VC['90']
    });
  }
  return null;
};