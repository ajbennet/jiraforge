"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _scheduler = require("scheduler");
var _additionalPayload = require("../additional-payload");
var _config = require("../config");
var _createExperimentalInteractionMetricsPayload = require("../create-experimental-interaction-metrics-payload");
var _hiddenTiming = require("../hidden-timing");
var _interactionMetrics = require("../interaction-metrics");
var _vc = require("../vc");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != (0, _typeof2.default)(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var initialized = false;
function sinkInteraction(instance, payloadPackage) {
  (0, _interactionMetrics.sinkInteractionHandler)(function (interactionId, interaction) {
    (0, _scheduler.unstable_scheduleCallback)(_scheduler.unstable_IdlePriority, function () {
      var payloads = payloadPackage.createPayloads(interactionId, interaction);
      var devToolObserver = globalThis.__ufo_devtool_onUfoPayload;
      payloads === null || payloads === void 0 || payloads.forEach(function (payload) {
        if (typeof devToolObserver === 'function') {
          devToolObserver === null || devToolObserver === void 0 || devToolObserver(payload);
        }
        instance.sendOperationalEvent(payload);
      });
    });
  });
}
function sinkExperimentalInteractionMetrics(instance, payloadPackage) {
  (0, _createExperimentalInteractionMetricsPayload.sinkExperimentalHandler)(function (interactionId, interaction) {
    (0, _scheduler.unstable_scheduleCallback)(_scheduler.unstable_IdlePriority, function () {
      var payload = payloadPackage.createExperimentalMetricsPayload(interactionId, interaction);
      if (payload) {
        instance.sendOperationalEvent(payload);
      }
    });
  });
}
function sinkPostInteractionLog(instance, createPostInteractionLogPayload) {
  (0, _interactionMetrics.sinkPostInteractionLogHandler)(function (logOutput) {
    (0, _scheduler.unstable_scheduleCallback)(_scheduler.unstable_IdlePriority, function () {
      var payload = createPostInteractionLogPayload(logOutput);
      if (payload) {
        instance.sendOperationalEvent(payload);
      }
    });
  });
}
var init = exports.init = function init(analyticsWebClientAsync, config) {
  var _config$vc;
  if (initialized) {
    return;
  }
  (0, _config.setUFOConfig)(config);
  if ((_config$vc = config.vc) !== null && _config$vc !== void 0 && _config$vc.enabled) {
    var _config$experimentalI;
    var vcOptions = {
      heatmapSize: config.vc.heatmapSize,
      oldDomUpdates: config.vc.oldDomUpdates,
      devToolsEnabled: config.vc.devToolsEnabled,
      selectorConfig: config.vc.selectorConfig
    };
    (0, _vc.getVCObserver)(vcOptions).start({
      startTime: 0
    });
    _interactionMetrics.postInteractionLog.initializeVCObserver(vcOptions);
    _interactionMetrics.postInteractionLog.startVCObserver({
      startTime: 0
    });
    if (config !== null && config !== void 0 && (_config$experimentalI = config.experimentalInteractionMetrics) !== null && _config$experimentalI !== void 0 && _config$experimentalI.enabled) {
      _createExperimentalInteractionMetricsPayload.experimentalVC.initialize(vcOptions).start({
        startTime: 0
      });
    }
  }
  (0, _hiddenTiming.setupHiddenTimingCapture)();
  (0, _additionalPayload.startLighthouseObserver)();
  initialized = true;
  Promise.all([analyticsWebClientAsync, Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "create-payloads" */'../create-payload'));
  }), Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "create-post-interaction-log-payload" */'../create-post-interaction-log-payload'));
  })]).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 3),
      awc = _ref2[0],
      payloadPackage = _ref2[1],
      createPostInteractionLogPayloadPackage = _ref2[2];
    if (awc.getAnalyticsWebClientPromise) {
      awc.getAnalyticsWebClientPromise().then(function (client) {
        var _config$experimentalI2, _config$postInteracti;
        var instance = client.getInstance();
        sinkInteraction(instance, payloadPackage);
        if (config !== null && config !== void 0 && (_config$experimentalI2 = config.experimentalInteractionMetrics) !== null && _config$experimentalI2 !== void 0 && _config$experimentalI2.enabled) {
          sinkExperimentalInteractionMetrics(instance, payloadPackage);
        }
        if ((_config$postInteracti = config.postInteractionLog) !== null && _config$postInteracti !== void 0 && _config$postInteracti.enabled) {
          sinkPostInteractionLog(instance, createPostInteractionLogPayloadPackage.default);
        }
      });
    } else if (awc.sendOperationalEvent) {
      var _config$experimentalI3, _config$postInteracti2;
      sinkInteraction(awc, payloadPackage);
      if (config !== null && config !== void 0 && (_config$experimentalI3 = config.experimentalInteractionMetrics) !== null && _config$experimentalI3 !== void 0 && _config$experimentalI3.enabled) {
        sinkExperimentalInteractionMetrics(awc, payloadPackage);
      }
      if ((_config$postInteracti2 = config.postInteractionLog) !== null && _config$postInteracti2 !== void 0 && _config$postInteracti2.enabled) {
        sinkPostInteractionLog(awc, createPostInteractionLogPayloadPackage.default);
      }
    }
  });
};