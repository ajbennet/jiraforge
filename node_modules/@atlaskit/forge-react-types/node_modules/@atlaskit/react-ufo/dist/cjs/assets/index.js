"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHRSummary = exports.CHRReporter = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty4 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("./utils");
var CHRSummary = exports.CHRSummary = /*#__PURE__*/function () {
  function CHRSummary() {
    (0, _classCallCheck2.default)(this, CHRSummary);
    (0, _defineProperty4.default)(this, "bundles", (0, _defineProperty4.default)((0, _defineProperty4.default)((0, _defineProperty4.default)({}, _utils.MEMORY_KEY, 0), _utils.DISK_KEY, 0), _utils.NETWORK_KEY, 0));
    (0, _defineProperty4.default)(this, "bundlesCount", 0);
    (0, _defineProperty4.default)(this, "size", (0, _defineProperty4.default)((0, _defineProperty4.default)((0, _defineProperty4.default)({}, _utils.MEMORY_KEY, 0), _utils.DISK_KEY, 0), _utils.NETWORK_KEY, 0));
    (0, _defineProperty4.default)(this, "sizeTotal", 0);
  }
  return (0, _createClass2.default)(CHRSummary, [{
    key: "add",
    value: function add(asset) {
      var size = 'size' in asset ? asset.size : undefined;
      var encodedSize = 'encodedSize' in asset ? Number(asset.encodedSize) : 0;
      var type = (0, _utils.calculateTransferType)(asset.type, asset.duration, size);
      if (type === null) {
        return;
      }
      this.bundles[type] += 1;
      this.bundlesCount += 1;
      this.size[type] += encodedSize;
      this.sizeTotal += encodedSize;
    }
  }], [{
    key: "makePayload",
    value: function makePayload(summary) {
      var size = summary.size,
        bundlesCount = summary.bundlesCount,
        sizeTotal = summary.sizeTotal;
      var cachedSize = size[_utils.MEMORY_KEY] + size[_utils.DISK_KEY];
      var sizeRatio = (0, _utils.round)(cachedSize / summary.sizeTotal);
      return {
        size: sizeTotal,
        chr: sizeRatio,
        count: bundlesCount
      };
    }
  }]);
}();
var CHRReporter = exports.CHRReporter = /*#__PURE__*/function () {
  function CHRReporter() {
    (0, _classCallCheck2.default)(this, CHRReporter);
    (0, _defineProperty4.default)(this, "all", new CHRSummary());
    (0, _defineProperty4.default)(this, "allAtlassian", new CHRSummary());
    (0, _defineProperty4.default)(this, "preloaded", new CHRSummary());
  }
  return (0, _createClass2.default)(CHRReporter, [{
    key: "get",
    value: function get(resourceTimings, assetsClassification) {
      var _this = this;
      try {
        Object.entries(resourceTimings).map(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            label = _ref2[0],
            entry = _ref2[1];
          if (assetsClassification.all) {
            _this.all.add(entry);
          }
          if (assetsClassification.allAtlassian({
            label: label,
            entry: entry
          })) {
            _this.allAtlassian.add(entry);
          }
          if (assetsClassification.preloaded({
            label: label,
            entry: entry
          })) {
            _this.preloaded.add(entry);
          }
        });
        if (this.all.bundlesCount === 0) {
          return null;
        }
        return {
          all: CHRSummary.makePayload(this.all),
          allAtlassian: CHRSummary.makePayload(this.allAtlassian),
          preloaded: CHRSummary.makePayload(this.preloaded)
        };
      } catch (error) {
        return null;
      }
    }
  }]);
}();