import { type ChunkHashAlgorithm } from './ChunkHashAlgorithm';
export interface ClientAltBasedAuth {
    readonly id: string;
    readonly token: string;
    readonly baseUrl: string;
}
export interface ClientBasedAuth {
    readonly clientId: string;
    readonly token: string;
    readonly baseUrl: string;
}
export interface AsapBasedAuth {
    readonly asapIssuer: string;
    readonly token: string;
    readonly baseUrl: string;
}
export type Auth = ClientBasedAuth | AsapBasedAuth;
export declare function isClientBasedAuth(auth: Auth): auth is ClientBasedAuth;
export declare function isAsapBasedAuth(auth: Auth): auth is AsapBasedAuth;
export declare const authToOwner: (auth: Auth) => ClientAltBasedAuth | AsapBasedAuth;
export interface MediaClientConfig {
    readonly authProvider: AuthProvider;
    readonly initialAuth?: Auth;
    readonly stargateBaseUrl?: string;
    readonly getAuthFromContext?: AuthFromContextProvider;
    readonly useSha256ForUploads?: boolean;
    readonly authProviderTimeoutMs?: number;
    readonly enforceDataSecurityPolicy?: boolean;
}
export interface AuthContext {
    readonly collectionName?: string;
}
export type AuthProvider = (context?: AuthContext) => Promise<Auth>;
export type AuthFromContextProvider = (contextId: string) => Promise<Auth>;
export type MediaApiConfig = {
    authProvider: AuthProvider;
    initialAuth?: Auth;
    chunkHashAlgorithm?: ChunkHashAlgorithm;
    authProviderTimeout?: number;
};
