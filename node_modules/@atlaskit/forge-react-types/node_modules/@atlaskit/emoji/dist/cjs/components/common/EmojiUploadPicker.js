"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadEmojiNameInputTestId = exports.uploadEmojiComponentTestId = exports.default = exports.cancelEmojiUploadPickerTestId = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _closeCross = _interopRequireDefault(require("@atlaskit/icon/core/migration/close--cross"));
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _primitives = require("@atlaskit/primitives");
var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));
var ImageUtil = _interopRequireWildcard(require("../../util/image"));
var _logger = _interopRequireDefault(require("../../util/logger"));
var _i18n = require("../i18n");
var _EmojiErrorMessage = _interopRequireDefault(require("./EmojiErrorMessage"));
var _EmojiUploadPreview = _interopRequireDefault(require("./EmojiUploadPreview"));
var _FileChooser = _interopRequireDefault(require("./FileChooser"));
var _internalTypes = require("./internal-types");
var _styles = require("./styles");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var uploadEmojiNameInputTestId = exports.uploadEmojiNameInputTestId = 'upload-emoji-name-input';
var uploadEmojiComponentTestId = exports.uploadEmojiComponentTestId = 'upload-emoji-component';
var cancelEmojiUploadPickerTestId = exports.cancelEmojiUploadPickerTestId = 'cancel-emoji-upload-picker';
var disallowedReplacementsMap = new Map([[':', ''], ['!', ''], ['@', ''], ['#', ''], ['%', ''], ['^', ''], ['&', ''], ['*', ''], ['(', ''], [')', ''], [' ', '_']]);
var sanitizeName = function sanitizeName(name) {
  // prevent / replace certain characters, allow others
  disallowedReplacementsMap.forEach(function (replaceWith, exclude) {
    name = name.split(exclude).join(replaceWith);
  });
  return name;
};
var maxNameLength = 50;
var toEmojiName = function toEmojiName(uploadName) {
  var name = uploadName.split('_').join(' ');
  return "".concat(name.substr(0, 1).toLocaleUpperCase()).concat(name.substr(1));
};
var ChooseEmojiFile = /*#__PURE__*/(0, _react.memo)(function (props) {
  var _props$name = props.name,
    name = _props$name === void 0 ? '' : _props$name,
    onChooseFile = props.onChooseFile,
    onClick = props.onClick,
    onNameChange = props.onNameChange,
    onUploadCancelled = props.onUploadCancelled,
    errorMessage = props.errorMessage,
    intl = props.intl;
  var formatMessage = intl.formatMessage;
  var disableChooser = !name;
  var fileChooserButtonDescriptionId = 'choose.emoji.file.button.screen.reader.description.id';
  var inputRef = (0, _react.useRef)(null);
  var onKeyDownHandler = (0, _react.useCallback)(function (event) {
    if (event.key === 'Escape') {
      onUploadCancelled();
    }
  }, [onUploadCancelled]);
  (0, _react.useLayoutEffect)(function () {
    requestAnimationFrame(function () {
      var _inputRef$current;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
    });
  }, []);
  var cancelLabel = formatMessage(_i18n.messages.cancelLabel);
  var emojiPlaceholder = formatMessage(_i18n.messages.emojiPlaceholder);
  var emojiNameAriaLabel = formatMessage(_i18n.messages.emojiNameAriaLabel);
  var emojiChooseFileTitle = formatMessage(_i18n.messages.emojiChooseFileTitle);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styles.emojiUpload,
      "data-testid": uploadEmojiComponentTestId
    }, (0, _react2.jsx)("div", {
      css: _styles.emojiUploadTop
    }, (0, _react2.jsx)("label", {
      css: [_styles.uploadChooseFileMessage, _styles.headingH5],
      htmlFor: "new-emoji-name-input"
    }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.addCustomEmojiLabel)), (0, _react2.jsx)("div", {
      css: _styles.closeEmojiUploadButton
    }, (0, _react2.jsx)(_standardButton.default, {
      onClick: onUploadCancelled,
      "aria-label": cancelLabel,
      appearance: "subtle",
      spacing: "none",
      shouldFitContainer: true,
      testId: cancelEmojiUploadPickerTestId
    }, (0, _react2.jsx)(_closeCross.default, {
      color: "currentColor",
      LEGACY_size: "small",
      label: cancelLabel
    })))), (0, _react2.jsx)("div", {
      css: _styles.uploadChooseFileRow
    }, (0, _react2.jsx)("span", {
      css: _styles.uploadChooseFileEmojiName
    }, (0, _react2.jsx)(_textfield.default, {
      placeholder: emojiPlaceholder,
      "aria-label": emojiNameAriaLabel,
      maxLength: maxNameLength,
      onChange: onNameChange,
      onKeyDown: onKeyDownHandler,
      value: name,
      isCompact: true,
      autoFocus: true,
      testId: uploadEmojiNameInputTestId,
      ref: inputRef,
      id: "new-emoji-name-input",
      "aria-required": true
    })), (0, _react2.jsx)(_primitives.Text, null, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.emojiChooseFileScreenReaderDescription, function () {
      return (0, _react2.jsx)(_FileChooser.default, {
        label: emojiChooseFileTitle,
        onChange: onChooseFile,
        onClick: onClick,
        accept: "image/png,image/jpeg,image/gif",
        ariaDescribedBy: fileChooserButtonDescriptionId,
        isDisabled: disableChooser
      });
    }))), (0, _react2.jsx)("div", {
      id: fileChooserButtonDescriptionId
    }, !errorMessage ? (0, _react2.jsx)(_primitives.Text, {
      as: "p",
      size: "small"
    }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.emojiImageRequirements)) : (0, _react2.jsx)(_EmojiErrorMessage.default, {
      messageStyles: _styles.emojiChooseFileErrorMessage,
      message: errorMessage
    })))
  );
});
var EmojiUploadPicker = function EmojiUploadPicker(props) {
  var _document$activeEleme;
  var errorMessage = props.errorMessage,
    initialUploadName = props.initialUploadName,
    onUploadEmoji = props.onUploadEmoji,
    onFileChooserClicked = props.onFileChooserClicked,
    onUploadCancelled = props.onUploadCancelled,
    intl = props.intl;
  var _useState = (0, _react.useState)(errorMessage ? _internalTypes.UploadStatus.Error : _internalTypes.UploadStatus.Waiting),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    uploadStatus = _useState2[0],
    setUploadStatus = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    chooseEmojiErrorMessage = _useState4[0],
    setChooseEmojiErrorMessage = _useState4[1];
  var _useState5 = (0, _react.useState)(initialUploadName && sanitizeName(initialUploadName)),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    name = _useState6[0],
    setName = _useState6[1];
  var _useState7 = (0, _react.useState)(),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    filename = _useState8[0],
    setFilename = _useState8[1];
  var _useState9 = (0, _react.useState)(),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    previewImage = _useState10[0],
    setPreviewImage = _useState10[1];
  // document is undefined during ssr rendering and throws an error
  var lastFocusedElementId = (0, _react.useRef)(typeof document !== 'undefined' ? (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.id : '');
  (0, _react.useEffect)(function () {
    if (errorMessage) {
      setUploadStatus(_internalTypes.UploadStatus.Error);
      return;
    } else {
      if (uploadStatus === _internalTypes.UploadStatus.Error) {
        setUploadStatus(_internalTypes.UploadStatus.Waiting);
      }
    }
  }, [errorMessage, uploadStatus]);
  (0, _react.useEffect)(function () {
    if (initialUploadName) {
      setName(sanitizeName(initialUploadName));
    }
  }, [initialUploadName]);
  var clearUploadPicker = (0, _react.useCallback)(function () {
    setName(undefined);
    setPreviewImage(undefined);
    setUploadStatus(_internalTypes.UploadStatus.Waiting);
  }, []);
  var onNameChange = (0, _react.useCallback)(function (event) {
    var newName = sanitizeName(event.target.value);
    if (name !== newName) {
      setName(newName);
    }
  }, [name]);
  var onAddEmoji = (0, _react.useCallback)(function () {
    if (uploadStatus === _internalTypes.UploadStatus.Uploading) {
      return;
    }
    if (filename && name && previewImage) {
      var notifyUpload = function notifyUpload(size) {
        var width = size.width,
          height = size.height;
        setUploadStatus(_internalTypes.UploadStatus.Uploading);
        onUploadEmoji({
          name: toEmojiName(name),
          shortName: ":".concat(name, ":"),
          filename: filename,
          dataURL: previewImage,
          width: width,
          height: height
        }, uploadStatus === _internalTypes.UploadStatus.Error, clearUploadPicker);
      };
      ImageUtil.getNaturalImageSize(previewImage).then(function (size) {
        notifyUpload(size);
      }).catch(function (error) {
        (0, _logger.default)('getNaturalImageSize error', error);
        // Just set arbitrary size, worse case is it may render
        // in wrong aspect ratio in some circumstances.
        notifyUpload({
          width: 32,
          height: 32
        });
      });
    }
  }, [clearUploadPicker, filename, name, onUploadEmoji, previewImage, uploadStatus]);
  var cancelChooseFile = (0, _react.useCallback)(function () {
    setPreviewImage(undefined);
  }, []);
  var errorOnUpload = (0, _react.useCallback)(function (event) {
    (0, _logger.default)('File load error: ', event);
    setChooseEmojiErrorMessage((0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.emojiUploadFailed));
    cancelChooseFile();
  }, [cancelChooseFile]);
  var onFileLoad = (0, _react.useCallback)(function (file) {
    return /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(f) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              setFilename(file.name);
              _context.next = 4;
              return ImageUtil.parseImage(f.target.result);
            case 4:
              setPreviewImage(f.target.result);
              _context.next = 11;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              setChooseEmojiErrorMessage((0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.emojiInvalidImage));
              cancelChooseFile();
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 7]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  }, [cancelChooseFile]);
  var onChooseFile = (0, _react.useCallback)(function (event) {
    var files = event.target.files;
    if (files.length) {
      var reader = new FileReader();
      var file = files[0];
      if (ImageUtil.hasFileExceededSize(file)) {
        setChooseEmojiErrorMessage((0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.emojiImageTooBig));
        cancelChooseFile();
        return;
      }
      reader.addEventListener('load', onFileLoad(file));
      reader.addEventListener('abort', errorOnUpload);
      reader.addEventListener('error', errorOnUpload);
      reader.readAsDataURL(file);
    } else {
      cancelChooseFile();
    }
  }, [cancelChooseFile, errorOnUpload, onFileLoad]);
  var cancelUpload = (0, _react.useCallback)(function () {
    clearUploadPicker();
    onUploadCancelled();

    // using setTimeout here to allow the UI to update before setting focus
    setTimeout(function (lastFocus) {
      if (lastFocus) {
        var _document$getElementB;
        (_document$getElementB = document.getElementById(lastFocus)) === null || _document$getElementB === void 0 || _document$getElementB.focus();
      }
    }, 0, lastFocusedElementId.current);
  }, [clearUploadPicker, onUploadCancelled]);
  var onChooseFileClicked = function onChooseFileClicked() {
    onFileChooserClicked && onFileChooserClicked();
  };
  return (0, _react2.jsx)(_reactFocusLock.default, {
    noFocusGuards: true
  }, name && previewImage ? (0, _react2.jsx)(_EmojiUploadPreview.default, {
    errorMessage: errorMessage,
    name: name,
    onAddEmoji: onAddEmoji,
    onUploadCancelled: cancelUpload,
    previewImage: previewImage,
    uploadStatus: uploadStatus
  }) : (0, _react2.jsx)(ChooseEmojiFile, {
    name: name,
    onChooseFile: onChooseFile,
    onClick: onChooseFileClicked,
    onNameChange: onNameChange,
    onUploadCancelled: cancelUpload,
    errorMessage: chooseEmojiErrorMessage,
    intl: intl
  }));
};
var EmojiUploadPickerComponent = (0, _reactIntlNext.injectIntl)( /*#__PURE__*/(0, _react.memo)(EmojiUploadPicker));
var _default = exports.default = EmojiUploadPickerComponent;