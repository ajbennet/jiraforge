"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortCategories = exports.default = exports.categorySelectorComponentTestId = exports.categorySelectorCategoryTestId = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _primitives = require("@atlaskit/primitives");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _constants = require("../../util/constants");
var _i18n = require("../i18n");
var _categories = require("./categories");
var _styles = require("./styles");
var _usePrevious = require("../../hooks/usePrevious");
var _EmojiPickerList = require("./EmojiPickerList");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var sortCategories = exports.sortCategories = function sortCategories(c1, c2) {
  return _categories.CategoryDescriptionMap[c1].order - _categories.CategoryDescriptionMap[c2].order;
};
var addNewCategories = function addNewCategories(oldCategories, newCategories) {
  if (!newCategories) {
    return oldCategories;
  }
  return oldCategories.concat(newCategories.filter(function (category) {
    return !!_categories.CategoryDescriptionMap[category];
  })).sort(sortCategories);
};
var commonCategoryStyles = (0, _primitives.xcss)({
  backgroundColor: 'color.background.neutral.subtle',
  border: 0,
  borderRadius: 'border.radius',
  padding: 'space.0',
  transition: 'color 0.2s ease'
});
var defaultCategoryStyles = (0, _primitives.xcss)({
  color: 'color.text.subtlest',
  ':hover': {
    color: 'color.text.selected'
  }
});
var activeCategoryStyles = (0, _primitives.xcss)({
  color: 'color.text.selected',
  ':hover': {
    color: 'color.text.selected'
  }
});
var disabledCategoryStyles = (0, _primitives.xcss)({
  color: 'color.text.subtlest'
});
var categorySelectorComponentTestId = exports.categorySelectorComponentTestId = 'category-selector-component';
var categorySelectorCategoryTestId = exports.categorySelectorCategoryTestId = function categorySelectorCategoryTestId(categoryId) {
  return "category-selector-".concat(categoryId);
};
var CategorySelector = function CategorySelector(props) {
  var disableCategories = props.disableCategories,
    dynamicCategories = props.dynamicCategories,
    activeCategoryId = props.activeCategoryId,
    onCategorySelected = props.onCategorySelected;
  var _useState = (0, _react.useState)(addNewCategories(_constants.defaultCategories, dynamicCategories)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    categories = _useState2[0],
    setCategories = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    currentFocus = _useState4[0],
    setCurrentFocus = _useState4[1];
  var categoryRef = (0, _react.useRef)(null);
  var prevDynamicCategories = (0, _usePrevious.usePrevious)(dynamicCategories);
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var updateCategories = (0, _react.useCallback)(function () {
    var newCategories = addNewCategories(_constants.defaultCategories, dynamicCategories);
    setCategories(newCategories);
  }, [dynamicCategories]);
  (0, _react.useEffect)(function () {
    if (prevDynamicCategories !== dynamicCategories) {
      updateCategories();
    }
  }, [prevDynamicCategories, dynamicCategories, updateCategories]);
  var focusCategory = (0, _react.useCallback)(function (index) {
    var _categoryRef$current;
    var categoryToFocus = (_categoryRef$current = categoryRef.current) === null || _categoryRef$current === void 0 ? void 0 : _categoryRef$current.querySelector("[data-focus-index=\"".concat(index, "\"]"));
    categoryToFocus && categoryToFocus.focus();
    setCurrentFocus(index);
  }, [categoryRef, setCurrentFocus]);
  var handleKeyDown = function handleKeyDown(e) {
    if (!_constants.CATEGORYSELECTOR_KEYBOARD_KEYS_SUPPORTED.includes(e.key)) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    var lastCategoryIndex = categories.length - 1;
    switch (e.key) {
      // navigate to the right category
      case _constants.KeyboardKeys.ArrowRight:
        focusCategory(currentFocus === lastCategoryIndex ? 0 : currentFocus + 1);
        break;
      // navigate to the left category
      case _constants.KeyboardKeys.ArrowLeft:
        focusCategory(currentFocus === 0 ? lastCategoryIndex : currentFocus - 1);
        break;
      // navigate to the first category
      case _constants.KeyboardKeys.Home:
        focusCategory(0);
        break;
      // navigate to the last category
      case _constants.KeyboardKeys.End:
        focusCategory(lastCategoryIndex);
        break;
    }
  };
  var handleClick = function handleClick(categoryId, index) {
    return function (event) {
      if (disableCategories) {
        event.preventDefault();
        return;
      }
      if (onCategorySelected) {
        onCategorySelected(categoryId);
      }
      setCurrentFocus(index);
    };
  };
  var categoriesSection;
  if (categories) {
    categoriesSection = (0, _react2.jsx)("div", {
      role: "tablist",
      "aria-label": formatMessage(_i18n.messages.categoriesSelectorLabel),
      "data-testid": categorySelectorComponentTestId,
      ref: categoryRef
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: _styles.categorySelectorTablist
    }, categories.map(function (categoryId, index) {
      var category = _categories.CategoryDescriptionMap[categoryId];
      var Icon = category.icon;
      var categoryName = formatMessage(_i18n.messages[category.name]);
      return (0, _react2.jsx)(_tooltip.default, {
        content: categoryName,
        position: "bottom",
        key: category.id
      }, (0, _react2.jsx)(_primitives.Pressable, {
        id: "category-selector-".concat(category.id),
        "data-focus-index": index,
        "aria-label": categoryName,
        "aria-controls": currentFocus === index ? _EmojiPickerList.RENDER_EMOJI_PICKER_LIST_TESTID : undefined,
        "aria-selected": categoryId === activeCategoryId,
        xcss: [commonCategoryStyles, defaultCategoryStyles, categoryId === activeCategoryId && activeCategoryStyles, disableCategories && disabledCategoryStyles],
        isDisabled: disableCategories,
        onClick: handleClick(categoryId, index),
        testId: categorySelectorCategoryTestId(categoryId),
        tabIndex: currentFocus === index ? 0 : -1,
        onKeyDown: handleKeyDown,
        role: "tab"
      }, (0, _react2.jsx)(Icon, {
        label: categoryName
      })));
    }));
  }
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  return (0, _react2.jsx)("div", {
    css: _styles.categorySelector
  }, categoriesSection);
};
var _default = exports.default = CategorySelector;