"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _CachingEmoji = _interopRequireDefault(require("../common/CachingEmoji"));
var _styles = require("./styles");
var _useEmojiPickerListContext = require("../../hooks/useEmojiPickerListContext");
var _i18n = require("../i18n");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var EmojiPickerEmojiRow = function EmojiPickerEmojiRow(_ref) {
  var emojis = _ref.emojis,
    onSelected = _ref.onSelected,
    onMouseMove = _ref.onMouseMove,
    onFocus = _ref.onFocus,
    title = _ref.title,
    showDelete = _ref.showDelete,
    onDelete = _ref.onDelete,
    virtualItemContext = _ref.virtualItemContext;
  var _useEmojiPickerListCo = (0, _useEmojiPickerListContext.useEmojiPickerListContext)(),
    currentEmojisFocus = _useEmojiPickerListCo.currentEmojisFocus,
    setEmojisFocus = _useEmojiPickerListCo.setEmojisFocus;
  var rowIndex = (virtualItemContext === null || virtualItemContext === void 0 ? void 0 : virtualItemContext.index) || 0;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var handleFocus = function handleFocus(index) {
    return function (emojiId, emoji, event) {
      setEmojisFocus({
        rowIndex: rowIndex,
        columnIndex: index
      });
      onFocus && onFocus(emojiId, emoji, event);
    };
  };
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styles.emojiPickerRow,
      role: "presentation"
    }, emojis.map(function (emoji, index) {
      var shortName = emoji.shortName,
        id = emoji.id;
      var key = id ? "".concat(id, "-").concat(title) : "".concat(shortName, "-").concat(title);
      var focus = currentEmojisFocus.rowIndex === rowIndex && currentEmojisFocus.columnIndex === index;
      return (0, _react2.jsx)("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: _styles.emojiItem,
        key: key,
        role: "gridcell",
        "aria-colindex": index + 1 // aria-colindex is 1 based
      }, (0, _react2.jsx)(_CachingEmoji.default, {
        emoji: emoji,
        selectOnHover: true,
        onSelected: onSelected,
        onMouseMove: onMouseMove,
        onFocus: handleFocus(index),
        showDelete: showDelete,
        onDelete: onDelete,
        placeholderSize: 24,
        "data-focus-index": "".concat(rowIndex, "-").concat(index),
        tabIndex: focus ? 0 : -1,
        "aria-roledescription": formatMessage(_i18n.messages.emojiButtonRoleDescription),
        shouldBeInteractive: true
      }));
    }))
  );
};
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(EmojiPickerEmojiRow);