"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadPreviewTestId = exports.default = exports.cancelUploadButtonTestId = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _heading = _interopRequireDefault(require("@atlaskit/heading"));
var _reactIntlNext = require("react-intl-next");
var _constants = require("../../util/constants");
var _i18n = require("../i18n");
var _Emoji = _interopRequireDefault(require("./Emoji"));
var _EmojiErrorMessage = _interopRequireDefault(require("./EmojiErrorMessage"));
var _internalTypes = require("./internal-types");
var _RetryableButton = _interopRequireDefault(require("./RetryableButton"));
var _styles = require("./styles");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var uploadPreviewTestId = exports.uploadPreviewTestId = 'upload-preview';
var cancelUploadButtonTestId = exports.cancelUploadButtonTestId = 'cancel-upload-button';
var addEmojiPreviewDescriptionId = 'fabric.emoji.preview.description.id';
var EmojiUploadPreview = /*#__PURE__*/function (_PureComponent) {
  function EmojiUploadPreview() {
    (0, _classCallCheck2.default)(this, EmojiUploadPreview);
    return _callSuper(this, EmojiUploadPreview, arguments);
  }
  (0, _inherits2.default)(EmojiUploadPreview, _PureComponent);
  return (0, _createClass2.default)(EmojiUploadPreview, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        name = _this$props.name,
        previewImage = _this$props.previewImage,
        uploadStatus = _this$props.uploadStatus,
        errorMessage = _this$props.errorMessage,
        onAddEmoji = _this$props.onAddEmoji,
        onUploadCancelled = _this$props.onUploadCancelled,
        intl = _this$props.intl;
      var formatMessage = intl.formatMessage;
      var emojiComponent;
      if (previewImage) {
        var emoji = {
          shortName: ":".concat(name, ":"),
          type: _constants.customCategory,
          category: _constants.customCategory,
          representation: {
            imagePath: previewImage,
            width: 24,
            height: 24
          },
          searchable: true
        };
        emojiComponent = (0, _react2.jsx)(_Emoji.default, {
          emoji: emoji
        });
      }
      var uploading = uploadStatus === _internalTypes.UploadStatus.Uploading;
      var retryableButtonLabel = errorMessage ? formatMessage(_i18n.messages.retryLabel) : formatMessage(_i18n.messages.addEmojiLabel);
      return (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        (0, _react2.jsx)("div", {
          css: _styles.uploadPreviewFooter
        }, (0, _react2.jsx)("div", {
          css: _styles.uploadPreview,
          "data-testid": uploadPreviewTestId
        }, (0, _react2.jsx)("div", {
          css: _styles.uploadPreviewText
        }, (0, _react2.jsx)(_heading.default, {
          size: "xsmall"
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.emojiPreviewTitle)), (0, _react2.jsx)("div", {
          id: addEmojiPreviewDescriptionId
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _i18n.messages.emojiPreview, {
          values: {
            emoji: emojiComponent
          }
        })))), (0, _react2.jsx)("div", {
          css: _styles.bigEmojiPreview
        }, emojiComponent)), (0, _react2.jsx)("div", {
          css: _styles.uploadAddRow
        }, !uploading && errorMessage ? (0, _react2.jsx)(_EmojiErrorMessage.default, {
          messageStyles: _styles.emojiPreviewErrorMessage,
          message: errorMessage,
          tooltip: true
        }) : null, (0, _react2.jsx)(_RetryableButton.default, {
          label: retryableButtonLabel,
          onSubmit: onAddEmoji,
          appearance: "primary",
          loading: uploading,
          error: !!errorMessage,
          ariaDescribedBy: addEmojiPreviewDescriptionId
        }), (0, _react2.jsx)(_standardButton.default, {
          onClick: onUploadCancelled,
          appearance: "subtle",
          isDisabled: uploading,
          testId: cancelUploadButtonTestId
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.cancelLabel))))
      );
    }
  }]);
}(_react.PureComponent);
var _default = exports.default = (0, _reactIntlNext.injectIntl)(EmojiUploadPreview);