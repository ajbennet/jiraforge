"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadEmojiButtonTestId = exports.retryUploadButtonTestId = exports.default = void 0;
var _reactIntlNext = require("react-intl-next");
var _react = require("@emotion/react");
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _primitives = require("@atlaskit/primitives");
var _i18n = require("../i18n");
var _styles = require("./styles");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var retryUploadButtonTestId = exports.retryUploadButtonTestId = 'retry-upload-button';
var uploadEmojiButtonTestId = exports.uploadEmojiButtonTestId = 'upload-emoji-button';
var LoadingSpinner = function LoadingSpinner() {
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react.jsx)("span", {
      css: _styles.buttonSpinner
    }, (0, _react.jsx)(_spinner.default, null))
  );
};
var RetryButton = function RetryButton(props) {
  var onSubmit = props.onSubmit,
    ariaLabelledBy = props.ariaLabelledBy,
    ariaDescribedBy = props.ariaDescribedBy;
  return (0, _react.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.retryLabel, function (retryLabel) {
    return (0, _react.jsx)(_primitives.Box, {
      paddingInlineEnd: "space.050"
    }, (0, _react.jsx)(_new.default, {
      appearance: "warning",
      onClick: onSubmit,
      testId: retryUploadButtonTestId,
      "aria-describedby": ariaDescribedBy,
      "aria-labelledby": ariaLabelledBy,
      autoFocus: true
    }, retryLabel));
  });
};
var UploadButton = function UploadButton(props) {
  var appearance = props.appearance,
    onSubmit = props.onSubmit,
    label = props.label,
    ariaLabelledBy = props.ariaLabelledBy,
    ariaDescribedBy = props.ariaDescribedBy;
  return (0, _react.jsx)(_primitives.Box, {
    paddingInlineEnd: "space.050"
  }, (0, _react.jsx)(_new.default, {
    appearance: appearance,
    onClick: onSubmit,
    testId: uploadEmojiButtonTestId,
    "aria-describedby": ariaDescribedBy,
    "aria-labelledby": ariaLabelledBy,
    autoFocus: true
  }, label));
};
var RetryableButton = function RetryableButton(props) {
  var loading = props.loading,
    error = props.error;
  if (loading) {
    return (0, _react.jsx)(LoadingSpinner, null);
  }
  if (error) {
    return (0, _react.jsx)(RetryButton, props);
  }
  return (0, _react.jsx)(UploadButton, props);
};
var _default = exports.default = RetryableButton;