"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadEmojiTestId = exports.emojiActionsTestId = exports.default = exports.EmojiActions = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _EmojiDeletePreview = _interopRequireDefault(require("../common/EmojiDeletePreview"));
var _EmojiUploadPicker = _interopRequireDefault(require("../common/EmojiUploadPicker"));
var _EmojiPickerListSearch = require("../picker/EmojiPickerListSearch");
var _ToneSelector = _interopRequireDefault(require("./ToneSelector"));
var _TonePreviewButton = _interopRequireDefault(require("./TonePreviewButton"));
var _i18n = require("../i18n");
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _add = _interopRequireDefault(require("@atlaskit/icon/core/migration/add"));
var _setSkinToneAriaLabelText = require("./setSkinToneAriaLabelText");
var _styles = require("./styles");
var _styles2 = require("../picker/styles");
var _constants = require("../../util/constants");
var _primitives = require("@atlaskit/primitives");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var emojiActionsTestId = exports.emojiActionsTestId = 'emoji-actions';
var uploadEmojiTestId = exports.uploadEmojiTestId = 'upload-emoji';
var iconStyles = (0, _primitives.xcss)({
  marginLeft: 'space.negative.050',
  marginRight: 'space.negative.025'
});

// Generic Type for the wrapped functional component

var AddOwnEmoji = function AddOwnEmoji(props) {
  var onOpenUpload = props.onOpenUpload,
    uploadEnabled = props.uploadEnabled;
  return (0, _react2.jsx)(_react.Fragment, null, uploadEnabled &&
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  (0, _react2.jsx)("div", {
    css: _styles.addCustomEmoji,
    "data-testid": uploadEmojiTestId
  }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.addCustomEmojiLabel, function (label) {
    return (0, _react2.jsx)(_standardButton.default, {
      onClick: onOpenUpload,
      iconBefore: (0, _react2.jsx)(_primitives.Box, {
        xcss: iconStyles
      }, (0, _react2.jsx)(_add.default, {
        LEGACY_margin: "0 ".concat("var(--ds-space-025, 2px)", " 0 ", "var(--ds-space-050, 4px)"),
        color: "currentColor",
        label: "",
        LEGACY_size: "small"
      })),
      appearance: "subtle"
      // TODO: (from codemod) Buttons with "component", "css" or "style" prop can't be automatically migrated with codemods. Please migrate it manually.
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: _styles.addCustomEmojiButton
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: _styles.emojiPickerAddEmoji,
      tabIndex: 0,
      id: "add-custom-emoji"
    }, label);
  })));
};
var TonesWrapper = function TonesWrapper(props) {
  var toneEmoji = props.toneEmoji,
    _props$selectedTone = props.selectedTone,
    selectedTone = _props$selectedTone === void 0 ? _constants.DEFAULT_TONE : _props$selectedTone,
    intl = props.intl,
    onToneOpen = props.onToneOpen,
    showToneSelector = props.showToneSelector;
  var formatMessage = intl.formatMessage;
  var tonePreviewButtonRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    focusTonePreviewButton = _useState2[0],
    setFocusTonePreviewButton = _useState2[1];
  (0, _react.useLayoutEffect)(function () {
    if (focusTonePreviewButton && !showToneSelector) {
      var _tonePreviewButtonRef;
      (_tonePreviewButtonRef = tonePreviewButtonRef.current) === null || _tonePreviewButtonRef === void 0 || _tonePreviewButtonRef.focus();
    }
    return function () {
      setFocusTonePreviewButton(false);
    };
  }, [focusTonePreviewButton, showToneSelector]);
  var onToneCloseHandler = function onToneCloseHandler() {
    var onToneClose = props.onToneClose;
    onToneClose();
    setFocusTonePreviewButton(true);
  };
  var onToneSelectedHandler = function onToneSelectedHandler(toneValue) {
    var onToneSelected = props.onToneSelected;
    onToneSelected(toneValue);
    setFocusTonePreviewButton(true);
  };
  if (!toneEmoji) {
    return null;
  }
  var previewToneEmoji = toneEmoji;
  if (selectedTone !== _constants.DEFAULT_TONE && previewToneEmoji.skinVariations) {
    previewToneEmoji = previewToneEmoji.skinVariations[selectedTone - 1];
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styles.emojiToneSelectorContainer
    }, (0, _react2.jsx)(_ToneSelector.default, {
      emoji: toneEmoji,
      onToneSelected: onToneSelectedHandler,
      onToneClose: onToneCloseHandler,
      selectedTone: selectedTone,
      isVisible: showToneSelector
    }), (0, _react2.jsx)(_TonePreviewButton.default, {
      ref: tonePreviewButtonRef,
      ariaExpanded: showToneSelector,
      emoji: previewToneEmoji,
      selectOnHover: true,
      onSelected: onToneOpen,
      ariaLabelText: formatMessage(_i18n.messages.emojiSelectSkinToneButtonAriaLabelText, {
        selectedTone: "".concat((0, _setSkinToneAriaLabelText.setSkinToneAriaLabelText)(previewToneEmoji.name))
      }),
      isVisible: !showToneSelector
    }))
  );
};
var EmojiActions = exports.EmojiActions = function EmojiActions(props) {
  var onToneSelected = props.onToneSelected,
    onToneSelectorCancelled = props.onToneSelectorCancelled,
    initialUploadName = props.initialUploadName,
    onUploadCancelled = props.onUploadCancelled,
    onCloseDelete = props.onCloseDelete,
    onDeleteEmoji = props.onDeleteEmoji,
    onUploadEmoji = props.onUploadEmoji,
    uploadErrorMessage = props.uploadErrorMessage,
    uploading = props.uploading,
    onFileChooserClicked = props.onFileChooserClicked,
    emojiToDelete = props.emojiToDelete,
    onChange = props.onChange,
    query = props.query,
    _props$resultsCount = props.resultsCount,
    resultsCount = _props$resultsCount === void 0 ? 0 : _props$resultsCount;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showToneSelector = _useState4[0],
    setShowToneSelector = _useState4[1];
  var previewFooterClassnames = [_styles2.emojiPickerFooter, _styles2.emojiActionsContainerWithBottomShadow];
  var onToneOpenHandler = function onToneOpenHandler() {
    return setShowToneSelector(true);
  };
  var onToneCloseHandler = function onToneCloseHandler() {
    return setShowToneSelector(false);
  };
  var onToneSelectedHandler = function onToneSelectedHandler(toneValue) {
    setShowToneSelector(false);
    if (onToneSelected) {
      onToneSelected(toneValue);
    }
  };
  var onMouseLeaveHandler = function onMouseLeaveHandler() {
    if (showToneSelector && onToneSelectorCancelled) {
      onToneSelectorCancelled();
    }
    setShowToneSelector(false);
  };
  if (uploading) {
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      (0, _react2.jsx)("div", {
        css: previewFooterClassnames
      }, (0, _react2.jsx)(_EmojiUploadPicker.default, {
        onUploadCancelled: onUploadCancelled,
        onUploadEmoji: onUploadEmoji,
        onFileChooserClicked: onFileChooserClicked,
        errorMessage: uploadErrorMessage,
        initialUploadName: initialUploadName
      }))
    );
  }
  if (emojiToDelete) {
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      (0, _react2.jsx)("div", {
        css: previewFooterClassnames
      }, (0, _react2.jsx)(_EmojiDeletePreview.default, {
        emoji: emojiToDelete,
        onDeleteEmoji: onDeleteEmoji,
        onCloseDelete: onCloseDelete
      }))
    );
  }
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _react2.jsx)("div", {
      "data-testid": emojiActionsTestId
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      ,
      css: previewFooterClassnames,
      onMouseLeave: onMouseLeaveHandler
    }, (0, _react2.jsx)("div", {
      css: _styles.emojiActionsWrapper
    }, (0, _react2.jsx)(_EmojiPickerListSearch.EmojiPickerListSearch, {
      onChange: onChange,
      query: query,
      resultsCount: resultsCount,
      isVisible: !showToneSelector
    }), (0, _react2.jsx)(TonesWrapper, (0, _extends2.default)({}, props, {
      onToneOpen: onToneOpenHandler,
      onToneClose: onToneCloseHandler,
      onToneSelected: onToneSelectedHandler,
      showToneSelector: showToneSelector
    }))), (0, _react2.jsx)(AddOwnEmoji, props))
  );
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)( /*#__PURE__*/(0, _react.memo)(EmojiActions));