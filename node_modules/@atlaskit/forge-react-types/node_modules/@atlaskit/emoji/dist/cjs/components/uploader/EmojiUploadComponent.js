"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _EmojiResource = require("../../api/EmojiResource");
var _EmojiUploadPicker = _interopRequireDefault(require("../common/EmojiUploadPicker"));
var _UploadEmoji = require("../common/UploadEmoji");
var _analytics = require("../../util/analytics");
var _styles = require("./styles");
var _ufoExperiences = require("../../util/analytics/ufoExperiences");
var _i18n = require("../i18n");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var EmojiUploadComponent = function EmojiUploadComponent(props) {
  var emojiProvider = props.emojiProvider,
    createAnalyticsEvent = props.createAnalyticsEvent,
    onUploaderRef = props.onUploaderRef;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    uploadErrorMessage = _useState2[0],
    setUploadErrorMessage = _useState2[1];
  (0, _react.useEffect)(function () {
    if ((0, _EmojiResource.supportsUploadFeature)(emojiProvider)) {
      emojiProvider.prepareForUpload();
    }
  }, [emojiProvider]);
  (0, _react.useEffect)(function () {
    return function () {
      _ufoExperiences.ufoExperiences['emoji-uploaded'].abort({
        metadata: {
          source: 'EmojiUploadComponent',
          reason: 'unmount'
        }
      });
    };
  }, []);
  var onUploadEmoji = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(upload, retry, onSuccessHandler) {
      var errorSetter, message;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _ufoExperiences.ufoExperiences['emoji-uploaded'].start();
            _ufoExperiences.ufoExperiences['emoji-uploaded'].addMetadata({
              retry: retry
            });
            if (!(0, _EmojiResource.supportsUploadFeature)(emojiProvider)) {
              _context.next = 16;
              break;
            }
            fireAnalytics((0, _analytics.uploadConfirmButton)({
              retry: retry
            }));
            _context.prev = 4;
            _context.next = 7;
            return emojiProvider.prepareForUpload();
          case 7:
            errorSetter = function errorSetter(message) {
              setUploadErrorMessage(message);
            }; // internally handled error from upload callback
            (0, _UploadEmoji.uploadEmoji)(upload, emojiProvider, errorSetter, onUploaded(onSuccessHandler), fireAnalytics, retry);
            _context.next = 16;
            break;
          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](4);
            // error from upload token generation
            message = _context.t0 instanceof Error ? _context.t0.message : 'Issue with generating upload token';
            _ufoExperiences.ufoExperiences['emoji-uploaded'].failure({
              metadata: {
                source: 'EmojiUploadComponent',
                error: message
              }
            });
            setUploadErrorMessage(_i18n.messages.emojiUploadFailed);
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[4, 11]]);
    }));
    return function onUploadEmoji(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
  var onUploaded = function onUploaded(onSuccessHandler) {
    return function () {
      setUploadErrorMessage(undefined);
      if (onSuccessHandler) {
        onSuccessHandler();
      }
    };
  };
  var onFileChooserClicked = function onFileChooserClicked() {
    fireAnalytics((0, _analytics.selectedFileEvent)());
  };
  var onUploadCancelled = function onUploadCancelled() {
    fireAnalytics((0, _analytics.uploadCancelButton)());
    onUploaded();
  };
  var fireAnalytics = function fireAnalytics(analyticsEvent) {
    if (createAnalyticsEvent) {
      (0, _analytics.createAndFireEventInElementsChannel)(analyticsEvent)(createAnalyticsEvent);
    }
  };
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styles.emojiUploadWidget,
      ref: onUploaderRef
    }, (0, _react2.jsx)("div", {
      css: _styles.emojiUploadFooter
    }, (0, _react2.jsx)(_EmojiUploadPicker.default, {
      onFileChooserClicked: onFileChooserClicked,
      onUploadCancelled: onUploadCancelled,
      onUploadEmoji: onUploadEmoji,
      errorMessage: uploadErrorMessage ? (0, _react2.jsx)(_reactIntlNext.FormattedMessage, uploadErrorMessage) : null
    })))
  );
};
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(EmojiUploadComponent);