"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toneSelectorTestId = exports.default = exports.ToneSelectorInternal = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("@emotion/react");
var _react2 = require("react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _analytics = require("../../util/analytics");
var _setSkinToneAriaLabelText = require("./setSkinToneAriaLabelText");
var _EmojiRadioButton = _interopRequireDefault(require("./EmojiRadioButton"));
var _reactIntlNext = require("react-intl-next");
var _i18n = require("../i18n");
var _styles = require("./styles");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var toneSelectorTestId = exports.toneSelectorTestId = 'tone-selector';
var extractAllTones = function extractAllTones(emoji) {
  if (emoji.skinVariations) {
    return [emoji].concat((0, _toConsumableArray2.default)(emoji.skinVariations));
  }
  return [emoji];
};
var ToneSelectorInternal = exports.ToneSelectorInternal = function ToneSelectorInternal(props) {
  var createAnalyticsEvent = props.createAnalyticsEvent,
    emoji = props.emoji,
    onToneSelected = props.onToneSelected,
    onToneClose = props.onToneClose,
    selectedTone = props.selectedTone,
    isVisible = props.isVisible;
  var isMounted = (0, _react2.useRef)(false);
  var selectedToneRadioRef = (0, _react2.useRef)(null);
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var emojiToneCollection = (0, _react2.useMemo)(function () {
    var selectedToneIndex = -1;
    var toneColletion = extractAllTones(emoji).map(function (tone, index) {
      var isSelected = index === selectedTone;
      if (isSelected) {
        selectedToneIndex = index;
      }
      return _objectSpread(_objectSpread({}, tone), {}, {
        isSelected: isSelected,
        label: (0, _setSkinToneAriaLabelText.setSkinToneAriaLabelText)(tone.name),
        toneIndex: index
      });
    });

    // push description of selected tone to the end of the array
    // so that it gets rendered last/rightmost
    toneColletion.push(toneColletion.splice(selectedToneIndex, 1)[0]);
    return toneColletion;
  }, [emoji, selectedTone]);
  (0, _react2.useEffect)(function () {
    if (isVisible) {
      var _selectedToneRadioRef;
      (_selectedToneRadioRef = selectedToneRadioRef.current) === null || _selectedToneRadioRef === void 0 || _selectedToneRadioRef.focus();
    }
  }, [isVisible, selectedToneRadioRef]);
  var fireAnalyticsEvent = function fireAnalyticsEvent(event) {
    if (createAnalyticsEvent) {
      (0, _analytics.createAndFireEventInElementsChannel)(event)(createAnalyticsEvent);
    }
  };
  var onToneSelectedHandler = function onToneSelectedHandler(toneValue) {
    return function () {
      if (selectedTone === toneValue && onToneClose) {
        onToneClose();
        return;
      }
      onToneSelected(toneValue);
      var toneList = ['default', 'light', 'mediumLight', 'medium', 'mediumDark', 'dark'];
      fireAnalyticsEvent((0, _analytics.toneSelectedEvent)({
        skinToneModifier: toneList[toneValue]
      }));
    };
  };
  if (!isMounted.current) {
    fireAnalyticsEvent((0, _analytics.toneSelectorOpenedEvent)({}));
  }
  isMounted.current = true;
  return (0, _react.jsx)("div", {
    role: "radiogroup",
    "data-testid": toneSelectorTestId,
    id: "emoji-picker-tone-selector",
    "aria-label": formatMessage(_i18n.messages.emojiSelectSkinToneListAriaLabelText)
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    ,
    css: !isVisible && _styles.hidden
  }, emojiToneCollection.map(function (tone) {
    return (0, _react.jsx)(_EmojiRadioButton.default, {
      ref: tone.isSelected ? selectedToneRadioRef : null,
      defaultChecked: tone.isSelected,
      ariaLabelText: tone.label,
      key: "".concat(tone.id),
      emoji: tone,
      onSelected: onToneSelectedHandler(tone.toneIndex),
      selectOnHover: true
    });
  }));
};
var ToneSelector = (0, _analyticsNext.withAnalyticsEvents)()(ToneSelectorInternal);
var _default = exports.default = /*#__PURE__*/(0, _react2.memo)(ToneSelector);