"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emojiPickerSearchTestId = exports.EmojiPickerListSearch = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _search = _interopRequireDefault(require("@atlaskit/icon/core/migration/search"));
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _visuallyHidden = _interopRequireDefault(require("@atlaskit/visually-hidden"));
var _react = require("@emotion/react");
var _react2 = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _useDebounce = require("use-debounce");
var _constants = require("../../util/constants");
var _styles = require("../common/styles");
var _i18n = require("../i18n");
var _styles2 = require("./styles");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var emojiPickerSearchTestId = exports.emojiPickerSearchTestId = 'emoji-picker-search';
var EmojiPickerListSearch = exports.EmojiPickerListSearch = function EmojiPickerListSearch(props) {
  var style = props.style,
    query = props.query,
    _props$isVisible = props.isVisible,
    isVisible = _props$isVisible === void 0 ? true : _props$isVisible,
    resultsCount = props.resultsCount,
    onChange = props.onChange;
  var textRef = (0, _react2.useRef)(null);
  var _useState = (0, _react2.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    dirty = _useState2[0],
    setDirty = _useState2[1];
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;

  // Debounce callback
  var _useDebouncedCallback = (0, _useDebounce.useDebouncedCallback)(function (value) {
      onChange(value);
      setDirty(true);
    },
    // delay in ms
    _constants.EMOJI_SEARCH_DEBOUNCE),
    _useDebouncedCallback2 = (0, _slicedToArray2.default)(_useDebouncedCallback, 1),
    debouncedSearch = _useDebouncedCallback2[0];
  var handleOnChange = function handleOnChange(e) {
    debouncedSearch(e.target.value);
  };
  (0, _react2.useLayoutEffect)(function () {
    requestAnimationFrame(function () {
      if (textRef) {
        var _textRef$current;
        (_textRef$current = textRef.current) === null || _textRef$current === void 0 || _textRef$current.focus();
      }
    });
  }, []);
  return (
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react.jsx)("div", {
      css: [_styles2.pickerSearch, !isVisible && _styles.hidden],
      style: style
    }, (0, _react.jsx)(_visuallyHidden.default, {
      id: "emoji-search-results-status",
      role: "status"
    }, dirty && query === '' && formatMessage(_i18n.messages.searchResultsStatusSeeAll), query !== '' && formatMessage(_i18n.messages.searchResultsStatusSeeAll, {
      // change to messages.searchResultsStatus once translated
      count: resultsCount
    })), (0, _react.jsx)(_textfield.default, {
      role: "searchbox",
      "aria-label": formatMessage(_i18n.messages.searchLabel)
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: _styles2.input,
      autoComplete: "off",
      name: "search",
      placeholder: "".concat(formatMessage(_i18n.messages.searchPlaceholder), "..."),
      defaultValue: query || '',
      onChange: handleOnChange,
      elemBeforeInput:
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      (0, _react.jsx)("span", {
        css: _styles2.searchIcon
      }, (0, _react.jsx)(_search.default, {
        LEGACY_margin: "0 0 0 2px",
        color: "currentColor",
        spacing: "spacious",
        label: ""
      })),
      testId: emojiPickerSearchTestId,
      ref: textRef,
      isCompact: true
    }))
  );
};