/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useLayoutEffect, useState, useRef, memo, useCallback } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import TextField from '@atlaskit/textfield';
import CrossIcon from '@atlaskit/icon/core/migration/close--cross';
import AkButton from '@atlaskit/button/standard-button';
import { Text } from '@atlaskit/primitives';
import FocusLock from 'react-focus-lock';
import * as ImageUtil from '../../util/image';
import debug from '../../util/logger';
import { messages } from '../i18n';
import EmojiErrorMessage from './EmojiErrorMessage';
import EmojiUploadPreview from './EmojiUploadPreview';
import FileChooser from './FileChooser';
import { UploadStatus } from './internal-types';
import { closeEmojiUploadButton, emojiChooseFileErrorMessage, emojiUpload, emojiUploadTop, headingH5, uploadChooseFileEmojiName, uploadChooseFileMessage, uploadChooseFileRow } from './styles';
export const uploadEmojiNameInputTestId = 'upload-emoji-name-input';
export const uploadEmojiComponentTestId = 'upload-emoji-component';
export const cancelEmojiUploadPickerTestId = 'cancel-emoji-upload-picker';
const disallowedReplacementsMap = new Map([[':', ''], ['!', ''], ['@', ''], ['#', ''], ['%', ''], ['^', ''], ['&', ''], ['*', ''], ['(', ''], [')', ''], [' ', '_']]);
const sanitizeName = name => {
  // prevent / replace certain characters, allow others
  disallowedReplacementsMap.forEach((replaceWith, exclude) => {
    name = name.split(exclude).join(replaceWith);
  });
  return name;
};
const maxNameLength = 50;
const toEmojiName = uploadName => {
  const name = uploadName.split('_').join(' ');
  return `${name.substr(0, 1).toLocaleUpperCase()}${name.substr(1)}`;
};
const ChooseEmojiFile = /*#__PURE__*/memo(props => {
  const {
    name = '',
    onChooseFile,
    onClick,
    onNameChange,
    onUploadCancelled,
    errorMessage,
    intl
  } = props;
  const {
    formatMessage
  } = intl;
  const disableChooser = !name;
  const fileChooserButtonDescriptionId = 'choose.emoji.file.button.screen.reader.description.id';
  const inputRef = useRef(null);
  const onKeyDownHandler = useCallback(event => {
    if (event.key === 'Escape') {
      onUploadCancelled();
    }
  }, [onUploadCancelled]);
  useLayoutEffect(() => {
    requestAnimationFrame(() => {
      var _inputRef$current;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
    });
  }, []);
  const cancelLabel = formatMessage(messages.cancelLabel);
  const emojiPlaceholder = formatMessage(messages.emojiPlaceholder);
  const emojiNameAriaLabel = formatMessage(messages.emojiNameAriaLabel);
  const emojiChooseFileTitle = formatMessage(messages.emojiChooseFileTitle);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: emojiUpload,
      "data-testid": uploadEmojiComponentTestId
    }, jsx("div", {
      css: emojiUploadTop
    }, jsx("label", {
      css: [uploadChooseFileMessage, headingH5],
      htmlFor: "new-emoji-name-input"
    }, jsx(FormattedMessage, messages.addCustomEmojiLabel)), jsx("div", {
      css: closeEmojiUploadButton
    }, jsx(AkButton, {
      onClick: onUploadCancelled,
      "aria-label": cancelLabel,
      appearance: "subtle",
      spacing: "none",
      shouldFitContainer: true,
      testId: cancelEmojiUploadPickerTestId
    }, jsx(CrossIcon, {
      color: "currentColor",
      LEGACY_size: "small",
      label: cancelLabel
    })))), jsx("div", {
      css: uploadChooseFileRow
    }, jsx("span", {
      css: uploadChooseFileEmojiName
    }, jsx(TextField, {
      placeholder: emojiPlaceholder,
      "aria-label": emojiNameAriaLabel,
      maxLength: maxNameLength,
      onChange: onNameChange,
      onKeyDown: onKeyDownHandler,
      value: name,
      isCompact: true,
      autoFocus: true,
      testId: uploadEmojiNameInputTestId,
      ref: inputRef,
      id: "new-emoji-name-input",
      "aria-required": true
    })), jsx(Text, null, jsx(FormattedMessage, messages.emojiChooseFileScreenReaderDescription, () => jsx(FileChooser, {
      label: emojiChooseFileTitle,
      onChange: onChooseFile,
      onClick: onClick,
      accept: "image/png,image/jpeg,image/gif",
      ariaDescribedBy: fileChooserButtonDescriptionId,
      isDisabled: disableChooser
    })))), jsx("div", {
      id: fileChooserButtonDescriptionId
    }, !errorMessage ? jsx(Text, {
      as: "p",
      size: "small"
    }, jsx(FormattedMessage, messages.emojiImageRequirements)) : jsx(EmojiErrorMessage, {
      messageStyles: emojiChooseFileErrorMessage,
      message: errorMessage
    })))
  );
});
const EmojiUploadPicker = props => {
  var _document$activeEleme;
  const {
    errorMessage,
    initialUploadName,
    onUploadEmoji,
    onFileChooserClicked,
    onUploadCancelled,
    intl
  } = props;
  const [uploadStatus, setUploadStatus] = useState(errorMessage ? UploadStatus.Error : UploadStatus.Waiting);
  const [chooseEmojiErrorMessage, setChooseEmojiErrorMessage] = useState();
  const [name, setName] = useState(initialUploadName && sanitizeName(initialUploadName));
  const [filename, setFilename] = useState();
  const [previewImage, setPreviewImage] = useState();
  // document is undefined during ssr rendering and throws an error
  const lastFocusedElementId = useRef(typeof document !== 'undefined' ? (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.id : '');
  useEffect(() => {
    if (errorMessage) {
      setUploadStatus(UploadStatus.Error);
      return;
    } else {
      if (uploadStatus === UploadStatus.Error) {
        setUploadStatus(UploadStatus.Waiting);
      }
    }
  }, [errorMessage, uploadStatus]);
  useEffect(() => {
    if (initialUploadName) {
      setName(sanitizeName(initialUploadName));
    }
  }, [initialUploadName]);
  const clearUploadPicker = useCallback(() => {
    setName(undefined);
    setPreviewImage(undefined);
    setUploadStatus(UploadStatus.Waiting);
  }, []);
  const onNameChange = useCallback(event => {
    let newName = sanitizeName(event.target.value);
    if (name !== newName) {
      setName(newName);
    }
  }, [name]);
  const onAddEmoji = useCallback(() => {
    if (uploadStatus === UploadStatus.Uploading) {
      return;
    }
    if (filename && name && previewImage) {
      const notifyUpload = size => {
        const {
          width,
          height
        } = size;
        setUploadStatus(UploadStatus.Uploading);
        onUploadEmoji({
          name: toEmojiName(name),
          shortName: `:${name}:`,
          filename,
          dataURL: previewImage,
          width,
          height
        }, uploadStatus === UploadStatus.Error, clearUploadPicker);
      };
      ImageUtil.getNaturalImageSize(previewImage).then(size => {
        notifyUpload(size);
      }).catch(error => {
        debug('getNaturalImageSize error', error);
        // Just set arbitrary size, worse case is it may render
        // in wrong aspect ratio in some circumstances.
        notifyUpload({
          width: 32,
          height: 32
        });
      });
    }
  }, [clearUploadPicker, filename, name, onUploadEmoji, previewImage, uploadStatus]);
  const cancelChooseFile = useCallback(() => {
    setPreviewImage(undefined);
  }, []);
  const errorOnUpload = useCallback(event => {
    debug('File load error: ', event);
    setChooseEmojiErrorMessage(jsx(FormattedMessage, messages.emojiUploadFailed));
    cancelChooseFile();
  }, [cancelChooseFile]);
  const onFileLoad = useCallback(file => async f => {
    try {
      setFilename(file.name);
      await ImageUtil.parseImage(f.target.result);
      setPreviewImage(f.target.result);
    } catch {
      setChooseEmojiErrorMessage(jsx(FormattedMessage, messages.emojiInvalidImage));
      cancelChooseFile();
    }
  }, [cancelChooseFile]);
  const onChooseFile = useCallback(event => {
    const files = event.target.files;
    if (files.length) {
      const reader = new FileReader();
      const file = files[0];
      if (ImageUtil.hasFileExceededSize(file)) {
        setChooseEmojiErrorMessage(jsx(FormattedMessage, messages.emojiImageTooBig));
        cancelChooseFile();
        return;
      }
      reader.addEventListener('load', onFileLoad(file));
      reader.addEventListener('abort', errorOnUpload);
      reader.addEventListener('error', errorOnUpload);
      reader.readAsDataURL(file);
    } else {
      cancelChooseFile();
    }
  }, [cancelChooseFile, errorOnUpload, onFileLoad]);
  const cancelUpload = useCallback(() => {
    clearUploadPicker();
    onUploadCancelled();

    // using setTimeout here to allow the UI to update before setting focus
    setTimeout(lastFocus => {
      if (lastFocus) {
        var _document$getElementB;
        (_document$getElementB = document.getElementById(lastFocus)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();
      }
    }, 0, lastFocusedElementId.current);
  }, [clearUploadPicker, onUploadCancelled]);
  const onChooseFileClicked = () => {
    onFileChooserClicked && onFileChooserClicked();
  };
  return jsx(FocusLock, {
    noFocusGuards: true
  }, name && previewImage ? jsx(EmojiUploadPreview, {
    errorMessage: errorMessage,
    name: name,
    onAddEmoji: onAddEmoji,
    onUploadCancelled: cancelUpload,
    previewImage: previewImage,
    uploadStatus: uploadStatus
  }) : jsx(ChooseEmojiFile, {
    name: name,
    onChooseFile: onChooseFile,
    onClick: onChooseFileClicked,
    onNameChange: onNameChange,
    onUploadCancelled: cancelUpload,
    errorMessage: chooseEmojiErrorMessage,
    intl: intl
  }));
};
const EmojiUploadPickerComponent = injectIntl( /*#__PURE__*/memo(EmojiUploadPicker));
export default EmojiUploadPickerComponent;