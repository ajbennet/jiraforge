import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment, useState, useRef, memo, useLayoutEffect } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import EmojiDeletePreview from '../common/EmojiDeletePreview';
import EmojiUploadPicker from '../common/EmojiUploadPicker';
import { EmojiPickerListSearch } from '../picker/EmojiPickerListSearch';
import ToneSelector from './ToneSelector';
import TonePreviewButton from './TonePreviewButton';
import { messages } from '../i18n';
import AkButton from '@atlaskit/button/standard-button';
import AddIcon from '@atlaskit/icon/core/migration/add';
import { setSkinToneAriaLabelText } from './setSkinToneAriaLabelText';
import { addCustomEmoji, addCustomEmojiButton, emojiActionsWrapper, emojiPickerAddEmoji, emojiToneSelectorContainer } from './styles';
import { emojiActionsContainerWithBottomShadow, emojiPickerFooter } from '../picker/styles';
import { DEFAULT_TONE } from '../../util/constants';
import { Box, xcss } from '@atlaskit/primitives';
export const emojiActionsTestId = 'emoji-actions';
export const uploadEmojiTestId = 'upload-emoji';
const iconStyles = xcss({
  marginLeft: 'space.negative.050',
  marginRight: 'space.negative.025'
});

// Generic Type for the wrapped functional component

const AddOwnEmoji = props => {
  const {
    onOpenUpload,
    uploadEnabled
  } = props;
  return jsx(Fragment, null, uploadEnabled &&
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  jsx("div", {
    css: addCustomEmoji,
    "data-testid": uploadEmojiTestId
  }, jsx(FormattedMessage, messages.addCustomEmojiLabel, label => jsx(AkButton, {
    onClick: onOpenUpload,
    iconBefore: jsx(Box, {
      xcss: iconStyles
    }, jsx(AddIcon, {
      LEGACY_margin: `0 ${"var(--ds-space-025, 2px)"} 0 ${"var(--ds-space-050, 4px)"}`,
      color: "currentColor",
      label: "",
      LEGACY_size: "small"
    })),
    appearance: "subtle"
    // TODO: (from codemod) Buttons with "component", "css" or "style" prop can't be automatically migrated with codemods. Please migrate it manually.
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    ,
    css: addCustomEmojiButton
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: emojiPickerAddEmoji,
    tabIndex: 0,
    id: "add-custom-emoji"
  }, label))));
};
const TonesWrapper = props => {
  const {
    toneEmoji,
    selectedTone = DEFAULT_TONE,
    intl,
    onToneOpen,
    showToneSelector
  } = props;
  const {
    formatMessage
  } = intl;
  const tonePreviewButtonRef = useRef(null);
  const [focusTonePreviewButton, setFocusTonePreviewButton] = useState(false);
  useLayoutEffect(() => {
    if (focusTonePreviewButton && !showToneSelector) {
      var _tonePreviewButtonRef;
      (_tonePreviewButtonRef = tonePreviewButtonRef.current) === null || _tonePreviewButtonRef === void 0 ? void 0 : _tonePreviewButtonRef.focus();
    }
    return () => {
      setFocusTonePreviewButton(false);
    };
  }, [focusTonePreviewButton, showToneSelector]);
  const onToneCloseHandler = () => {
    const {
      onToneClose
    } = props;
    onToneClose();
    setFocusTonePreviewButton(true);
  };
  const onToneSelectedHandler = toneValue => {
    const {
      onToneSelected
    } = props;
    onToneSelected(toneValue);
    setFocusTonePreviewButton(true);
  };
  if (!toneEmoji) {
    return null;
  }
  let previewToneEmoji = toneEmoji;
  if (selectedTone !== DEFAULT_TONE && previewToneEmoji.skinVariations) {
    previewToneEmoji = previewToneEmoji.skinVariations[selectedTone - 1];
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: emojiToneSelectorContainer
    }, jsx(ToneSelector, {
      emoji: toneEmoji,
      onToneSelected: onToneSelectedHandler,
      onToneClose: onToneCloseHandler,
      selectedTone: selectedTone,
      isVisible: showToneSelector
    }), jsx(TonePreviewButton, {
      ref: tonePreviewButtonRef,
      ariaExpanded: showToneSelector,
      emoji: previewToneEmoji,
      selectOnHover: true,
      onSelected: onToneOpen,
      ariaLabelText: formatMessage(messages.emojiSelectSkinToneButtonAriaLabelText, {
        selectedTone: `${setSkinToneAriaLabelText(previewToneEmoji.name)}`
      }),
      isVisible: !showToneSelector
    }))
  );
};
export const EmojiActions = props => {
  const {
    onToneSelected,
    onToneSelectorCancelled,
    initialUploadName,
    onUploadCancelled,
    onCloseDelete,
    onDeleteEmoji,
    onUploadEmoji,
    uploadErrorMessage,
    uploading,
    onFileChooserClicked,
    emojiToDelete,
    onChange,
    query,
    resultsCount = 0
  } = props;
  const [showToneSelector, setShowToneSelector] = useState(false);
  const previewFooterClassnames = [emojiPickerFooter, emojiActionsContainerWithBottomShadow];
  const onToneOpenHandler = () => setShowToneSelector(true);
  const onToneCloseHandler = () => setShowToneSelector(false);
  const onToneSelectedHandler = toneValue => {
    setShowToneSelector(false);
    if (onToneSelected) {
      onToneSelected(toneValue);
    }
  };
  const onMouseLeaveHandler = () => {
    if (showToneSelector && onToneSelectorCancelled) {
      onToneSelectorCancelled();
    }
    setShowToneSelector(false);
  };
  if (uploading) {
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      jsx("div", {
        css: previewFooterClassnames
      }, jsx(EmojiUploadPicker, {
        onUploadCancelled: onUploadCancelled,
        onUploadEmoji: onUploadEmoji,
        onFileChooserClicked: onFileChooserClicked,
        errorMessage: uploadErrorMessage,
        initialUploadName: initialUploadName
      }))
    );
  }
  if (emojiToDelete) {
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      jsx("div", {
        css: previewFooterClassnames
      }, jsx(EmojiDeletePreview, {
        emoji: emojiToDelete,
        onDeleteEmoji: onDeleteEmoji,
        onCloseDelete: onCloseDelete
      }))
    );
  }
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    jsx("div", {
      "data-testid": emojiActionsTestId
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      ,
      css: previewFooterClassnames,
      onMouseLeave: onMouseLeaveHandler
    }, jsx("div", {
      css: emojiActionsWrapper
    }, jsx(EmojiPickerListSearch, {
      onChange: onChange,
      query: query,
      resultsCount: resultsCount,
      isVisible: !showToneSelector
    }), jsx(TonesWrapper, _extends({}, props, {
      onToneOpen: onToneOpenHandler,
      onToneClose: onToneCloseHandler,
      onToneSelected: onToneSelectedHandler,
      showToneSelector: showToneSelector
    }))), jsx(AddOwnEmoji, props))
  );
};
export default injectIntl( /*#__PURE__*/memo(EmojiActions));