import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { PureComponent } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import AkButton from '@atlaskit/button/standard-button';
import Heading from '@atlaskit/heading';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import { customCategory } from '../../util/constants';
import { messages } from '../i18n';
import Emoji from './Emoji';
import EmojiErrorMessage from './EmojiErrorMessage';
import { UploadStatus } from './internal-types';
import RetryableButton from './RetryableButton';
import { bigEmojiPreview, emojiPreviewErrorMessage, uploadAddRow, uploadPreview, uploadPreviewFooter, uploadPreviewText } from './styles';
export const uploadPreviewTestId = 'upload-preview';
export const cancelUploadButtonTestId = 'cancel-upload-button';
const addEmojiPreviewDescriptionId = 'fabric.emoji.preview.description.id';
class EmojiUploadPreview extends PureComponent {
  render() {
    const {
      name,
      previewImage,
      uploadStatus,
      errorMessage,
      onAddEmoji,
      onUploadCancelled,
      intl
    } = this.props;
    const {
      formatMessage
    } = intl;
    let emojiComponent;
    if (previewImage) {
      const emoji = {
        shortName: `:${name}:`,
        type: customCategory,
        category: customCategory,
        representation: {
          imagePath: previewImage,
          width: 24,
          height: 24
        },
        searchable: true
      };
      emojiComponent = jsx(Emoji, {
        emoji: emoji
      });
    }
    const uploading = uploadStatus === UploadStatus.Uploading;
    const retryableButtonLabel = errorMessage ? formatMessage(messages.retryLabel) : formatMessage(messages.addEmojiLabel);
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      jsx("div", {
        css: uploadPreviewFooter
      }, jsx("div", {
        css: uploadPreview,
        "data-testid": uploadPreviewTestId
      }, jsx("div", {
        css: uploadPreviewText
      }, jsx(Heading, {
        size: "xsmall"
      }, jsx(FormattedMessage, messages.emojiPreviewTitle)), jsx("div", {
        id: addEmojiPreviewDescriptionId
      }, jsx(FormattedMessage, _extends({}, messages.emojiPreview, {
        values: {
          emoji: emojiComponent
        }
      })))), jsx("div", {
        css: bigEmojiPreview
      }, emojiComponent)), jsx("div", {
        css: uploadAddRow
      }, !uploading && errorMessage ? jsx(EmojiErrorMessage, {
        messageStyles: emojiPreviewErrorMessage,
        message: errorMessage,
        tooltip: true
      }) : null, jsx(RetryableButton, {
        label: retryableButtonLabel,
        onSubmit: onAddEmoji,
        appearance: "primary",
        loading: uploading,
        error: !!errorMessage,
        ariaDescribedBy: addEmojiPreviewDescriptionId
      }), jsx(AkButton, {
        onClick: onUploadCancelled,
        appearance: "subtle",
        isDisabled: uploading,
        testId: cancelUploadButtonTestId
      }, jsx(FormattedMessage, messages.cancelLabel))))
    );
  }
}
export default injectIntl(EmojiUploadPreview);