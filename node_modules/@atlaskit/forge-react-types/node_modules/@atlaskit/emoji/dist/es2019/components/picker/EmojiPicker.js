import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { ufoExperiences } from '../../util/analytics';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import { LoadingItem } from './EmojiPickerVirtualItems';
import { emojiPicker } from './styles';
import { UfoErrorBoundary } from '../common/UfoErrorBoundary';
import { defaultEmojiPickerSize } from '../../util/constants';
import { EmojiCommonProvider } from '../../context/EmojiCommonProvider';
const emojiPickerModuleLoader = () => import( /* webpackChunkName:"@atlaskit-internal_emojiPickerComponent" */'./EmojiPickerComponent');
const emojiPickerLoader = () => emojiPickerModuleLoader().then(module => module.default);
export const preloadEmojiPicker = () => {
  emojiPickerLoader().then(component => {
    EmojiPickerInternal.AsyncLoadedComponent = component;
  });
};
export class EmojiPickerInternal extends LoadingEmojiComponent {
  constructor(props) {
    super(props, {});
    _defineProperty(this, "state", {
      asyncLoadedComponent: EmojiPickerInternal.AsyncLoadedComponent
    });
    ufoExperiences['emoji-picker-opened'].start();
  }
  asyncLoadComponent() {
    emojiPickerLoader().then(component => {
      EmojiPickerInternal.AsyncLoadedComponent = component;
      this.setAsyncState(component);
    });
  }
  renderLoading() {
    const item = new LoadingItem();
    const handlePickerRef = ref => {
      if (this.props.onPickerRef) {
        this.props.onPickerRef(ref);
      }
    };
    ufoExperiences['emoji-picker-opened'].markFMP();
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      jsx("div", {
        css: emojiPicker(),
        ref: handlePickerRef
      }, item.renderItem())
    );
  }
  renderLoaded(loadedEmojiProvider, EmojiPickerComponent) {
    const {
      emojiProvider,
      ...otherProps
    } = this.props;
    return jsx(UfoErrorBoundary, {
      experiences: [ufoExperiences['emoji-picker-opened']]
    }, jsx(EmojiCommonProvider, {
      emojiProvider: loadedEmojiProvider
    }, jsx(EmojiPickerComponent, otherProps)));
  }
}
// state initialised with static component to prevent
// rerender when the module has already been loaded
_defineProperty(EmojiPickerInternal, "defaultProps", {
  size: defaultEmojiPickerSize
});
const EmojiPicker = withAnalyticsEvents()(EmojiPickerInternal);
export default EmojiPicker;