import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["emojiProvider"];
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { ufoExperiences } from '../../util/analytics';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import { LoadingItem } from './EmojiPickerVirtualItems';
import { emojiPicker } from './styles';
import { UfoErrorBoundary } from '../common/UfoErrorBoundary';
import { defaultEmojiPickerSize } from '../../util/constants';
import { EmojiCommonProvider } from '../../context/EmojiCommonProvider';
var emojiPickerModuleLoader = function emojiPickerModuleLoader() {
  return import( /* webpackChunkName:"@atlaskit-internal_emojiPickerComponent" */'./EmojiPickerComponent');
};
var emojiPickerLoader = function emojiPickerLoader() {
  return emojiPickerModuleLoader().then(function (module) {
    return module.default;
  });
};
export var preloadEmojiPicker = function preloadEmojiPicker() {
  emojiPickerLoader().then(function (component) {
    EmojiPickerInternal.AsyncLoadedComponent = component;
  });
};
export var EmojiPickerInternal = /*#__PURE__*/function (_LoadingEmojiComponen) {
  function EmojiPickerInternal(props) {
    var _this;
    _classCallCheck(this, EmojiPickerInternal);
    _this = _callSuper(this, EmojiPickerInternal, [props, {}]);
    _defineProperty(_this, "state", {
      asyncLoadedComponent: EmojiPickerInternal.AsyncLoadedComponent
    });
    ufoExperiences['emoji-picker-opened'].start();
    return _this;
  }
  _inherits(EmojiPickerInternal, _LoadingEmojiComponen);
  return _createClass(EmojiPickerInternal, [{
    key: "asyncLoadComponent",
    value: function asyncLoadComponent() {
      var _this2 = this;
      emojiPickerLoader().then(function (component) {
        EmojiPickerInternal.AsyncLoadedComponent = component;
        _this2.setAsyncState(component);
      });
    }
  }, {
    key: "renderLoading",
    value: function renderLoading() {
      var _this3 = this;
      var item = new LoadingItem();
      var handlePickerRef = function handlePickerRef(ref) {
        if (_this3.props.onPickerRef) {
          _this3.props.onPickerRef(ref);
        }
      };
      ufoExperiences['emoji-picker-opened'].markFMP();
      return (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        jsx("div", {
          css: emojiPicker(),
          ref: handlePickerRef
        }, item.renderItem())
      );
    }
  }, {
    key: "renderLoaded",
    value: function renderLoaded(loadedEmojiProvider, EmojiPickerComponent) {
      var _this$props = this.props,
        emojiProvider = _this$props.emojiProvider,
        otherProps = _objectWithoutProperties(_this$props, _excluded);
      return jsx(UfoErrorBoundary, {
        experiences: [ufoExperiences['emoji-picker-opened']]
      }, jsx(EmojiCommonProvider, {
        emojiProvider: loadedEmojiProvider
      }, jsx(EmojiPickerComponent, otherProps)));
    }
  }]);
}(LoadingEmojiComponent);
// state initialised with static component to prevent
// rerender when the module has already been loaded
_defineProperty(EmojiPickerInternal, "defaultProps", {
  size: defaultEmojiPickerSize
});
var EmojiPicker = withAnalyticsEvents()(EmojiPickerInternal);
export default EmojiPicker;