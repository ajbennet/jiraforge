/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { FormattedMessage } from 'react-intl-next';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import AkButton from '@atlaskit/button/new';
import Spinner from '@atlaskit/spinner';
import { Box } from '@atlaskit/primitives';
import { messages } from '../i18n';
import { buttonSpinner } from './styles';
export var retryUploadButtonTestId = 'retry-upload-button';
export var uploadEmojiButtonTestId = 'upload-emoji-button';
var LoadingSpinner = function LoadingSpinner() {
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("span", {
      css: buttonSpinner
    }, jsx(Spinner, null))
  );
};
var RetryButton = function RetryButton(props) {
  var onSubmit = props.onSubmit,
    ariaLabelledBy = props.ariaLabelledBy,
    ariaDescribedBy = props.ariaDescribedBy;
  return jsx(FormattedMessage, messages.retryLabel, function (retryLabel) {
    return jsx(Box, {
      paddingInlineEnd: "space.050"
    }, jsx(AkButton, {
      appearance: "warning",
      onClick: onSubmit,
      testId: retryUploadButtonTestId,
      "aria-describedby": ariaDescribedBy,
      "aria-labelledby": ariaLabelledBy,
      autoFocus: true
    }, retryLabel));
  });
};
var UploadButton = function UploadButton(props) {
  var appearance = props.appearance,
    onSubmit = props.onSubmit,
    label = props.label,
    ariaLabelledBy = props.ariaLabelledBy,
    ariaDescribedBy = props.ariaDescribedBy;
  return jsx(Box, {
    paddingInlineEnd: "space.050"
  }, jsx(AkButton, {
    appearance: appearance,
    onClick: onSubmit,
    testId: uploadEmojiButtonTestId,
    "aria-describedby": ariaDescribedBy,
    "aria-labelledby": ariaLabelledBy,
    autoFocus: true
  }, label));
};
var RetryableButton = function RetryableButton(props) {
  var loading = props.loading,
    error = props.error;
  if (loading) {
    return jsx(LoadingSpinner, null);
  }
  if (error) {
    return jsx(RetryButton, props);
  }
  return jsx(UploadButton, props);
};
export default RetryableButton;