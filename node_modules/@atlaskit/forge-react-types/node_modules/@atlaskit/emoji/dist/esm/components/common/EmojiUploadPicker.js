import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useLayoutEffect, useState, useRef, memo, useCallback } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import TextField from '@atlaskit/textfield';
import CrossIcon from '@atlaskit/icon/core/migration/close--cross';
import AkButton from '@atlaskit/button/standard-button';
import { Text } from '@atlaskit/primitives';
import FocusLock from 'react-focus-lock';
import * as ImageUtil from '../../util/image';
import debug from '../../util/logger';
import { messages } from '../i18n';
import EmojiErrorMessage from './EmojiErrorMessage';
import EmojiUploadPreview from './EmojiUploadPreview';
import FileChooser from './FileChooser';
import { UploadStatus } from './internal-types';
import { closeEmojiUploadButton, emojiChooseFileErrorMessage, emojiUpload, emojiUploadTop, headingH5, uploadChooseFileEmojiName, uploadChooseFileMessage, uploadChooseFileRow } from './styles';
export var uploadEmojiNameInputTestId = 'upload-emoji-name-input';
export var uploadEmojiComponentTestId = 'upload-emoji-component';
export var cancelEmojiUploadPickerTestId = 'cancel-emoji-upload-picker';
var disallowedReplacementsMap = new Map([[':', ''], ['!', ''], ['@', ''], ['#', ''], ['%', ''], ['^', ''], ['&', ''], ['*', ''], ['(', ''], [')', ''], [' ', '_']]);
var sanitizeName = function sanitizeName(name) {
  // prevent / replace certain characters, allow others
  disallowedReplacementsMap.forEach(function (replaceWith, exclude) {
    name = name.split(exclude).join(replaceWith);
  });
  return name;
};
var maxNameLength = 50;
var toEmojiName = function toEmojiName(uploadName) {
  var name = uploadName.split('_').join(' ');
  return "".concat(name.substr(0, 1).toLocaleUpperCase()).concat(name.substr(1));
};
var ChooseEmojiFile = /*#__PURE__*/memo(function (props) {
  var _props$name = props.name,
    name = _props$name === void 0 ? '' : _props$name,
    onChooseFile = props.onChooseFile,
    onClick = props.onClick,
    onNameChange = props.onNameChange,
    onUploadCancelled = props.onUploadCancelled,
    errorMessage = props.errorMessage,
    intl = props.intl;
  var formatMessage = intl.formatMessage;
  var disableChooser = !name;
  var fileChooserButtonDescriptionId = 'choose.emoji.file.button.screen.reader.description.id';
  var inputRef = useRef(null);
  var onKeyDownHandler = useCallback(function (event) {
    if (event.key === 'Escape') {
      onUploadCancelled();
    }
  }, [onUploadCancelled]);
  useLayoutEffect(function () {
    requestAnimationFrame(function () {
      var _inputRef$current;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
    });
  }, []);
  var cancelLabel = formatMessage(messages.cancelLabel);
  var emojiPlaceholder = formatMessage(messages.emojiPlaceholder);
  var emojiNameAriaLabel = formatMessage(messages.emojiNameAriaLabel);
  var emojiChooseFileTitle = formatMessage(messages.emojiChooseFileTitle);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: emojiUpload,
      "data-testid": uploadEmojiComponentTestId
    }, jsx("div", {
      css: emojiUploadTop
    }, jsx("label", {
      css: [uploadChooseFileMessage, headingH5],
      htmlFor: "new-emoji-name-input"
    }, jsx(FormattedMessage, messages.addCustomEmojiLabel)), jsx("div", {
      css: closeEmojiUploadButton
    }, jsx(AkButton, {
      onClick: onUploadCancelled,
      "aria-label": cancelLabel,
      appearance: "subtle",
      spacing: "none",
      shouldFitContainer: true,
      testId: cancelEmojiUploadPickerTestId
    }, jsx(CrossIcon, {
      color: "currentColor",
      LEGACY_size: "small",
      label: cancelLabel
    })))), jsx("div", {
      css: uploadChooseFileRow
    }, jsx("span", {
      css: uploadChooseFileEmojiName
    }, jsx(TextField, {
      placeholder: emojiPlaceholder,
      "aria-label": emojiNameAriaLabel,
      maxLength: maxNameLength,
      onChange: onNameChange,
      onKeyDown: onKeyDownHandler,
      value: name,
      isCompact: true,
      autoFocus: true,
      testId: uploadEmojiNameInputTestId,
      ref: inputRef,
      id: "new-emoji-name-input",
      "aria-required": true
    })), jsx(Text, null, jsx(FormattedMessage, messages.emojiChooseFileScreenReaderDescription, function () {
      return jsx(FileChooser, {
        label: emojiChooseFileTitle,
        onChange: onChooseFile,
        onClick: onClick,
        accept: "image/png,image/jpeg,image/gif",
        ariaDescribedBy: fileChooserButtonDescriptionId,
        isDisabled: disableChooser
      });
    }))), jsx("div", {
      id: fileChooserButtonDescriptionId
    }, !errorMessage ? jsx(Text, {
      as: "p",
      size: "small"
    }, jsx(FormattedMessage, messages.emojiImageRequirements)) : jsx(EmojiErrorMessage, {
      messageStyles: emojiChooseFileErrorMessage,
      message: errorMessage
    })))
  );
});
var EmojiUploadPicker = function EmojiUploadPicker(props) {
  var _document$activeEleme;
  var errorMessage = props.errorMessage,
    initialUploadName = props.initialUploadName,
    onUploadEmoji = props.onUploadEmoji,
    onFileChooserClicked = props.onFileChooserClicked,
    onUploadCancelled = props.onUploadCancelled,
    intl = props.intl;
  var _useState = useState(errorMessage ? UploadStatus.Error : UploadStatus.Waiting),
    _useState2 = _slicedToArray(_useState, 2),
    uploadStatus = _useState2[0],
    setUploadStatus = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    chooseEmojiErrorMessage = _useState4[0],
    setChooseEmojiErrorMessage = _useState4[1];
  var _useState5 = useState(initialUploadName && sanitizeName(initialUploadName)),
    _useState6 = _slicedToArray(_useState5, 2),
    name = _useState6[0],
    setName = _useState6[1];
  var _useState7 = useState(),
    _useState8 = _slicedToArray(_useState7, 2),
    filename = _useState8[0],
    setFilename = _useState8[1];
  var _useState9 = useState(),
    _useState10 = _slicedToArray(_useState9, 2),
    previewImage = _useState10[0],
    setPreviewImage = _useState10[1];
  // document is undefined during ssr rendering and throws an error
  var lastFocusedElementId = useRef(typeof document !== 'undefined' ? (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.id : '');
  useEffect(function () {
    if (errorMessage) {
      setUploadStatus(UploadStatus.Error);
      return;
    } else {
      if (uploadStatus === UploadStatus.Error) {
        setUploadStatus(UploadStatus.Waiting);
      }
    }
  }, [errorMessage, uploadStatus]);
  useEffect(function () {
    if (initialUploadName) {
      setName(sanitizeName(initialUploadName));
    }
  }, [initialUploadName]);
  var clearUploadPicker = useCallback(function () {
    setName(undefined);
    setPreviewImage(undefined);
    setUploadStatus(UploadStatus.Waiting);
  }, []);
  var onNameChange = useCallback(function (event) {
    var newName = sanitizeName(event.target.value);
    if (name !== newName) {
      setName(newName);
    }
  }, [name]);
  var onAddEmoji = useCallback(function () {
    if (uploadStatus === UploadStatus.Uploading) {
      return;
    }
    if (filename && name && previewImage) {
      var notifyUpload = function notifyUpload(size) {
        var width = size.width,
          height = size.height;
        setUploadStatus(UploadStatus.Uploading);
        onUploadEmoji({
          name: toEmojiName(name),
          shortName: ":".concat(name, ":"),
          filename: filename,
          dataURL: previewImage,
          width: width,
          height: height
        }, uploadStatus === UploadStatus.Error, clearUploadPicker);
      };
      ImageUtil.getNaturalImageSize(previewImage).then(function (size) {
        notifyUpload(size);
      }).catch(function (error) {
        debug('getNaturalImageSize error', error);
        // Just set arbitrary size, worse case is it may render
        // in wrong aspect ratio in some circumstances.
        notifyUpload({
          width: 32,
          height: 32
        });
      });
    }
  }, [clearUploadPicker, filename, name, onUploadEmoji, previewImage, uploadStatus]);
  var cancelChooseFile = useCallback(function () {
    setPreviewImage(undefined);
  }, []);
  var errorOnUpload = useCallback(function (event) {
    debug('File load error: ', event);
    setChooseEmojiErrorMessage(jsx(FormattedMessage, messages.emojiUploadFailed));
    cancelChooseFile();
  }, [cancelChooseFile]);
  var onFileLoad = useCallback(function (file) {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(f) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              setFilename(file.name);
              _context.next = 4;
              return ImageUtil.parseImage(f.target.result);
            case 4:
              setPreviewImage(f.target.result);
              _context.next = 11;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              setChooseEmojiErrorMessage(jsx(FormattedMessage, messages.emojiInvalidImage));
              cancelChooseFile();
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 7]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  }, [cancelChooseFile]);
  var onChooseFile = useCallback(function (event) {
    var files = event.target.files;
    if (files.length) {
      var reader = new FileReader();
      var file = files[0];
      if (ImageUtil.hasFileExceededSize(file)) {
        setChooseEmojiErrorMessage(jsx(FormattedMessage, messages.emojiImageTooBig));
        cancelChooseFile();
        return;
      }
      reader.addEventListener('load', onFileLoad(file));
      reader.addEventListener('abort', errorOnUpload);
      reader.addEventListener('error', errorOnUpload);
      reader.readAsDataURL(file);
    } else {
      cancelChooseFile();
    }
  }, [cancelChooseFile, errorOnUpload, onFileLoad]);
  var cancelUpload = useCallback(function () {
    clearUploadPicker();
    onUploadCancelled();

    // using setTimeout here to allow the UI to update before setting focus
    setTimeout(function (lastFocus) {
      if (lastFocus) {
        var _document$getElementB;
        (_document$getElementB = document.getElementById(lastFocus)) === null || _document$getElementB === void 0 || _document$getElementB.focus();
      }
    }, 0, lastFocusedElementId.current);
  }, [clearUploadPicker, onUploadCancelled]);
  var onChooseFileClicked = function onChooseFileClicked() {
    onFileChooserClicked && onFileChooserClicked();
  };
  return jsx(FocusLock, {
    noFocusGuards: true
  }, name && previewImage ? jsx(EmojiUploadPreview, {
    errorMessage: errorMessage,
    name: name,
    onAddEmoji: onAddEmoji,
    onUploadCancelled: cancelUpload,
    previewImage: previewImage,
    uploadStatus: uploadStatus
  }) : jsx(ChooseEmojiFile, {
    name: name,
    onChooseFile: onChooseFile,
    onClick: onChooseFileClicked,
    onNameChange: onNameChange,
    onUploadCancelled: cancelUpload,
    errorMessage: chooseEmojiErrorMessage,
    intl: intl
  }));
};
var EmojiUploadPickerComponent = injectIntl( /*#__PURE__*/memo(EmojiUploadPicker));
export default EmojiUploadPickerComponent;