import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback, useEffect, useRef, useState } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { Pressable, xcss } from '@atlaskit/primitives';
import Tooltip from '@atlaskit/tooltip';
import { CATEGORYSELECTOR_KEYBOARD_KEYS_SUPPORTED, defaultCategories, KeyboardKeys } from '../../util/constants';
import { messages } from '../i18n';
import { CategoryDescriptionMap } from './categories';
import { categorySelector, categorySelectorTablist } from './styles';
import { usePrevious } from '../../hooks/usePrevious';
import { RENDER_EMOJI_PICKER_LIST_TESTID } from './EmojiPickerList';
export var sortCategories = function sortCategories(c1, c2) {
  return CategoryDescriptionMap[c1].order - CategoryDescriptionMap[c2].order;
};
var addNewCategories = function addNewCategories(oldCategories, newCategories) {
  if (!newCategories) {
    return oldCategories;
  }
  return oldCategories.concat(newCategories.filter(function (category) {
    return !!CategoryDescriptionMap[category];
  })).sort(sortCategories);
};
var commonCategoryStyles = xcss({
  backgroundColor: 'color.background.neutral.subtle',
  border: 0,
  borderRadius: 'border.radius',
  padding: 'space.0',
  transition: 'color 0.2s ease'
});
var defaultCategoryStyles = xcss({
  color: 'color.text.subtlest',
  ':hover': {
    color: 'color.text.selected'
  }
});
var activeCategoryStyles = xcss({
  color: 'color.text.selected',
  ':hover': {
    color: 'color.text.selected'
  }
});
var disabledCategoryStyles = xcss({
  color: 'color.text.subtlest'
});
export var categorySelectorComponentTestId = 'category-selector-component';
export var categorySelectorCategoryTestId = function categorySelectorCategoryTestId(categoryId) {
  return "category-selector-".concat(categoryId);
};
var CategorySelector = function CategorySelector(props) {
  var disableCategories = props.disableCategories,
    dynamicCategories = props.dynamicCategories,
    activeCategoryId = props.activeCategoryId,
    onCategorySelected = props.onCategorySelected;
  var _useState = useState(addNewCategories(defaultCategories, dynamicCategories)),
    _useState2 = _slicedToArray(_useState, 2),
    categories = _useState2[0],
    setCategories = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    currentFocus = _useState4[0],
    setCurrentFocus = _useState4[1];
  var categoryRef = useRef(null);
  var prevDynamicCategories = usePrevious(dynamicCategories);
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var updateCategories = useCallback(function () {
    var newCategories = addNewCategories(defaultCategories, dynamicCategories);
    setCategories(newCategories);
  }, [dynamicCategories]);
  useEffect(function () {
    if (prevDynamicCategories !== dynamicCategories) {
      updateCategories();
    }
  }, [prevDynamicCategories, dynamicCategories, updateCategories]);
  var focusCategory = useCallback(function (index) {
    var _categoryRef$current;
    var categoryToFocus = (_categoryRef$current = categoryRef.current) === null || _categoryRef$current === void 0 ? void 0 : _categoryRef$current.querySelector("[data-focus-index=\"".concat(index, "\"]"));
    categoryToFocus && categoryToFocus.focus();
    setCurrentFocus(index);
  }, [categoryRef, setCurrentFocus]);
  var handleKeyDown = function handleKeyDown(e) {
    if (!CATEGORYSELECTOR_KEYBOARD_KEYS_SUPPORTED.includes(e.key)) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    var lastCategoryIndex = categories.length - 1;
    switch (e.key) {
      // navigate to the right category
      case KeyboardKeys.ArrowRight:
        focusCategory(currentFocus === lastCategoryIndex ? 0 : currentFocus + 1);
        break;
      // navigate to the left category
      case KeyboardKeys.ArrowLeft:
        focusCategory(currentFocus === 0 ? lastCategoryIndex : currentFocus - 1);
        break;
      // navigate to the first category
      case KeyboardKeys.Home:
        focusCategory(0);
        break;
      // navigate to the last category
      case KeyboardKeys.End:
        focusCategory(lastCategoryIndex);
        break;
    }
  };
  var handleClick = function handleClick(categoryId, index) {
    return function (event) {
      if (disableCategories) {
        event.preventDefault();
        return;
      }
      if (onCategorySelected) {
        onCategorySelected(categoryId);
      }
      setCurrentFocus(index);
    };
  };
  var categoriesSection;
  if (categories) {
    categoriesSection = jsx("div", {
      role: "tablist",
      "aria-label": formatMessage(messages.categoriesSelectorLabel),
      "data-testid": categorySelectorComponentTestId,
      ref: categoryRef
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: categorySelectorTablist
    }, categories.map(function (categoryId, index) {
      var category = CategoryDescriptionMap[categoryId];
      var Icon = category.icon;
      var categoryName = formatMessage(messages[category.name]);
      return jsx(Tooltip, {
        content: categoryName,
        position: "bottom",
        key: category.id
      }, jsx(Pressable, {
        id: "category-selector-".concat(category.id),
        "data-focus-index": index,
        "aria-label": categoryName,
        "aria-controls": currentFocus === index ? RENDER_EMOJI_PICKER_LIST_TESTID : undefined,
        "aria-selected": categoryId === activeCategoryId,
        xcss: [commonCategoryStyles, defaultCategoryStyles, categoryId === activeCategoryId && activeCategoryStyles, disableCategories && disabledCategoryStyles],
        isDisabled: disableCategories,
        onClick: handleClick(categoryId, index),
        testId: categorySelectorCategoryTestId(categoryId),
        tabIndex: currentFocus === index ? 0 : -1,
        onKeyDown: handleKeyDown,
        role: "tab"
      }, jsx(Icon, {
        label: categoryName
      })));
    }));
  }
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  return jsx("div", {
    css: categorySelector
  }, categoriesSection);
};
export default CategorySelector;