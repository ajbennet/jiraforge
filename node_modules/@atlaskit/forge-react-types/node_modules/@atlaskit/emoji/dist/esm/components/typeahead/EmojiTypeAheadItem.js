import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { PureComponent } from 'react';
import { toEmojiId } from '../../util/type-helpers';
import { leftClick } from '../../util/mouse';
import { EmojiPreviewComponent } from '../common/EmojiPreviewComponent';
import { EmojiCommonProvider } from '../../context/EmojiCommonProvider';
import { typeAheadItem, selected as selectedStyles, typeAheadItemRow, typeaheadSelected } from './styles';
var EmojiTypeAheadItemInternal = /*#__PURE__*/function (_PureComponent) {
  function EmojiTypeAheadItemInternal() {
    var _this;
    _classCallCheck(this, EmojiTypeAheadItemInternal);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, EmojiTypeAheadItemInternal, [].concat(args));
    // internal, used for callbacks
    _defineProperty(_this, "onEmojiSelected", function (event) {
      var _this$props = _this.props,
        emoji = _this$props.emoji,
        onSelection = _this$props.onSelection;
      if (leftClick(event) && onSelection) {
        event.preventDefault();
        onSelection(toEmojiId(emoji), emoji, event);
      }
    });
    _defineProperty(_this, "onEmojiMenuItemMouseMove", function (event) {
      var _this$props2 = _this.props,
        emoji = _this$props2.emoji,
        onMouseMove = _this$props2.onMouseMove;
      if (onMouseMove) {
        onMouseMove(toEmojiId(emoji), emoji, event);
      }
    });
    return _this;
  }
  _inherits(EmojiTypeAheadItemInternal, _PureComponent);
  return _createClass(EmojiTypeAheadItemInternal, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
        selected = _this$props3.selected,
        emoji = _this$props3.emoji,
        emojiProvider = _this$props3.emojiProvider;
      var classes = [typeAheadItem, selected && selectedStyles];
      return jsx(EmojiCommonProvider, {
        emojiProvider: emojiProvider
      }, jsx("div", {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        className: "ak-emoji-typeahead-item ".concat(selected ? typeaheadSelected : '')
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        ,
        css: classes,
        onMouseDown: this.onEmojiSelected,
        onMouseMove: this.onEmojiMenuItemMouseMove,
        "data-emoji-id": emoji.shortName,
        ref: this.props.forwardedRef
      }, jsx("div", {
        css: typeAheadItemRow
      }, emoji && jsx(EmojiPreviewComponent, {
        emoji: emoji
      }))));
    }
  }]);
}(PureComponent);
var EmojiTypeAheadItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return jsx(EmojiTypeAheadItemInternal, _extends({}, props, {
    forwardedRef: ref
  }));
});
export default EmojiTypeAheadItem;