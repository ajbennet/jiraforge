import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { PureComponent } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import AkButton from '@atlaskit/button/standard-button';
import Heading from '@atlaskit/heading';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import { customCategory } from '../../util/constants';
import { messages } from '../i18n';
import Emoji from './Emoji';
import EmojiErrorMessage from './EmojiErrorMessage';
import { UploadStatus } from './internal-types';
import RetryableButton from './RetryableButton';
import { bigEmojiPreview, emojiPreviewErrorMessage, uploadAddRow, uploadPreview, uploadPreviewFooter, uploadPreviewText } from './styles';
export var uploadPreviewTestId = 'upload-preview';
export var cancelUploadButtonTestId = 'cancel-upload-button';
var addEmojiPreviewDescriptionId = 'fabric.emoji.preview.description.id';
var EmojiUploadPreview = /*#__PURE__*/function (_PureComponent) {
  function EmojiUploadPreview() {
    _classCallCheck(this, EmojiUploadPreview);
    return _callSuper(this, EmojiUploadPreview, arguments);
  }
  _inherits(EmojiUploadPreview, _PureComponent);
  return _createClass(EmojiUploadPreview, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        name = _this$props.name,
        previewImage = _this$props.previewImage,
        uploadStatus = _this$props.uploadStatus,
        errorMessage = _this$props.errorMessage,
        onAddEmoji = _this$props.onAddEmoji,
        onUploadCancelled = _this$props.onUploadCancelled,
        intl = _this$props.intl;
      var formatMessage = intl.formatMessage;
      var emojiComponent;
      if (previewImage) {
        var emoji = {
          shortName: ":".concat(name, ":"),
          type: customCategory,
          category: customCategory,
          representation: {
            imagePath: previewImage,
            width: 24,
            height: 24
          },
          searchable: true
        };
        emojiComponent = jsx(Emoji, {
          emoji: emoji
        });
      }
      var uploading = uploadStatus === UploadStatus.Uploading;
      var retryableButtonLabel = errorMessage ? formatMessage(messages.retryLabel) : formatMessage(messages.addEmojiLabel);
      return (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        jsx("div", {
          css: uploadPreviewFooter
        }, jsx("div", {
          css: uploadPreview,
          "data-testid": uploadPreviewTestId
        }, jsx("div", {
          css: uploadPreviewText
        }, jsx(Heading, {
          size: "xsmall"
        }, jsx(FormattedMessage, messages.emojiPreviewTitle)), jsx("div", {
          id: addEmojiPreviewDescriptionId
        }, jsx(FormattedMessage, _extends({}, messages.emojiPreview, {
          values: {
            emoji: emojiComponent
          }
        })))), jsx("div", {
          css: bigEmojiPreview
        }, emojiComponent)), jsx("div", {
          css: uploadAddRow
        }, !uploading && errorMessage ? jsx(EmojiErrorMessage, {
          messageStyles: emojiPreviewErrorMessage,
          message: errorMessage,
          tooltip: true
        }) : null, jsx(RetryableButton, {
          label: retryableButtonLabel,
          onSubmit: onAddEmoji,
          appearance: "primary",
          loading: uploading,
          error: !!errorMessage,
          ariaDescribedBy: addEmojiPreviewDescriptionId
        }), jsx(AkButton, {
          onClick: onUploadCancelled,
          appearance: "subtle",
          isDisabled: uploading,
          testId: cancelUploadButtonTestId
        }, jsx(FormattedMessage, messages.cancelLabel))))
      );
    }
  }]);
}(PureComponent);
export default injectIntl(EmojiUploadPreview);