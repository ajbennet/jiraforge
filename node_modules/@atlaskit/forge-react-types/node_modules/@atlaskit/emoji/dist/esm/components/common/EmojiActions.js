import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment, useState, useRef, memo, useLayoutEffect } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import EmojiDeletePreview from '../common/EmojiDeletePreview';
import EmojiUploadPicker from '../common/EmojiUploadPicker';
import { EmojiPickerListSearch } from '../picker/EmojiPickerListSearch';
import ToneSelector from './ToneSelector';
import TonePreviewButton from './TonePreviewButton';
import { messages } from '../i18n';
import AkButton from '@atlaskit/button/standard-button';
import AddIcon from '@atlaskit/icon/core/migration/add';
import { setSkinToneAriaLabelText } from './setSkinToneAriaLabelText';
import { addCustomEmoji, addCustomEmojiButton, emojiActionsWrapper, emojiPickerAddEmoji, emojiToneSelectorContainer } from './styles';
import { emojiActionsContainerWithBottomShadow, emojiPickerFooter } from '../picker/styles';
import { DEFAULT_TONE } from '../../util/constants';
import { Box, xcss } from '@atlaskit/primitives';
export var emojiActionsTestId = 'emoji-actions';
export var uploadEmojiTestId = 'upload-emoji';
var iconStyles = xcss({
  marginLeft: 'space.negative.050',
  marginRight: 'space.negative.025'
});

// Generic Type for the wrapped functional component

var AddOwnEmoji = function AddOwnEmoji(props) {
  var onOpenUpload = props.onOpenUpload,
    uploadEnabled = props.uploadEnabled;
  return jsx(Fragment, null, uploadEnabled &&
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  jsx("div", {
    css: addCustomEmoji,
    "data-testid": uploadEmojiTestId
  }, jsx(FormattedMessage, messages.addCustomEmojiLabel, function (label) {
    return jsx(AkButton, {
      onClick: onOpenUpload,
      iconBefore: jsx(Box, {
        xcss: iconStyles
      }, jsx(AddIcon, {
        LEGACY_margin: "0 ".concat("var(--ds-space-025, 2px)", " 0 ", "var(--ds-space-050, 4px)"),
        color: "currentColor",
        label: "",
        LEGACY_size: "small"
      })),
      appearance: "subtle"
      // TODO: (from codemod) Buttons with "component", "css" or "style" prop can't be automatically migrated with codemods. Please migrate it manually.
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: addCustomEmojiButton
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: emojiPickerAddEmoji,
      tabIndex: 0,
      id: "add-custom-emoji"
    }, label);
  })));
};
var TonesWrapper = function TonesWrapper(props) {
  var toneEmoji = props.toneEmoji,
    _props$selectedTone = props.selectedTone,
    selectedTone = _props$selectedTone === void 0 ? DEFAULT_TONE : _props$selectedTone,
    intl = props.intl,
    onToneOpen = props.onToneOpen,
    showToneSelector = props.showToneSelector;
  var formatMessage = intl.formatMessage;
  var tonePreviewButtonRef = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    focusTonePreviewButton = _useState2[0],
    setFocusTonePreviewButton = _useState2[1];
  useLayoutEffect(function () {
    if (focusTonePreviewButton && !showToneSelector) {
      var _tonePreviewButtonRef;
      (_tonePreviewButtonRef = tonePreviewButtonRef.current) === null || _tonePreviewButtonRef === void 0 || _tonePreviewButtonRef.focus();
    }
    return function () {
      setFocusTonePreviewButton(false);
    };
  }, [focusTonePreviewButton, showToneSelector]);
  var onToneCloseHandler = function onToneCloseHandler() {
    var onToneClose = props.onToneClose;
    onToneClose();
    setFocusTonePreviewButton(true);
  };
  var onToneSelectedHandler = function onToneSelectedHandler(toneValue) {
    var onToneSelected = props.onToneSelected;
    onToneSelected(toneValue);
    setFocusTonePreviewButton(true);
  };
  if (!toneEmoji) {
    return null;
  }
  var previewToneEmoji = toneEmoji;
  if (selectedTone !== DEFAULT_TONE && previewToneEmoji.skinVariations) {
    previewToneEmoji = previewToneEmoji.skinVariations[selectedTone - 1];
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: emojiToneSelectorContainer
    }, jsx(ToneSelector, {
      emoji: toneEmoji,
      onToneSelected: onToneSelectedHandler,
      onToneClose: onToneCloseHandler,
      selectedTone: selectedTone,
      isVisible: showToneSelector
    }), jsx(TonePreviewButton, {
      ref: tonePreviewButtonRef,
      ariaExpanded: showToneSelector,
      emoji: previewToneEmoji,
      selectOnHover: true,
      onSelected: onToneOpen,
      ariaLabelText: formatMessage(messages.emojiSelectSkinToneButtonAriaLabelText, {
        selectedTone: "".concat(setSkinToneAriaLabelText(previewToneEmoji.name))
      }),
      isVisible: !showToneSelector
    }))
  );
};
export var EmojiActions = function EmojiActions(props) {
  var onToneSelected = props.onToneSelected,
    onToneSelectorCancelled = props.onToneSelectorCancelled,
    initialUploadName = props.initialUploadName,
    onUploadCancelled = props.onUploadCancelled,
    onCloseDelete = props.onCloseDelete,
    onDeleteEmoji = props.onDeleteEmoji,
    onUploadEmoji = props.onUploadEmoji,
    uploadErrorMessage = props.uploadErrorMessage,
    uploading = props.uploading,
    onFileChooserClicked = props.onFileChooserClicked,
    emojiToDelete = props.emojiToDelete,
    onChange = props.onChange,
    query = props.query,
    _props$resultsCount = props.resultsCount,
    resultsCount = _props$resultsCount === void 0 ? 0 : _props$resultsCount;
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showToneSelector = _useState4[0],
    setShowToneSelector = _useState4[1];
  var previewFooterClassnames = [emojiPickerFooter, emojiActionsContainerWithBottomShadow];
  var onToneOpenHandler = function onToneOpenHandler() {
    return setShowToneSelector(true);
  };
  var onToneCloseHandler = function onToneCloseHandler() {
    return setShowToneSelector(false);
  };
  var onToneSelectedHandler = function onToneSelectedHandler(toneValue) {
    setShowToneSelector(false);
    if (onToneSelected) {
      onToneSelected(toneValue);
    }
  };
  var onMouseLeaveHandler = function onMouseLeaveHandler() {
    if (showToneSelector && onToneSelectorCancelled) {
      onToneSelectorCancelled();
    }
    setShowToneSelector(false);
  };
  if (uploading) {
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      jsx("div", {
        css: previewFooterClassnames
      }, jsx(EmojiUploadPicker, {
        onUploadCancelled: onUploadCancelled,
        onUploadEmoji: onUploadEmoji,
        onFileChooserClicked: onFileChooserClicked,
        errorMessage: uploadErrorMessage,
        initialUploadName: initialUploadName
      }))
    );
  }
  if (emojiToDelete) {
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      jsx("div", {
        css: previewFooterClassnames
      }, jsx(EmojiDeletePreview, {
        emoji: emojiToDelete,
        onDeleteEmoji: onDeleteEmoji,
        onCloseDelete: onCloseDelete
      }))
    );
  }
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    jsx("div", {
      "data-testid": emojiActionsTestId
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      ,
      css: previewFooterClassnames,
      onMouseLeave: onMouseLeaveHandler
    }, jsx("div", {
      css: emojiActionsWrapper
    }, jsx(EmojiPickerListSearch, {
      onChange: onChange,
      query: query,
      resultsCount: resultsCount,
      isVisible: !showToneSelector
    }), jsx(TonesWrapper, _extends({}, props, {
      onToneOpen: onToneOpenHandler,
      onToneClose: onToneCloseHandler,
      onToneSelected: onToneSelectedHandler,
      showToneSelector: showToneSelector
    }))), jsx(AddOwnEmoji, props))
  );
};
export default injectIntl( /*#__PURE__*/memo(EmojiActions));