"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testIds = exports.LinkSearchListItemOld = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _primitives = require("@atlaskit/primitives");
var _transformTimeStamp = require("../../../../transformTimeStamp");
var _styled = require("./styled");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

/* eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports */

var testIds = exports.testIds = {
  searchResultItem: 'link-search-list-item',
  searchResultIcon: 'link-search-list-item-icon'
};
var isSVG = function isSVG(icon) {
  return icon.startsWith('<svg') && icon.endsWith('</svg>');
};
var base64SVG = function base64SVG(icon) {
  return "data:image/svg+xml;base64,".concat(Buffer.from(icon).toString('base64'));
};
var ListItemIcon = function ListItemIcon(props) {
  var item = props.item,
    intl = props.intl;
  var icon = item.icon,
    iconAlt = item.iconAlt;
  if (!icon) {
    return null;
  }
  var alt = typeof iconAlt === 'string' ? iconAlt : intl.formatMessage(iconAlt);
  if (typeof icon !== 'string') {
    var Glyph = icon;
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      (0, _react2.jsx)("span", {
        css: _styled.itemIconStyles
      }, (0, _react2.jsx)(Glyph, {
        alt: alt,
        "data-testid": testIds.searchResultIcon
      }))
    );
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("span", {
      css: _styled.itemIconStyles
    }, (0, _react2.jsx)("img", {
      "data-testid": testIds.searchResultIcon,
      src: isSVG(icon) ? base64SVG(icon) : icon,
      alt: alt
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: _styled.imgStyles
    }))
  );
};
var ListItemSubtitle = function ListItemSubtitle(_ref) {
  var _ref$items = (0, _slicedToArray2.default)(_ref.items, 2),
    firstItem = _ref$items[0],
    secondItem = _ref$items[1];
  return /* eslint-disable @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766 */(
    (0, _react2.jsx)("div", {
      "data-testid": "".concat(testIds.searchResultItem, "-subtitle"),
      css: _styled.listItemContextStyles
    }, (0, _react2.jsx)("div", {
      css: _styled.listItemContainerStyles
    }, (0, _react2.jsx)("span", {
      css: _styled.listItemContainerInnerStyles
    }, firstItem)), secondItem && (0, _react2.jsx)("div", {
      css: _styled.listItemContainerInnerStyles
    }, (0, _react2.jsx)(_react.Fragment, null, "\xA0 \u2022\xA0 "), (0, _react2.jsx)(_react.Fragment, null, secondItem)))
  );
  /* eslint-enable @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766 */
};
var getDefaultSubtitleItems = function getDefaultSubtitleItems(item, intl) {
  var container = item.container;
  var date = (0, _transformTimeStamp.transformTimeStamp)(intl, item.lastViewedDate, item.lastUpdatedDate);
  if (container) {
    if (date) {
      return [container, date];
    }
    return [container];
  }
  if (date) {
    return [date];
  }
  return undefined;
};
var LinkSearchListItemOld = exports.LinkSearchListItemOld = /*#__PURE__*/(0, _react.forwardRef)(function (_ref2, ref) {
  var item = _ref2.item,
    selected = _ref2.selected,
    id = _ref2.id,
    role = _ref2.role,
    onSelect = _ref2.onSelect,
    tabIndex = _ref2.tabIndex,
    onKeyDown = _ref2.onKeyDown,
    onFocus = _ref2.onFocus,
    _ref2$nameMaxLines = _ref2.nameMaxLines,
    nameMaxLines = _ref2$nameMaxLines === void 0 ? 1 : _ref2$nameMaxLines;
  var intl = (0, _reactIntlNext.useIntl)();
  var handleSelect = function handleSelect() {
    return onSelect(item.objectId);
  };
  var subtitleItems = item.subtitleItems || getDefaultSubtitleItems(item, intl);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _react2.jsx)("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css: (0, _styled.composeListItemStyles)(selected),
      role: role,
      id: id,
      "aria-selected": selected,
      "data-testid": testIds.searchResultItem,
      onKeyDown: onKeyDown,
      onClick: handleSelect,
      onFocus: onFocus,
      tabIndex: tabIndex,
      ref: ref
    }, (0, _react2.jsx)(ListItemIcon, {
      item: item,
      intl: intl
    }), (0, _react2.jsx)("div", {
      css: _styled.itemNameStyles
    }, (0, _react2.jsx)(_primitives.Text, {
      maxLines: nameMaxLines
    }, (0, _react2.jsx)("span", {
      "data-testid": "".concat(testIds.searchResultItem, "-title"),
      title: item.name
    }, item.name)), subtitleItems && (0, _react2.jsx)(ListItemSubtitle, {
      items: subtitleItems
    })))
  );
});