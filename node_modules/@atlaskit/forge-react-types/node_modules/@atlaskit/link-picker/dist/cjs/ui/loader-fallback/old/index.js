"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoaderFallbackOld = void 0;
var _react = require("@emotion/react");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _minHeightContainer = require("../../../common/ui/min-height-container");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var styles = (0, _react.css)({
  alignItems: 'center'
});
var LINK_PICKER_MIN_HEIGHT_IN_PX_WITH_TABS_WITHOUT_DISPLAYTEXT = '472px';
var LINK_PICKER_MIN_HEIGHT_IN_PX_WITH_TABS_WITH_DISPLAYTEXT = '550px';
var LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITH_PLUGIN_WITH_DISPLAYTEXT = '505px';
var LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITH_PLUGIN_WITHOUT_DISPLAYTEXT = '429px';
var LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITH_DISPLAYTEXT = '218px';
var LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITHOUT_DISPLAYTEXT = '141px';
var getEstimatedMinHeight = function getEstimatedMinHeight(_ref) {
  var hideDisplayText = _ref.hideDisplayText,
    isLoadingPlugins = _ref.isLoadingPlugins,
    plugins = _ref.plugins,
    url = _ref.url;
  /**
   * "Insert mode" (search results shown initially)
   */
  if (!url) {
    /**
     * With tabs
     */
    if (plugins && plugins.length > 1 || isLoadingPlugins) {
      return hideDisplayText ? LINK_PICKER_MIN_HEIGHT_IN_PX_WITH_TABS_WITHOUT_DISPLAYTEXT : LINK_PICKER_MIN_HEIGHT_IN_PX_WITH_TABS_WITH_DISPLAYTEXT;
    }

    /**
     * Without tabs
     */
    if ((plugins === null || plugins === void 0 ? void 0 : plugins.length) === 1) {
      return hideDisplayText ? LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITH_PLUGIN_WITHOUT_DISPLAYTEXT : LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITH_PLUGIN_WITH_DISPLAYTEXT;
    }
  }
  return hideDisplayText ? LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITHOUT_DISPLAYTEXT : LINK_PICKER_MIN_HEIGHT_IN_PX_WITHOUT_TABS_WITH_DISPLAYTEXT;
};

/**
 * Loader / skeleton for the Link Picker. Takes LoaderFallbackProps (hideDisplayText, isLoadingPlugins, plugins)
 * to determine the height to prevent jumps in height when loading
 */
var LoaderFallbackOld = exports.LoaderFallbackOld = function LoaderFallbackOld(props) {
  var minHeight = getEstimatedMinHeight(props);
  return (0, _react.jsx)(_minHeightContainer.MinHeightContainer, {
    minHeight: minHeight,
    "data-testid": "link-picker-root-loader-boundary-ui",
    css: styles
  }, (0, _react.jsx)(_spinner.default, {
    testId: "link-picker.component-loading-indicator",
    interactionName: props.name || 'link-picker-loading',
    size: "medium"
  }));
};