import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback, useMemo, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { IconButton } from '@atlaskit/button/new';
import ChevronLeftIcon from '@atlaskit/icon/utility/migration/chevron-left';
import ChevronRightIcon from '@atlaskit/icon/utility/migration/chevron-right';
import { calculateConditionalButtons, createGhost, getTabList, scrollBack, scrollForward } from '../scrolling-tabs';
import { backButtonStyles, containerStyles, nextButtonStyles, scrollingContainerStyles } from './styles';
function isTouchDevice() {
  return 'ontouchstart' in window ||
  // eslint-disable-next-line compat/compat
  navigator.maxTouchPoints > 0;
}
var initialConditionalButtonsState = {
  back: false,
  forward: false
};

/* eslint-disable @repo/internal/dom-events/no-unsafe-event-listeners */
export var ScrollingTabListOld = function ScrollingTabListOld(props) {
  var ref = useRef(null);
  var _useState = useState(initialConditionalButtonsState),
    _useState2 = _slicedToArray(_useState, 2),
    conditionalButtons = _useState2[0],
    setConditionalButtons = _useState2[1];
  var ghost = useMemo(function () {
    return createGhost();
  }, []);
  var onTabClick = useCallback(function (e) {
    var target = e.currentTarget;
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline: 'center'
      });
    }
  }, []);
  React.useLayoutEffect(function () {
    var container = ref.current;
    var scrollingContainer;
    var tabs;
    var handleConditionalButtonsChange = function handleConditionalButtonsChange() {
      var buttons = calculateConditionalButtons(scrollingContainer, isTouchDevice());
      setConditionalButtons(buttons);
    };
    var observerCallback = function observerCallback(mutationList) {
      var tablist = getTabList(ref);
      var _iterator = _createForOfIteratorHelper(mutationList),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var mutation = _step.value;
          if (mutation.type === 'childList') {
            var addedNodes = Array.from(mutation.addedNodes);
            var found = addedNodes.find(function (node) {
              return node.getAttribute('role') === 'tab';
            });
            if (found && tablist) {
              ghost.remove();
              var _tabs = Array.from(tablist.children);
              _tabs.forEach(function (tab) {
                tab.removeEventListener('click', onTabClick);
                tab.addEventListener('click', onTabClick);
              });
              tablist.appendChild(ghost);
              handleConditionalButtonsChange();
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };
    var observer = new MutationObserver(observerCallback);
    if (container) {
      var tablist = getTabList(ref);
      scrollingContainer = tablist === null || tablist === void 0 ? void 0 : tablist.parentElement;
      observer.observe(container, {
        attributes: false,
        childList: true,
        subtree: true
      });
      if (scrollingContainer instanceof HTMLElement && tablist) {
        tablist.appendChild(ghost);
        tabs = Array.from(tablist.children);
        tabs.forEach(function (tab) {
          return tab.addEventListener('click', onTabClick);
        });
        handleConditionalButtonsChange();
        scrollingContainer.addEventListener('scroll', handleConditionalButtonsChange);
      }
      return function () {
        if (scrollingContainer) {
          // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
          scrollingContainer.removeEventListener('scroll', handleConditionalButtonsChange);
        }
        if (tabs.length) {
          tabs.forEach(function (tab) {
            return tab.removeEventListener('click', onTabClick);
          });
        }
      };
    }
  }, [onTabClick, ghost, ref]);
  var buttonProps = {
    appearance: 'subtle',
    spacing: 'compact'
  };
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: containerStyles,
      ref: ref,
      "data-testid": "scrolling-tabs"
    }, conditionalButtons.back &&
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      className: "back",
      css: backButtonStyles
    }, jsx(IconButton, _extends({
      "data-test-id": "back",
      onClick: function onClick() {
        return scrollBack(ref);
      },
      label: "back",
      icon: ChevronLeftIcon
    }, buttonProps))), jsx("div", {
      css: scrollingContainerStyles
    }, props.children), conditionalButtons.forward &&
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: nextButtonStyles
    }, jsx(IconButton, _extends({
      "data-test-id": "forward",
      onClick: function onClick() {
        return scrollForward(ref);
      }
    }, buttonProps, {
      label: "forward",
      icon: ChevronRightIcon
    }))))
  );
};