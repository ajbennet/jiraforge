import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["onChange", "onSelect", "onKeyDown", "items", "activeIndex", "selectedIndex", "isLoading", "ariaControls", "ariaLabelledBy", "ariaReadOnly", "role", "id", "hasSearchTerm", "activePlugin", "adaptiveHeight"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef, Fragment, useCallback, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { defineMessages, FormattedMessage } from 'react-intl-next';
import { Box, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { MinHeightContainer } from '../../../../../common/ui/min-height-container';
import { handleNavKeyDown } from '../../../../../common/utils/handleNavKeyDown';
import { NoResults, testIds as noResultsTestIds } from '../link-search-no-results';
import { LinkSearchListItem, testIds as searchResultItemTestIds } from '../list-item';
import { useTrackResultsShown } from '../use-track-results-shown';
import { listContainerStyles, listStyles, listTitleStyles, spinnerContainerStyles } from './styled';
export var messages = defineMessages({
  titleRecentlyViewed: {
    id: 'fabric.linkPicker.listTitle.recentlyViewed',
    defaultMessage: 'Recently Viewed',
    description: 'Describes type of items shown in the list for screen-reader users'
  },
  titleResults: {
    id: 'fabric.linkPicker.listTitle.results',
    defaultMessage: 'Results',
    description: 'Describes type of items shown in the list for screen-reader users'
  },
  searchLinkResults: {
    id: 'fabric.linkPicker.hyperlink.searchLinkResults',
    defaultMessage: '{count, plural, =0 {no results} one {# result} other {# results}} found',
    description: 'Announce search results for screen-reader users.'
  }
});
export var testIds = _objectSpread(_objectSpread(_objectSpread({}, noResultsTestIds), searchResultItemTestIds), {}, {
  resultListTitle: 'link-picker-list-title',
  searchResultList: 'link-search-list',
  searchResultLoadingIndicator: 'link-picker.results-loading-indicator',
  tabsLoadingIndicator: 'link-picker.tabs-loading-indicator'
});
var emptyStateNoResultsWrapper = xcss({
  minHeight: 'space.200'
});
export var LinkSearchListOld = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _activePlugin$uiOptio;
  var onChange = _ref.onChange,
    onSelect = _ref.onSelect,
    onKeyDown = _ref.onKeyDown,
    items = _ref.items,
    activeIndex = _ref.activeIndex,
    selectedIndex = _ref.selectedIndex,
    isLoading = _ref.isLoading,
    ariaControls = _ref.ariaControls,
    ariaLabelledBy = _ref.ariaLabelledBy,
    ariaReadOnly = _ref.ariaReadOnly,
    role = _ref.role,
    id = _ref.id,
    hasSearchTerm = _ref.hasSearchTerm,
    activePlugin = _ref.activePlugin,
    adaptiveHeight = _ref.adaptiveHeight,
    restProps = _objectWithoutProperties(_ref, _excluded);
  var itemsContent;
  var loadingContent;
  var linkListTitle = hasSearchTerm ? messages.titleResults : messages.titleRecentlyViewed;
  useTrackResultsShown(isLoading, items, hasSearchTerm);
  var itemRefs = useRef({});
  var itemRefCallback = useCallback(function (el, id) {
    if (el === null) {
      delete itemRefs.current[id];
    } else {
      itemRefs.current[id] = el;
    }
  }, []);
  var getTabIndex = useCallback(function (index) {
    if (selectedIndex > -1) {
      return selectedIndex === index ? 0 : -1;
    }
    if (index === 0) {
      return 0;
    }
    return -1;
  }, [selectedIndex]);
  var handleKeyDown = useCallback(function (event) {
    var updatedIndex = activeIndex;
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (!(items !== null && items !== void 0 && items.length)) {
      return;
    }
    updatedIndex = handleNavKeyDown(event, items.length, activeIndex);
    var item = items === null || items === void 0 ? void 0 : items[updatedIndex];
    if (['ArrowDown', 'ArrowUp', 'Home', 'End'].includes(event.key) && item) {
      if (itemRefs.current) {
        var _itemRefs$current$ite;
        (_itemRefs$current$ite = itemRefs.current[item.objectId]) === null || _itemRefs$current$ite === void 0 || _itemRefs$current$ite.focus();
      }
    }
  }, [activeIndex, items, onKeyDown]);
  if ((items === null || items === void 0 ? void 0 : items.length) === 0) {
    if (!hasSearchTerm) {
      var _activePlugin$emptySt;
      var emptyState = activePlugin === null || activePlugin === void 0 || (_activePlugin$emptySt = activePlugin.emptyStateNoResults) === null || _activePlugin$emptySt === void 0 ? void 0 : _activePlugin$emptySt.call(activePlugin);
      if (emptyState) {
        return jsx(Box, {
          xcss: emptyStateNoResultsWrapper
        }, emptyState);
      }
    }
    return jsx(NoResults, null);
  }
  var listItemNameMaxLines = activePlugin === null || activePlugin === void 0 || (_activePlugin$uiOptio = activePlugin.uiOptions) === null || _activePlugin$uiOptio === void 0 ? void 0 : _activePlugin$uiOptio.listItemNameMaxLines;
  if (items && items.length > 0) {
    itemsContent = jsx(Fragment, null, jsx("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css: listTitleStyles,
      id: testIds.resultListTitle,
      "data-testid": testIds.resultListTitle
    }, jsx(FormattedMessage, linkListTitle)), jsx(VisuallyHidden, {
      id: "fabric.smartcard.linkpicker.suggested.results"
    }, hasSearchTerm && jsx(FormattedMessage, _extends({}, messages.searchLinkResults, {
      values: {
        count: items.length
      },
      "aria-live": "polite",
      "aria-atomic": "true"
    }))), jsx("ul", {
      id: id,
      role: role
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      ,
      css: listStyles,
      "aria-controls": "fabric.smartcard.linkpicker.suggested.results",
      "aria-labelledby": testIds.resultListTitle,
      "aria-readonly": ariaReadOnly,
      "data-testid": testIds.searchResultList
    }, items.map(function (item, index) {
      return jsx(LinkSearchListItem, {
        id: "".concat(testIds.searchResultItem, "-").concat(index),
        role: role && 'option',
        item: item,
        selected: selectedIndex === index,
        active: activeIndex === index,
        onFocus: function onFocus() {
          return onChange(item.objectId);
        },
        onKeyDown: handleKeyDown,
        onSelect: onSelect,
        key: item.objectId,
        tabIndex: getTabIndex(index),
        ref: function ref(el) {
          return itemRefCallback(el, item.objectId);
        },
        nameMaxLines: listItemNameMaxLines
      });
    })));
  }
  if (isLoading) {
    loadingContent = jsx(MinHeightContainer, {
      minHeight: adaptiveHeight ? '80px' : '50px'
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      ,
      css: spinnerContainerStyles
    }, jsx(Spinner, {
      testId: testIds.searchResultLoadingIndicator,
      interactionName: "link-picker-search-list-loading",
      size: "medium"
    }));
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", _extends({
      ref: ref,
      css: listContainerStyles
    }, restProps), itemsContent, loadingContent)
  );
});