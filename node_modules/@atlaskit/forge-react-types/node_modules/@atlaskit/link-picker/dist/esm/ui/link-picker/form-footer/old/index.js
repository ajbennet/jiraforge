import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["isLoading", "isSubmitting", "error", "url", "queryState", "items", "isEditing", "onCancel", "action", "customSubmitButtonLabel", "submitMessageId", "hideSubmitButton"];
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { memo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { defineMessages, useIntl } from 'react-intl-next';
import Button, { ButtonGroup } from '@atlaskit/button';
import EditorAddIconLegacy from '@atlaskit/icon/glyph/editor/add';
import EditorAddIcon from '@atlaskit/icon/utility/add';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { UnauthenticatedError } from '../../../../common/utils/errors';
import { LinkPickerSubmitButton } from '../link-picker-submit-button';
var formFooterStyles = css({
  display: 'flex',
  justifyContent: 'flex-end'
});
var formFooterActionStyles = css({
  marginRight: 'auto'
});
export var messages = defineMessages({
  cancelButton: {
    id: 'fabric.linkPicker.button.cancel',
    defaultMessage: 'Cancel',
    description: 'Button to cancel and dismiss the link picker'
  },
  submittingStatusMessage: {
    id: 'fabric.linkPicker.status.submitting',
    defaultMessage: 'Submitting',
    description: 'Accessibility text to indicate the form has been submitted, and submission is in-progress'
  }
});
export var testIds = {
  insertButton: 'link-picker-insert-button',
  cancelButton: 'link-picker-cancel-button',
  actionButton: 'link-picker-action-button',
  submitStatusA11yIndicator: 'link-picker-submit-status-a11y-indicator',
  /** Feature discovery for action button (css pulse) */
  actionButtonDiscovery: 'link-picker-action-button-discovery'
};
export var FormFooterOld = /*#__PURE__*/memo(function (_ref) {
  var isLoading = _ref.isLoading,
    _ref$isSubmitting = _ref.isSubmitting,
    isSubmitting = _ref$isSubmitting === void 0 ? false : _ref$isSubmitting,
    error = _ref.error,
    url = _ref.url,
    queryState = _ref.queryState,
    items = _ref.items,
    isEditing = _ref.isEditing,
    onCancel = _ref.onCancel,
    action = _ref.action,
    customSubmitButtonLabel = _ref.customSubmitButtonLabel,
    submitMessageId = _ref.submitMessageId,
    hideSubmitButton = _ref.hideSubmitButton,
    restProps = _objectWithoutProperties(_ref, _excluded);
  var intl = useIntl();
  if (error && error instanceof UnauthenticatedError) {
    return null;
  }
  var createButton = function createButton(pluginAction) {
    return jsx(Button, {
      testId: testIds.actionButton,
      onClick: pluginAction.callback,
      appearance: "default",
      iconBefore: jsx(EditorAddIcon, {
        label: "",
        LEGACY_size: "medium",
        LEGACY_fallbackIcon: EditorAddIconLegacy,
        color: "currentColor"
      }),
      isDisabled: isSubmitting,
      "aria-labelledby": isSubmitting ? submitMessageId : undefined
    }, typeof pluginAction.label === 'string' ? pluginAction.label : intl.formatMessage(pluginAction.label));
  };
  return jsx("footer", _extends({
    css: formFooterStyles
  }, restProps), isSubmitting && jsx(VisuallyHidden, {
    role: "status",
    id: submitMessageId,
    testId: testIds.submitStatusA11yIndicator
  }, intl.formatMessage(messages.submittingStatusMessage)), action && jsx("div", {
    css: formFooterActionStyles
  }, createButton(action)), jsx(ButtonGroup, null, onCancel && jsx(Button, {
    appearance: "subtle",
    onClick: onCancel,
    testId: testIds.cancelButton,
    isDisabled: isSubmitting,
    "aria-labelledby": isSubmitting ? submitMessageId : undefined
  }, intl.formatMessage(messages.cancelButton)), !hideSubmitButton && jsx(LinkPickerSubmitButton, {
    isEditing: isEditing,
    isLoading: isLoading,
    isSubmitting: isSubmitting,
    customSubmitButtonLabel: customSubmitButtonLabel,
    error: error,
    items: items,
    queryState: queryState,
    submitMessageId: submitMessageId,
    testId: testIds.insertButton,
    url: url
  })));
});