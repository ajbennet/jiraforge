import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["name", "label", "autoFocus", "onRedo", "onUndo", "onKeyDown", "onClear", "clearLabel", "error", "spotlightTargetName"];
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment, useCallback, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { ErrorMessage, Field } from '@atlaskit/form';
import Selectclear from '@atlaskit/icon/core/migration/cross-circle--select-clear';
import { Pressable, xcss } from '@atlaskit/primitives';
import Textfield from '@atlaskit/textfield';
import Tooltip from '@atlaskit/tooltip';
import { ConditionalSpotlightTargetWrapper } from '../conditional-spotlight-target-wrapper';
import { isRedoEvent, isUndoEvent } from '../utils';

/**
 * Overidding text input margin top which design system provides as a default spacer
 * but it gets in the way of our layout
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var fieldStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> div': {
    marginTop: 0
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '& + &': {
    marginTop: "var(--ds-space-200, 16px)"
  }
});
export var testIds = {
  urlError: 'link-error',
  clearUrlButton: 'clear-text'
};
var clearTextButtonStyles = xcss({
  padding: 'space.0',
  marginRight: 'space.050',
  backgroundColor: 'color.background.neutral.subtle',
  border: 'none',
  verticalAlign: 'middle'
});
export var TextInputOld = function TextInputOld(_ref) {
  var name = _ref.name,
    label = _ref.label,
    autoFocus = _ref.autoFocus,
    onRedo = _ref.onRedo,
    onUndo = _ref.onUndo,
    onKeyDown = _ref.onKeyDown,
    onClear = _ref.onClear,
    clearLabel = _ref.clearLabel,
    error = _ref.error,
    spotlightTargetName = _ref.spotlightTargetName,
    restProps = _objectWithoutProperties(_ref, _excluded);
  var inputRef = useRef(null);
  var handleRef = useCallback(function (input) {
    if (input) {
      inputRef.current = input;
      if (autoFocus) {
        // Need this to prevent jumping when we render TextInput inside Portal @see ED-2992
        input.focus({
          preventScroll: true
        });
      }
    }
  }, [autoFocus]);
  var handleKeydown = useCallback(function (e) {
    if (typeof onUndo === 'function' && isUndoEvent(e)) {
      e.preventDefault();
      onUndo();
    } else if (typeof onRedo === 'function' && isRedoEvent(e)) {
      e.preventDefault();
      onRedo();
    }
    if (onKeyDown) {
      onKeyDown(e);
    }
  }, [onUndo, onRedo, onKeyDown]);
  var handleClear = useCallback(function (e) {
    var _inputRef$current;
    e.preventDefault();
    e.stopPropagation();
    onClear === null || onClear === void 0 || onClear(name);
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
  }, [name, onClear]);
  var clearText = restProps.value !== '' && jsx(Tooltip, {
    content: clearLabel
  }, jsx(Pressable, {
    xcss: clearTextButtonStyles,
    onClick: handleClear,
    testId: testIds.clearUrlButton
  }, jsx(Selectclear, {
    LEGACY_size: "medium",
    label: clearLabel || '',
    color: "var(--ds-icon-subtle, #626F86)",
    spacing: "spacious"
  })));
  return jsx("div", {
    css: fieldStyles
  }, jsx(Field, {
    label: label,
    name: name
  }, function (_ref2) {
    var fieldProps = _ref2.fieldProps;
    return jsx(ConditionalSpotlightTargetWrapper, {
      spotlightTargetName: spotlightTargetName
    }, jsx(Fragment, null, jsx(Textfield, _extends({}, fieldProps, restProps, {
      onKeyDown: handleKeydown,
      ref: handleRef,
      elemAfterInput: clearText,
      isInvalid: !!error
    })), error && jsx(ErrorMessage, {
      testId: testIds.urlError
    }, error)));
  }));
};