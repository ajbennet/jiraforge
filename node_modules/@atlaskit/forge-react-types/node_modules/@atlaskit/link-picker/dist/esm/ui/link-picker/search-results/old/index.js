import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { Box, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner/spinner';
import Tabs, { Tab, TabList } from '@atlaskit/tabs';
import { LinkSearchError, testIds as searchErrorTestIds } from '../link-search-error';
import { LinkSearchList, testIds as listTestIds } from '../link-search-list';
import { ScrollingTabList } from '../scrolling-tabs';
import { SearchResultsContainer } from '../search-results-container';
import { TrackTabViewed } from '../track-tab-viewed';
var tabsWrapperStyles = xcss({
  marginTop: 'space.150'
});
var spinnerContainerStyles = css({
  minHeight: '80px',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  alignSelf: 'center',
  flexGrow: 1
});
export var testIds = _objectSpread(_objectSpread(_objectSpread({}, searchErrorTestIds), listTestIds), {}, {
  tabsLoadingIndicator: 'link-picker.tabs-loading-indicator',
  tabList: 'link-picker-tabs',
  tabItem: 'link-picker-tab'
});
export var SearchResultsOld = function SearchResultsOld(_ref) {
  var _activePlugin$errorFa, _activePlugin$errorFa2;
  var tabs = _ref.tabs,
    activeTab = _ref.activeTab,
    activePlugin = _ref.activePlugin,
    isLoadingPlugins = _ref.isLoadingPlugins,
    isLoadingResults = _ref.isLoadingResults,
    isSubmitting = _ref.isSubmitting,
    handleTabChange = _ref.handleTabChange,
    handleSearchListOnChange = _ref.handleSearchListOnChange,
    featureFlags = _ref.featureFlags,
    linkSearchListId = _ref.linkSearchListId,
    error = _ref.error,
    queryState = _ref.queryState,
    items = _ref.items,
    activeIndex = _ref.activeIndex,
    selectedIndex = _ref.selectedIndex,
    handleSelected = _ref.handleSelected,
    handleKeyDown = _ref.handleKeyDown,
    adaptiveHeight = _ref.adaptiveHeight,
    retry = _ref.retry;
  var isActivePlugin = !!activePlugin;
  var tabList = jsx(TabList, null, tabs.map(function (tab) {
    return jsx(Tab, {
      key: tab.tabTitle,
      testId: testIds.tabItem
    }, tab.tabTitle);
  }));
  return jsx(SearchResultsContainer, {
    hasTabs: !!tabs.length || isLoadingPlugins,
    adaptiveHeight: adaptiveHeight,
    isLoadingResults: isLoadingResults
  }, isLoadingPlugins && !!queryState && jsx("div", {
    css: spinnerContainerStyles
  }, jsx(Spinner, {
    testId: testIds.tabsLoadingIndicator,
    interactionName: "link-picker-tabs-loading",
    size: "medium"
  })), !isLoadingPlugins && isActivePlugin && !!queryState && jsx(Fragment, null, tabs.length > 0 && jsx(Box, {
    xcss: tabsWrapperStyles
  }, jsx(Tabs, {
    id: testIds.tabList,
    testId: testIds.tabList,
    selected: activeTab,
    onChange: handleTabChange
  }, featureFlags !== null && featureFlags !== void 0 && featureFlags.scrollingTabs ? jsx(ScrollingTabList, null, tabList) : tabList), jsx(TrackTabViewed, {
    activePlugin: activePlugin
  })), !error && jsx(LinkSearchList, {
    id: linkSearchListId,
    role: "listbox",
    ariaReadOnly: isSubmitting,
    items: items,
    isLoading: isLoadingResults,
    selectedIndex: selectedIndex,
    activeIndex: activeIndex,
    onSelect: handleSelected,
    onChange: handleSearchListOnChange,
    onKeyDown: handleKeyDown,
    hasSearchTerm: !!(queryState !== null && queryState !== void 0 && queryState.query.length),
    activePlugin: activePlugin,
    adaptiveHeight: adaptiveHeight
  }), error ? (_activePlugin$errorFa = activePlugin === null || activePlugin === void 0 || (_activePlugin$errorFa2 = activePlugin.errorFallback) === null || _activePlugin$errorFa2 === void 0 ? void 0 : _activePlugin$errorFa2.call(activePlugin, error, retry)) !== null && _activePlugin$errorFa !== void 0 ? _activePlugin$errorFa : jsx(LinkSearchError, null) : null));
};