import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef, Fragment, useCallback, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { defineMessages, FormattedMessage } from 'react-intl-next';
import { Box, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { MinHeightContainer } from '../../../../../common/ui/min-height-container';
import { handleNavKeyDown } from '../../../../../common/utils/handleNavKeyDown';
import { NoResults, testIds as noResultsTestIds } from '../link-search-no-results';
import { LinkSearchListItem, testIds as searchResultItemTestIds } from '../list-item';
import { useTrackResultsShown } from '../use-track-results-shown';
import { listContainerStyles, listStyles, listTitleStyles, spinnerContainerStyles } from './styled';
export const messages = defineMessages({
  titleRecentlyViewed: {
    id: 'fabric.linkPicker.listTitle.recentlyViewed',
    defaultMessage: 'Recently Viewed',
    description: 'Describes type of items shown in the list for screen-reader users'
  },
  titleResults: {
    id: 'fabric.linkPicker.listTitle.results',
    defaultMessage: 'Results',
    description: 'Describes type of items shown in the list for screen-reader users'
  },
  searchLinkResults: {
    id: 'fabric.linkPicker.hyperlink.searchLinkResults',
    defaultMessage: '{count, plural, =0 {no results} one {# result} other {# results}} found',
    description: 'Announce search results for screen-reader users.'
  }
});
export const testIds = {
  ...noResultsTestIds,
  ...searchResultItemTestIds,
  resultListTitle: 'link-picker-list-title',
  searchResultList: 'link-search-list',
  searchResultLoadingIndicator: 'link-picker.results-loading-indicator',
  tabsLoadingIndicator: 'link-picker.tabs-loading-indicator'
};
const emptyStateNoResultsWrapper = xcss({
  minHeight: 'space.200'
});
export const LinkSearchListOld = /*#__PURE__*/forwardRef(({
  onChange,
  onSelect,
  onKeyDown,
  items,
  activeIndex,
  selectedIndex,
  isLoading,
  ariaControls,
  ariaLabelledBy,
  ariaReadOnly,
  role,
  id,
  hasSearchTerm,
  activePlugin,
  adaptiveHeight,
  ...restProps
}, ref) => {
  var _activePlugin$uiOptio;
  let itemsContent;
  let loadingContent;
  const linkListTitle = hasSearchTerm ? messages.titleResults : messages.titleRecentlyViewed;
  useTrackResultsShown(isLoading, items, hasSearchTerm);
  const itemRefs = useRef({});
  const itemRefCallback = useCallback((el, id) => {
    if (el === null) {
      delete itemRefs.current[id];
    } else {
      itemRefs.current[id] = el;
    }
  }, []);
  const getTabIndex = useCallback(index => {
    if (selectedIndex > -1) {
      return selectedIndex === index ? 0 : -1;
    }
    if (index === 0) {
      return 0;
    }
    return -1;
  }, [selectedIndex]);
  const handleKeyDown = useCallback(event => {
    let updatedIndex = activeIndex;
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (!(items !== null && items !== void 0 && items.length)) {
      return;
    }
    updatedIndex = handleNavKeyDown(event, items.length, activeIndex);
    const item = items === null || items === void 0 ? void 0 : items[updatedIndex];
    if (['ArrowDown', 'ArrowUp', 'Home', 'End'].includes(event.key) && item) {
      if (itemRefs.current) {
        var _itemRefs$current$ite;
        (_itemRefs$current$ite = itemRefs.current[item.objectId]) === null || _itemRefs$current$ite === void 0 ? void 0 : _itemRefs$current$ite.focus();
      }
    }
  }, [activeIndex, items, onKeyDown]);
  if ((items === null || items === void 0 ? void 0 : items.length) === 0) {
    if (!hasSearchTerm) {
      var _activePlugin$emptySt;
      const emptyState = activePlugin === null || activePlugin === void 0 ? void 0 : (_activePlugin$emptySt = activePlugin.emptyStateNoResults) === null || _activePlugin$emptySt === void 0 ? void 0 : _activePlugin$emptySt.call(activePlugin);
      if (emptyState) {
        return jsx(Box, {
          xcss: emptyStateNoResultsWrapper
        }, emptyState);
      }
    }
    return jsx(NoResults, null);
  }
  const listItemNameMaxLines = activePlugin === null || activePlugin === void 0 ? void 0 : (_activePlugin$uiOptio = activePlugin.uiOptions) === null || _activePlugin$uiOptio === void 0 ? void 0 : _activePlugin$uiOptio.listItemNameMaxLines;
  if (items && items.length > 0) {
    itemsContent = jsx(Fragment, null, jsx("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css: listTitleStyles,
      id: testIds.resultListTitle,
      "data-testid": testIds.resultListTitle
    }, jsx(FormattedMessage, linkListTitle)), jsx(VisuallyHidden, {
      id: "fabric.smartcard.linkpicker.suggested.results"
    }, hasSearchTerm && jsx(FormattedMessage, _extends({}, messages.searchLinkResults, {
      values: {
        count: items.length
      },
      "aria-live": "polite",
      "aria-atomic": "true"
    }))), jsx("ul", {
      id: id,
      role: role
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      ,
      css: listStyles,
      "aria-controls": "fabric.smartcard.linkpicker.suggested.results",
      "aria-labelledby": testIds.resultListTitle,
      "aria-readonly": ariaReadOnly,
      "data-testid": testIds.searchResultList
    }, items.map((item, index) => jsx(LinkSearchListItem, {
      id: `${testIds.searchResultItem}-${index}`,
      role: role && 'option',
      item: item,
      selected: selectedIndex === index,
      active: activeIndex === index,
      onFocus: () => onChange(item.objectId),
      onKeyDown: handleKeyDown,
      onSelect: onSelect,
      key: item.objectId,
      tabIndex: getTabIndex(index),
      ref: el => itemRefCallback(el, item.objectId),
      nameMaxLines: listItemNameMaxLines
    }))));
  }
  if (isLoading) {
    loadingContent = jsx(MinHeightContainer, {
      minHeight: adaptiveHeight ? '80px' : '50px'
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      ,
      css: spinnerContainerStyles
    }, jsx(Spinner, {
      testId: testIds.searchResultLoadingIndicator,
      interactionName: "link-picker-search-list-loading",
      size: "medium"
    }));
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", _extends({
      ref: ref,
      css: listContainerStyles
    }, restProps), itemsContent, loadingContent)
  );
});