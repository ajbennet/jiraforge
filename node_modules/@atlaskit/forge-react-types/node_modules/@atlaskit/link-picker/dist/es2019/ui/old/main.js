import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @atlassian/tangerine/import/no-parent-imports */

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { memo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { LazySuspense } from 'react-loosely-lazy';
import { AnalyticsContext } from '@atlaskit/analytics-next';
import { COMPONENT_NAME, LINK_PICKER_WIDTH_IN_PX } from '../../common/constants';
import { LinkPickerSessionProvider } from '../../controllers/session-provider';
import { ErrorBoundary } from '../error-boundary';
import { LoaderFallback } from '../loader-fallback';
import { MessagesProvider } from '../messages-provider';
export const testIds = {
  linkPickerRoot: 'link-picker-root'
};
export const PACKAGE_DATA = {
  packageName: "@atlaskit/link-picker" || '',
  packageVersion: "1.50.0" || '',
  componentName: COMPONENT_NAME,
  source: COMPONENT_NAME
};
const DefaultRootComponent = ({
  children
}) => {
  return jsx("div", {
    "data-testid": testIds.linkPickerRoot
  }, children);
};
const fixedWidthContainerStyles = css({
  width: 'var(--link-picker-width)'
});
const FixedWidthContainer = props => {
  return jsx("div", _extends({
    css: fixedWidthContainerStyles
  }, props));
};
export const composeLinkPickerOld = Component => {
  return /*#__PURE__*/memo(props => {
    var _props$paddingLeft, _props$paddingRight, _props$paddingTop, _props$paddingBottom;
    const {
      component
    } = props;
    const RootComponent = component !== null && component !== void 0 ? component : DefaultRootComponent;
    return jsx(AnalyticsContext, {
      data: PACKAGE_DATA
    }, jsx(LinkPickerSessionProvider, null, jsx(MessagesProvider, null, jsx("div", {
      style: {
        ['--link-picker-width']: props.disableWidth ? '100%' :
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        `${LINK_PICKER_WIDTH_IN_PX}px`,
        ['--link-picker-padding-left']: (_props$paddingLeft = props.paddingLeft) !== null && _props$paddingLeft !== void 0 ? _props$paddingLeft : "var(--ds-space-200, 16px)",
        ['--link-picker-padding-right']: (_props$paddingRight = props.paddingRight) !== null && _props$paddingRight !== void 0 ? _props$paddingRight : "var(--ds-space-200, 16px)",
        ['--link-picker-padding-top']: (_props$paddingTop = props.paddingTop) !== null && _props$paddingTop !== void 0 ? _props$paddingTop : "var(--ds-space-200, 16px)",
        ['--link-picker-padding-bottom']: (_props$paddingBottom = props.paddingBottom) !== null && _props$paddingBottom !== void 0 ? _props$paddingBottom : "var(--ds-space-200, 16px)"
      }
    }, jsx(FixedWidthContainer, null, jsx(ErrorBoundary, null, jsx(LazySuspense, {
      fallback: jsx(LoaderFallback, {
        url: props.url,
        hideDisplayText: props.hideDisplayText,
        isLoadingPlugins: props.isLoadingPlugins,
        plugins: props.plugins
      })
    }, jsx(RootComponent, _extends({}, props, {
      "data-testid": testIds.linkPickerRoot
    }), jsx(Component, props)))))))));
  });
};