/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { memo } from 'react';
import { defineMessages, useIntl } from 'react-intl-next';
import Button, { ButtonGroup } from '@atlaskit/button';
import EditorAddIconLegacy from '@atlaskit/icon/glyph/editor/add';
import EditorAddIcon from '@atlaskit/icon/utility/add';
import { fg } from '@atlaskit/platform-feature-flags';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { UnauthenticatedError } from '../../../common/utils/errors';
import { LinkPickerSubmitButton } from './link-picker-submit-button';
import { FormFooterOld } from './old';
const formFooterStyles = null;
const formFooterActionStyles = null;
export const messages = defineMessages({
  cancelButton: {
    id: 'fabric.linkPicker.button.cancel',
    defaultMessage: 'Cancel',
    description: 'Button to cancel and dismiss the link picker'
  },
  submittingStatusMessage: {
    id: 'fabric.linkPicker.status.submitting',
    defaultMessage: 'Submitting',
    description: 'Accessibility text to indicate the form has been submitted, and submission is in-progress'
  }
});
export const testIds = {
  insertButton: 'link-picker-insert-button',
  cancelButton: 'link-picker-cancel-button',
  actionButton: 'link-picker-action-button',
  submitStatusA11yIndicator: 'link-picker-submit-status-a11y-indicator'
};
export const FormFooterNew = /*#__PURE__*/memo(({
  isLoading,
  isSubmitting = false,
  error,
  url,
  queryState,
  items,
  isEditing,
  onCancel,
  action,
  customSubmitButtonLabel,
  submitMessageId,
  hideSubmitButton,
  className,
  ...restProps
}) => {
  const intl = useIntl();
  if (error && error instanceof UnauthenticatedError) {
    return null;
  }
  const createButton = pluginAction => /*#__PURE__*/React.createElement(Button, {
    testId: testIds.actionButton,
    onClick: pluginAction.callback,
    appearance: "default",
    iconBefore: /*#__PURE__*/React.createElement(EditorAddIcon, {
      label: "",
      LEGACY_size: "medium",
      LEGACY_fallbackIcon: EditorAddIconLegacy,
      color: "currentColor"
    }),
    isDisabled: isSubmitting,
    "aria-labelledby": isSubmitting ? submitMessageId : undefined
  }, typeof pluginAction.label === 'string' ? pluginAction.label : intl.formatMessage(pluginAction.label));
  return /*#__PURE__*/React.createElement("footer", _extends({
    className: ax(["_1e0c1txw _1bahesu3", className])
  }, restProps), isSubmitting && /*#__PURE__*/React.createElement(VisuallyHidden, {
    role: "status",
    id: submitMessageId,
    testId: testIds.submitStatusA11yIndicator
  }, intl.formatMessage(messages.submittingStatusMessage)), action && /*#__PURE__*/React.createElement("div", {
    className: ax(["_2hwx1wug"])
  }, createButton(action)), /*#__PURE__*/React.createElement(ButtonGroup, null, onCancel && /*#__PURE__*/React.createElement(Button, {
    appearance: "subtle",
    onClick: onCancel,
    testId: testIds.cancelButton,
    isDisabled: isSubmitting,
    "aria-labelledby": isSubmitting ? submitMessageId : undefined
  }, intl.formatMessage(messages.cancelButton)), !hideSubmitButton && /*#__PURE__*/React.createElement(LinkPickerSubmitButton, {
    isEditing: isEditing,
    isLoading: isLoading,
    isSubmitting: isSubmitting,
    customSubmitButtonLabel: customSubmitButtonLabel,
    error: error,
    items: items,
    queryState: queryState,
    submitMessageId: submitMessageId,
    testId: testIds.insertButton,
    url: url
  })));
});
export const FormFooter = props => {
  if (fg('platform_bandicoots-link-picker-css')) {
    return /*#__PURE__*/React.createElement(FormFooterNew, props);
  }
  return /*#__PURE__*/React.createElement(FormFooterOld, props);
};