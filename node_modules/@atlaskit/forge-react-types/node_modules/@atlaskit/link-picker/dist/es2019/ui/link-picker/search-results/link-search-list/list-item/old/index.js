/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef, Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { Text } from '@atlaskit/primitives';
/* eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports */
import { transformTimeStamp } from '../../../../transformTimeStamp';
import { composeListItemStyles, imgStyles, itemIconStyles, itemNameStyles, listItemContainerInnerStyles, listItemContainerStyles, listItemContextStyles } from './styled';
export const testIds = {
  searchResultItem: 'link-search-list-item',
  searchResultIcon: 'link-search-list-item-icon'
};
const isSVG = icon => icon.startsWith('<svg') && icon.endsWith('</svg>');
const base64SVG = icon => `data:image/svg+xml;base64,${Buffer.from(icon).toString('base64')}`;
const ListItemIcon = props => {
  const {
    item,
    intl
  } = props;
  const {
    icon,
    iconAlt
  } = item;
  if (!icon) {
    return null;
  }
  const alt = typeof iconAlt === 'string' ? iconAlt : intl.formatMessage(iconAlt);
  if (typeof icon !== 'string') {
    const Glyph = icon;
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      jsx("span", {
        css: itemIconStyles
      }, jsx(Glyph, {
        alt: alt,
        "data-testid": testIds.searchResultIcon
      }))
    );
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("span", {
      css: itemIconStyles
    }, jsx("img", {
      "data-testid": testIds.searchResultIcon,
      src: isSVG(icon) ? base64SVG(icon) : icon,
      alt: alt
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: imgStyles
    }))
  );
};
const ListItemSubtitle = ({
  items: [firstItem, secondItem]
}) => {
  return /* eslint-disable @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766 */(
    jsx("div", {
      "data-testid": `${testIds.searchResultItem}-subtitle`,
      css: listItemContextStyles
    }, jsx("div", {
      css: listItemContainerStyles
    }, jsx("span", {
      css: listItemContainerInnerStyles
    }, firstItem)), secondItem && jsx("div", {
      css: listItemContainerInnerStyles
    }, jsx(Fragment, null, "\xA0 \u2022\xA0 "), jsx(Fragment, null, secondItem)))
  );
  /* eslint-enable @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766 */
};
const getDefaultSubtitleItems = (item, intl) => {
  const container = item.container;
  const date = transformTimeStamp(intl, item.lastViewedDate, item.lastUpdatedDate);
  if (container) {
    if (date) {
      return [container, date];
    }
    return [container];
  }
  if (date) {
    return [date];
  }
  return undefined;
};
export const LinkSearchListItemOld = /*#__PURE__*/forwardRef(({
  item,
  selected,
  id,
  role,
  onSelect,
  tabIndex,
  onKeyDown,
  onFocus,
  nameMaxLines = 1
}, ref) => {
  const intl = useIntl();
  const handleSelect = () => onSelect(item.objectId);
  const subtitleItems = item.subtitleItems || getDefaultSubtitleItems(item, intl);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    jsx("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css: composeListItemStyles(selected),
      role: role,
      id: id,
      "aria-selected": selected,
      "data-testid": testIds.searchResultItem,
      onKeyDown: onKeyDown,
      onClick: handleSelect,
      onFocus: onFocus,
      tabIndex: tabIndex,
      ref: ref
    }, jsx(ListItemIcon, {
      item: item,
      intl: intl
    }), jsx("div", {
      css: itemNameStyles
    }, jsx(Text, {
      maxLines: nameMaxLines
    }, jsx("span", {
      "data-testid": `${testIds.searchResultItem}-title`,
      title: item.name
    }, item.name)), subtitleItems && jsx(ListItemSubtitle, {
      items: subtitleItems
    })))
  );
});