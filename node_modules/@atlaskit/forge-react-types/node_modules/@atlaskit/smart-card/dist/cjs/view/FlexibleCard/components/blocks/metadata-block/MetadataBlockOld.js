"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _constants = require("../../../../../constants");
var _utils = require("../../utils");
var _block = _interopRequireDefault(require("../block"));
var _elementGroup = _interopRequireDefault(require("../element-group"));
var _utils2 = require("../utils");
var _excluded = ["maxLines", "status", "testId", "primary", "secondary"]; // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var DEFAULT_MAX_LINES = 2;
var MAXIMUM_MAX_LINES = 2;
var MINIMUM_MAX_LINES = 1;
var getElementGroupStyles = function getElementGroupStyles(size, maxLines) {
  // MetadataBlock allows metadata elements to be displayed in
  // multiple lines, with maximum of 2 lines.
  // We need the height of the line to be equal on both left and right
  // sides so they line up nicely.
  var lineHeight = (0, _utils.getMaxLineHeight)(size);
  return (0, _react2.css)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/use-tokens-typography -- Ignored via go/DSP-18766
    lineHeight: "".concat(lineHeight, "rem")
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  (0, _utils.getTruncateStyles)(maxLines, lineHeight + 'rem'));
};
var getMaxLines = function getMaxLines(maxLines) {
  if (maxLines > MAXIMUM_MAX_LINES) {
    return DEFAULT_MAX_LINES;
  }
  if (maxLines < MINIMUM_MAX_LINES) {
    return MINIMUM_MAX_LINES;
  }
  return maxLines;
};

/**
 * Represents a MetadataBlock, designed to contain groups of metadata in the form of elements.
 * Accepts an array of elements to be shown either primary (left hand side) or secondary (right hand side).
 * @public
 * @param {MetadataBlockProps} MetadataBlockProps
 * @see Block
 */
var MetadataBlockOld = function MetadataBlockOld(_ref) {
  var _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? _constants.SmartLinkStatus.Fallback : _ref$status,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-metadata' : _ref$testId,
    _ref$primary = _ref.primary,
    primary = _ref$primary === void 0 ? [] : _ref$primary,
    _ref$secondary = _ref.secondary,
    secondary = _ref$secondary === void 0 ? [] : _ref$secondary,
    blockProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  if (primary.length === 0 && secondary.length === 0 || status !== _constants.SmartLinkStatus.Resolved) {
    return null;
  }
  var primaryElements = (0, _utils2.renderElementItems)(primary);
  var secondaryElements = (0, _utils2.renderElementItems)(secondary);
  var _blockProps$size = blockProps.size,
    size = _blockProps$size === void 0 ? _constants.SmartLinkSize.Medium : _blockProps$size;
  var elementGroupStyles = getElementGroupStyles(size, getMaxLines(maxLines));
  return /*#__PURE__*/_react.default.createElement(_block.default, (0, _extends2.default)({}, blockProps, {
    testId: "".concat(testId, "-resolved-view")
  }), primaryElements && /*#__PURE__*/_react.default.createElement(_elementGroup.default, {
    align: _constants.SmartLinkAlignment.Left,
    overrideCss: elementGroupStyles,
    direction: _constants.SmartLinkDirection.Horizontal,
    width: _constants.SmartLinkWidth.Flexible
  }, primaryElements), secondaryElements && /*#__PURE__*/_react.default.createElement(_elementGroup.default, {
    align: _constants.SmartLinkAlignment.Right,
    overrideCss: elementGroupStyles,
    direction: _constants.SmartLinkDirection.Horizontal,
    width: _constants.SmartLinkWidth.Flexible
  }, secondaryElements));
};
var _default = exports.default = MetadataBlockOld;