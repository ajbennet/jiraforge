"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("@emotion/react");
var _utils = require("../../utils");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var getStyles = function getStyles(maxLines) {
  return (0, _react.css)({
    color: "var(--ds-text-subtlest, #626F86)",
    font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
    whiteSpace: 'normal'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  (0, _utils.getTruncateStyles)(maxLines));
};

/**
 * A base element that displays some Text.
 * @internal
 * @param {TextProps} TextProps - The props necessary for the Text element.
 * @see Title
 */
var TextOld = function TextOld(_ref) {
  var content = _ref.content,
    _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? 1 : _ref$maxLines,
    message = _ref.message,
    name = _ref.name,
    overrideCss = _ref.overrideCss,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-text' : _ref$testId;
  if (!message && !content) {
    return null;
  }
  return (0, _react.jsx)("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getStyles(maxLines), overrideCss],
    "data-separator": true,
    "data-smart-element": name,
    "data-smart-element-text": true,
    "data-testid": testId
  }, (0, _utils.getFormattedMessage)(message) || content);
};
var _default = exports.default = TextOld;