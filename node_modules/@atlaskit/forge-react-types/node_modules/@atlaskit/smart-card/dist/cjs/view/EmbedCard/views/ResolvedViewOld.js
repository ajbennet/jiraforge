"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmbedCardResolvedViewOld = void 0;
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _link = _interopRequireDefault(require("@atlaskit/icon/core/migration/link"));
var _tokens = require("@atlaskit/tokens");
var _utils = require("../../../utils");
var _ExpandedFrame = require("../components/ExpandedFrame");
var _Frame = require("../components/Frame");
var _ImageIcon = require("../components/ImageIcon");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var EmbedCardResolvedViewOld = exports.EmbedCardResolvedViewOld = /*#__PURE__*/_react.default.forwardRef(function (_ref, embedIframeRef) {
  var link = _ref.link,
    context = _ref.context,
    onClick = _ref.onClick,
    isSelected = _ref.isSelected,
    frameStyle = _ref.frameStyle,
    preview = _ref.preview,
    title = _ref.title,
    isTrusted = _ref.isTrusted,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'embed-card-resolved-view' : _ref$testId,
    inheritDimensions = _ref.inheritDimensions,
    onIframeDwell = _ref.onIframeDwell,
    onIframeFocus = _ref.onIframeFocus,
    isSupportTheming = _ref.isSupportTheming;
  var iconFromContext = context === null || context === void 0 ? void 0 : context.icon;
  var src = typeof iconFromContext === 'string' ? iconFromContext : undefined;
  var text = title || (context === null || context === void 0 ? void 0 : context.text);
  var linkGlyph = _react.default.useMemo(function () {
    return (0, _react2.jsx)(_link.default, {
      label: "icon",
      LEGACY_size: "small",
      testId: "embed-card-fallback-icon",
      color: "currentColor"
    });
  }, []);
  var icon = _react.default.useMemo(function () {
    if ( /*#__PURE__*/_react.default.isValidElement(iconFromContext)) {
      return iconFromContext;
    }
    return (0, _react2.jsx)(_ImageIcon.ImageIcon, {
      src: src,
      default: linkGlyph
    });
  }, [src, linkGlyph, iconFromContext]);
  var themeState = (0, _tokens.useThemeObserver)();
  var previewUrl = preview === null || preview === void 0 ? void 0 : preview.src;
  if (previewUrl && isSupportTheming) {
    previewUrl = (0, _utils.getPreviewUrlWithTheme)(previewUrl, themeState);
  }
  return (0, _react2.jsx)(_ExpandedFrame.ExpandedFrame, {
    isSelected: isSelected,
    frameStyle: frameStyle,
    href: link,
    testId: testId,
    icon: icon,
    text: text,
    onClick: onClick,
    inheritDimensions: inheritDimensions,
    setOverflow: false
  }, (0, _react2.jsx)(_Frame.Frame, {
    url: previewUrl,
    isTrusted: isTrusted,
    testId: testId,
    ref: embedIframeRef,
    onIframeDwell: onIframeDwell,
    onIframeFocus: onIframeFocus,
    title: text
  }));
});