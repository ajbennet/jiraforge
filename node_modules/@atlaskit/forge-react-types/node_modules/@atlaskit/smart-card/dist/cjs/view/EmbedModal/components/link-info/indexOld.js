"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _heading = _interopRequireDefault(require("@atlaskit/heading"));
var _download = _interopRequireDefault(require("@atlaskit/icon/core/download"));
var _fullscreenExit = _interopRequireDefault(require("@atlaskit/icon/core/fullscreen-exit"));
var _closeCross = _interopRequireDefault(require("@atlaskit/icon/core/migration/close--cross"));
var _fullscreenEnterVidFullScreenOn = _interopRequireDefault(require("@atlaskit/icon/core/migration/fullscreen-enter--vid-full-screen-on"));
var _linkExternalShortcut = _interopRequireDefault(require("@atlaskit/icon/core/migration/link-external--shortcut"));
var _download2 = _interopRequireDefault(require("@atlaskit/icon/glyph/download"));
var _vidFullScreenOff = _interopRequireDefault(require("@atlaskit/icon/glyph/vid-full-screen-off"));
var _modalDialog = require("@atlaskit/modal-dialog");
var _messages = require("../../../../messages");
var _Icon = require("../../../common/Icon");
var _constants = require("../../constants");
var _linkInfoButton = _interopRequireDefault(require("./link-info-button"));
var _styledOld = require("./styledOld");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var LinkInfo = function LinkInfo(_ref) {
  var icon = _ref.icon,
    providerName = _ref.providerName,
    onDownloadButtonClick = _ref.onDownloadButtonClick,
    onResizeButtonClick = _ref.onResizeButtonClick,
    onViewButtonClick = _ref.onViewButtonClick,
    size = _ref.size,
    testId = _ref.testId,
    title = _ref.title;
  var _useModal = (0, _modalDialog.useModal)(),
    onClose = _useModal.onClose;
  var downloadButton = (0, _react.useMemo)(function () {
    if (onDownloadButtonClick) {
      return (0, _react2.jsx)(_linkInfoButton.default, {
        content: (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.messages.download),
        icon: (0, _react2.jsx)(_download.default, {
          label: _messages.messages.download.defaultMessage,
          LEGACY_fallbackIcon: _download2.default,
          spacing: "spacious",
          color: "currentColor"
        }),
        onClick: onDownloadButtonClick,
        testId: "".concat(testId, "-download")
      });
    }
  }, [onDownloadButtonClick, testId]);
  var urlButton = (0, _react.useMemo)(function () {
    if (onViewButtonClick) {
      var content = providerName ? (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.messages.viewIn), " ", providerName) : (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.messages.viewOriginal);
      return (0, _react2.jsx)(_linkInfoButton.default, {
        content: content,
        icon: (0, _react2.jsx)(_linkExternalShortcut.default, {
          label: _messages.messages.viewOriginal.defaultMessage,
          spacing: "spacious",
          color: "currentColor"
        }),
        onClick: onViewButtonClick,
        testId: "".concat(testId, "-url")
      });
    }
  }, [onViewButtonClick, providerName, testId]);
  var sizeButton = (0, _react.useMemo)(function () {
    var isFullScreen = size === _constants.MAX_MODAL_SIZE;
    var message = isFullScreen ? _messages.messages.preview_min_size : _messages.messages.preview_max_size;
    var icon = isFullScreen ? (0, _react2.jsx)(_fullscreenExit.default, {
      LEGACY_fallbackIcon: _vidFullScreenOff.default,
      label: message.defaultMessage,
      spacing: "spacious",
      color: "currentColor"
    }) : (0, _react2.jsx)(_fullscreenEnterVidFullScreenOn.default, {
      label: message.defaultMessage,
      spacing: "spacious",
      color: "currentColor"
    });
    return (
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      (0, _react2.jsx)("span", {
        className: "smart-link-resize-button"
      }, (0, _react2.jsx)(_linkInfoButton.default, {
        content: (0, _react2.jsx)(_reactIntlNext.FormattedMessage, message),
        icon: icon,
        onClick: onResizeButtonClick,
        testId: "".concat(testId, "-resize")
      }))
    );
  }, [onResizeButtonClick, size, testId]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styledOld.containerStyles
    }, icon &&
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styledOld.iconCss,
      "data-testid": "".concat(testId, "-icon")
    }, (0, _react2.jsx)(_Icon.Icon, icon)), (0, _react2.jsx)("div", {
      css: _styledOld.titleCss
    }, (0, _react2.jsx)(_heading.default, {
      size: "medium",
      testId: "".concat(testId, "-title")
    }, title), (0, _react2.jsx)("span", {
      tabIndex: 0
    })), (0, _react2.jsx)("div", {
      css: _styledOld.actionCss
    }, downloadButton, urlButton, sizeButton, (0, _react2.jsx)(_linkInfoButton.default, {
      content: (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.messages.preview_close),
      icon: (0, _react2.jsx)(_closeCross.default, {
        label: _messages.messages.preview_close.defaultMessage,
        color: "currentColor",
        spacing: "spacious"
      }),
      onClick: onClose,
      testId: "".concat(testId, "-close")
    })))
  );
};
var _default = exports.default = LinkInfo;