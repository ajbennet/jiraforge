"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _constants = require("../constants");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var namespaceUUID = 0;
var svgStyles = (0, _react2.css)({
  position: 'absolute',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  borderRadius: _constants.OUTER_BORDER_RADIUS
});
var blurredStyles = (0, _react2.css)({
  width: "calc(100% - ".concat("var(--ds-space-050, 4px)", ")"),
  height: "calc(100% - ".concat("var(--ds-space-050, 4px)", ")"),
  top: "var(--ds-space-050, 4px)",
  left: "var(--ds-space-050, 4px)",
  filter: "blur(".concat("var(--ds-space-100, 8px)", ")"),
  // for safari... : https://stackoverflow.com/a/71353198
  backfaceVisibility: 'hidden',
  transform: 'translate3d(0, 0, 0)'
});
var notBlurredStyles = (0, _react2.css)({
  left: 0,
  top: 0,
  width: '100%',
  height: '100%'
});

/**
 * The bulk of this file is originally from
 * https://bitbucket.org/atlassian/barrel/src/master/ui/platform/ui-kit/ai
 * with modifications.
 */
var AnimatedSvgContainerOld = function AnimatedSvgContainerOld(_ref) {
  var palette = _ref.palette,
    isMoving = _ref.isMoving,
    isGlowing = _ref.isGlowing,
    additionalCss = _ref.additionalCss;
  var svgRef = (0, _react.useRef)(null);
  var namespaceId = (0, _react.useRef)();
  if (namespaceId.current === undefined) {
    namespaceId.current = namespaceUUID;
    namespaceUUID += 1;
  }
  (0, _react.useEffect)(function () {
    if (isMoving) {
      var svg = svgRef.current;

      // Schedule animation to begin before next browser paint
      var beginReq = requestAnimationFrame(function () {
        svg === null || svg === void 0 || svg.querySelectorAll('animate').forEach(function (node) {
          return node.beginElement();
        });
      });
      return function () {
        // Ensure any pending animation frame is cancelled as the element animation does not end properly if it
        // begins in the same event tick, i.e. isLoading synchronously changes to true then false.
        cancelAnimationFrame(beginReq);
        requestAnimationFrame(function () {
          svg === null || svg === void 0 || svg.querySelectorAll('animate').forEach(function (node) {
            return node.endElement();
          });
        });
      };
    }
    return undefined;
  }, [isMoving]);
  return (0, _react2.jsx)("svg", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [svgStyles, isGlowing ? blurredStyles : notBlurredStyles, additionalCss],
    ref: svgRef,
    viewBox: "0 0 24 24",
    preserveAspectRatio: "none"
  }, (0, _react2.jsx)("defs", null, (0, _react2.jsx)("linearGradient", {
    id: "".concat(namespaceId.current, "_lg1"),
    gradientUnits: "userSpaceOnUse",
    x1: "0%",
    y1: "0",
    x2: "400%",
    y2: "0",
    spreadMethod: "reflect"
  }, (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "x1",
    from: "0%",
    to: "400%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "x2",
    from: "400%",
    to: "800%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("stop", {
    offset: "0",
    stopColor: palette.blue
  }), (0, _react2.jsx)("stop", {
    offset: "0.25",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "0.5",
    stopColor: palette.yellow
  }), (0, _react2.jsx)("stop", {
    offset: "0.75",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "1",
    stopColor: palette.blue
  })), (0, _react2.jsx)("linearGradient", {
    id: "".concat(namespaceId.current, "_lg2"),
    gradientUnits: "userSpaceOnUse",
    x1: "0",
    y1: "-100%",
    x2: "0",
    y2: "300%",
    spreadMethod: "reflect"
  }, (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "y1",
    from: "-100%",
    to: "300%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "y2",
    from: "300%",
    to: "700%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("stop", {
    offset: "0",
    stopColor: palette.blue
  }), (0, _react2.jsx)("stop", {
    offset: "0.25",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "0.5",
    stopColor: palette.yellow
  }), (0, _react2.jsx)("stop", {
    offset: "0.75",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "1",
    stopColor: palette.blue
  })), (0, _react2.jsx)("linearGradient", {
    id: "".concat(namespaceId.current, "_lg3"),
    gradientUnits: "userSpaceOnUse",
    x1: "300%",
    y1: "0",
    x2: "700%",
    y2: "0",
    spreadMethod: "reflect"
  }, (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "x1",
    from: "300%",
    to: "-100%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "x2",
    from: "700%",
    to: "300%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("stop", {
    offset: "0",
    stopColor: palette.blue
  }), (0, _react2.jsx)("stop", {
    offset: "0.25",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "0.5",
    stopColor: palette.yellow
  }), (0, _react2.jsx)("stop", {
    offset: "0.75",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "1",
    stopColor: palette.blue
  })), (0, _react2.jsx)("linearGradient", {
    id: "".concat(namespaceId.current, "_lg4"),
    gradientUnits: "userSpaceOnUse",
    x1: "0",
    y1: "0",
    x2: "0",
    y2: "400%",
    spreadMethod: "reflect"
  }, (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "y1",
    from: "0%",
    to: "-400%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("animate", {
    begin: "indefinite",
    attributeName: "y2",
    from: "400%",
    to: "0%",
    repeatCount: "indefinite",
    dur: "3s"
  }), (0, _react2.jsx)("stop", {
    offset: "0",
    stopColor: palette.blue
  }), (0, _react2.jsx)("stop", {
    offset: "0.25",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "0.5",
    stopColor: palette.yellow
  }), (0, _react2.jsx)("stop", {
    offset: "0.75",
    stopColor: palette.teal
  }), (0, _react2.jsx)("stop", {
    offset: "1",
    stopColor: palette.blue
  }))), (0, _react2.jsx)("g", {
    strokeWidth: "8"
  }, (0, _react2.jsx)("path", {
    stroke: "url(#".concat(namespaceId.current, "_lg1)"),
    d: "M0 0h24",
    vectorEffect: "non-scaling-stroke"
  }), (0, _react2.jsx)("path", {
    stroke: "url(#".concat(namespaceId.current, "_lg2)"),
    d: "M24 0v24",
    vectorEffect: "non-scaling-stroke"
  }), (0, _react2.jsx)("path", {
    stroke: "url(#".concat(namespaceId.current, "_lg3)"),
    d: "M24 24H0",
    vectorEffect: "non-scaling-stroke"
  }), (0, _react2.jsx)("path", {
    stroke: "url(#".concat(namespaceId.current, "_lg4)"),
    d: "M0 24V0",
    vectorEffect: "non-scaling-stroke"
  })));
};
var _default = exports.default = AnimatedSvgContainerOld;