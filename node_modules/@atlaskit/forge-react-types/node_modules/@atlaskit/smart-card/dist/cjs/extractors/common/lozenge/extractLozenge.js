"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractLozenge = void 0;
var _linkExtractors = require("@atlaskit/link-extractors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _extractState = require("./extractState");
var _extractTag = require("./extractTag");
var _extractTaskStatus = require("./extractTaskStatus");
var _extractTaskType = require("./extractTaskType");
var DOC_TYPES = ['schema:BlogPosting', 'schema:TextDigitalDocument', 'schema:DigitalDocument', 'schema:PresentationDigitalDocument', 'schema:SpreadsheetDigitalDocument'];
var extractLozenge = exports.extractLozenge = function extractLozenge(jsonLd) {
  var type = (0, _linkExtractors.extractType)(jsonLd);
  if (type) {
    if ((0, _platformFeatureFlags.fg)('linking_platform_show_lozenge_atlassian_state')) {
      if (type.includes('atlassian:Task')) {
        var jsonLdTask = jsonLd;
        var lozengeFromTag = (0, _extractTag.extractTag)(jsonLdTask);
        var lozengeFromStatus = (0, _extractTaskStatus.extractTaskStatus)(jsonLdTask);
        var lozengeFromTaskType = extractLozengeFromTaskType(jsonLdTask);
        return lozengeFromTag || lozengeFromStatus || lozengeFromTaskType;
      }
      if (type.includes('atlassian:UndefinedLink')) {
        return {
          text: 'UNDEFINED',
          appearance: 'inprogress'
        };
      }

      // casting it because `extractState` can safely handle missing properties
      return (0, _extractState.extractState)(jsonLd);
    }
    if (type.includes('atlassian:SourceCodePullRequest')) {
      return (0, _extractState.extractState)(jsonLd);
    } else if (type.includes('atlassian:Task')) {
      var _jsonLdTask = jsonLd;
      var _lozengeFromTag = (0, _extractTag.extractTag)(_jsonLdTask);
      var _lozengeFromStatus = (0, _extractTaskStatus.extractTaskStatus)(_jsonLdTask);
      var _lozengeFromTaskType = extractLozengeFromTaskType(_jsonLdTask);
      return _lozengeFromTag || _lozengeFromStatus || _lozengeFromTaskType;
    } else if (type.some(function (types) {
      return DOC_TYPES.includes(types);
    })) {
      var jsonLdDocument = jsonLd;
      var lozengeFromState = (0, _extractState.extractState)(jsonLdDocument);
      return lozengeFromState;
    } else if (type.includes('atlassian:Goal')) {
      var jsonLdProject = jsonLd;
      var _lozengeFromState = (0, _extractState.extractState)(jsonLdProject);
      return _lozengeFromState;
    } else if (type.includes('atlassian:Project')) {
      var _jsonLdProject = jsonLd;
      var _lozengeFromState2 = (0, _extractState.extractState)(_jsonLdProject);
      return _lozengeFromState2;
    } else if (type.includes('atlassian:UndefinedLink')) {
      return {
        text: 'UNDEFINED',
        appearance: 'inprogress'
      };
    }
  }
};
var extractLozengeFromTaskType = function extractLozengeFromTaskType(jsonLdTask) {
  var taskType = (0, _extractTaskType.extractTaskType)(jsonLdTask);
  if (taskType && taskType.name) {
    return {
      text: taskType.name,
      appearance: 'success'
    };
  }
};