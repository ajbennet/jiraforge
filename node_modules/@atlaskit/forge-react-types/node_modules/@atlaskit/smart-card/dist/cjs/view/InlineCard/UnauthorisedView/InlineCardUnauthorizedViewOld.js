"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineCardUnauthorizedViewOld = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _button = _interopRequireDefault(require("@atlaskit/button"));
var _lockLocked = _interopRequireDefault(require("@atlaskit/icon/core/lock-locked"));
var _lockFilled = _interopRequireDefault(require("@atlaskit/icon/glyph/lock-filled"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _primitives = require("@atlaskit/primitives");
var _colors = require("@atlaskit/theme/colors");
var _useAnalyticsEvents2 = require("../../../common/analytics/generated/use-analytics-events");
var _messages = require("../../../messages");
var _HoverCard = require("../../HoverCard");
var _actionButton = require("../common/action-button");
var _Frame = require("../Frame");
var _Icon = require("../Icon");
var _IconEmotion = require("../Icon-emotion");
var _IconAndTitleLayout = require("../IconAndTitleLayout");
var _styled = require("../styled");
var _styledEmotion = require("../styled-emotion");
var _withFrameStyleControl = _interopRequireDefault(require("../utils/withFrameStyleControl"));
var iconWrapperStyles = (0, _primitives.xcss)({
  marginRight: 'space.negative.025'
});
var fallbackUnauthorizedIcon = function fallbackUnauthorizedIcon() {
  if ((0, _platformFeatureFlags.fg)('bandicoots-compiled-migration-smartcard')) {
    return (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      as: "span",
      xcss: iconWrapperStyles
    }, /*#__PURE__*/_react.default.createElement(_lockLocked.default, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_fallbackIcon: _lockFilled.default,
      LEGACY_size: "small"
    })) : /*#__PURE__*/_react.default.createElement(_Icon.AKIconWrapper, null, /*#__PURE__*/_react.default.createElement(_lockFilled.default, {
      label: "error",
      size: "small",
      primaryColor: "var(--ds-icon-danger, ".concat(_colors.R400, ")")
    }));
  } else {
    return (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      as: "span",
      xcss: iconWrapperStyles
    }, /*#__PURE__*/_react.default.createElement(_lockLocked.default, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_fallbackIcon: _lockFilled.default,
      LEGACY_size: "small"
    })) : /*#__PURE__*/_react.default.createElement(_IconEmotion.AKIconWrapper, null, /*#__PURE__*/_react.default.createElement(_lockFilled.default, {
      label: "error",
      size: "small",
      primaryColor: "var(--ds-icon-danger, ".concat(_colors.R400, ")")
    }));
  }
};
var InlineCardUnauthorizedViewOld = exports.InlineCardUnauthorizedViewOld = function InlineCardUnauthorizedViewOld(_ref) {
  var url = _ref.url,
    id = _ref.id,
    icon = _ref.icon,
    onAuthorise = _ref.onAuthorise,
    onClick = _ref.onClick,
    isSelected = _ref.isSelected,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'inline-card-unauthorized-view' : _ref$testId,
    _ref$showHoverPreview = _ref.showHoverPreview,
    showHoverPreview = _ref$showHoverPreview === void 0 ? false : _ref$showHoverPreview,
    truncateInline = _ref.truncateInline,
    context = _ref.context;
  var frameRef = _react.default.useRef(null);
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var handleConnectAccount = _react.default.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    if (onAuthorise) {
      fireEvent('track.applicationAccount.authStarted', {});
      onAuthorise();
    }
  }, [fireEvent, onAuthorise]);
  var renderActionButton = _react.default.useCallback(function () {
    var Button = (0, _withFrameStyleControl.default)(_button.default, frameRef);
    if ((0, _platformFeatureFlags.fg)('bandicoots-compiled-migration-smartcard')) {
      if ((0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/_react.default.createElement(Button, {
          component: _actionButton.ActionButton,
          onClick: handleConnectAccount,
          testId: "button-connect-account"
        }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages.messages.connect_link_account_card_name, {
          values: {
            context: context
          }
        })));
      }
      return onAuthorise ? /*#__PURE__*/_react.default.createElement(Button, {
        spacing: "none",
        component: _styled.IconStyledButtonOldVisualRefresh,
        onClick: handleConnectAccount,
        testId: "button-connect-account"
      }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages.messages.connect_link_account_card_name, {
        values: {
          context: context
        }
      }))) : undefined;
    } else {
      return onAuthorise ? /*#__PURE__*/_react.default.createElement(Button, {
        spacing: "none",
        component: _styledEmotion.IconStyledButton,
        onClick: handleConnectAccount,
        testId: "button-connect-account"
      }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages.messages.connect_link_account_card_name, {
        values: {
          context: context
        }
      }))) : undefined;
    }
  }, [handleConnectAccount, onAuthorise, context]);
  var inlineCardUnauthenticatedView = /*#__PURE__*/_react.default.createElement(_Frame.Frame, {
    testId: testId,
    isSelected: isSelected,
    ref: frameRef,
    truncateInline: truncateInline
  }, /*#__PURE__*/_react.default.createElement(_IconAndTitleLayout.IconAndTitleLayout, {
    icon: icon ? icon : fallbackUnauthorizedIcon(),
    title: url,
    link: url,
    onClick: onClick,
    titleColor: "var(--ds-text-subtle, ".concat(_colors.N500, ")")
  }), renderActionButton());
  if (onAuthorise && showHoverPreview) {
    return /*#__PURE__*/_react.default.createElement(_HoverCard.HoverCard, {
      url: url,
      id: id
    }, inlineCardUnauthenticatedView);
  }
  return inlineCardUnauthenticatedView;
};