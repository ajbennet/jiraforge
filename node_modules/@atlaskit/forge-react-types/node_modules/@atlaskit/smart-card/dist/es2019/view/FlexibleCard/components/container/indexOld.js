/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useContext } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { di } from 'react-magnetic-di';
import { N40 } from '@atlaskit/theme/colors';
import { MediaPlacement, SmartLinkSize, SmartLinkTheme } from '../../../../constants';
import { FlexibleUiContext } from '../../../../state/flexible-ui-context';
import { isFlexUiPreviewPresent } from '../../../../state/flexible-ui-context/utils';
import { isFlexibleUiBlock, isFlexibleUiPreviewBlock, isFlexibleUiTitleBlock } from '../../../../utils/flexible';
import HoverCardControl from './hover-card-control';
import LayeredLink from './layered-link';
const elevationStyles = css({
  border: `1px solid ${`var(--ds-border, ${N40})`}`,
  borderRadius: "var(--ds-border-radius-200, 8px)",
  margin: "var(--ds-space-025, 2px)"
});
const clickableContainerStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  'a, button, .has-action': {
    position: 'relative',
    zIndex: 1
  }
});
const getGap = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.25rem';
    case SmartLinkSize.Large:
      return '1rem';
    case SmartLinkSize.Medium:
      return '.5rem';
    case SmartLinkSize.Small:
    default:
      return '.25rem';
  }
};

/**
 * Get container padding based on smart link size
 * Equivalent version for DS primitives space token is getPrimitivesPaddingSpaceBySize()
 * at view/FlexibleCard/components/utils.tsx
 */
const getPadding = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.5rem';
    case SmartLinkSize.Large:
      return '1.25rem';
    case SmartLinkSize.Medium:
      return '1rem';
    case SmartLinkSize.Small:
    default:
      return '.5rem';
  }
};
const getContainerPaddingStyles = (size, hidePadding, childrenOptions) => {
  const padding = hidePadding ? '0rem' : getPadding(size);
  const gap = getGap(size);
  const {
    previewOnLeft,
    previewOnRight
  } = childrenOptions;
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    '--container-padding': padding,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    '--container-gap-left': previewOnLeft ? gap : padding,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    '--container-gap-right': previewOnRight ? gap : padding,
    '--preview-block-width': '30%',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    padding: padding
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  previewOnLeft ? `padding-left: calc(var(--preview-block-width) + ${gap});` : '',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  previewOnRight ? `padding-right: calc(var(--preview-block-width) + ${gap});` : '');
};

/**
 * @deprecated consider removing on FF bandicoots-compiled-migration-smartcard
 */
export const getContainerStyles = (size, hideBackground, hideElevation, hidePadding, clickableContainer, childrenOptions) => {
  const paddingCss = getContainerPaddingStyles(size, hidePadding, childrenOptions);

  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return css`
		display: flex;
		gap: ${getGap(size)} 0;
		flex-direction: column;
		min-width: 0;
		overflow-x: hidden;
		position: relative;
		${hideBackground ? '' : `background-color: ${"var(--ds-surface-raised, #FFFFFF)"};`}
		${paddingCss}
    ${hideElevation ? '' : elevationStyles}
    ${clickableContainer ? clickableContainerStyles : ''}
    &:hover ~ .actions-button-group {
			opacity: 1;
		}
		a:focus,
		.has-action:focus {
			outline-offset: -2px;
		}
	`;
};
const getLayeredLink = (testId, context, children, onClick) => {
  const {
    title,
    url = ''
  } = context || {};
  const {
    anchorTarget: target,
    text
  } = getTitleBlockProps(children) || {};
  return jsx(LayeredLink, {
    onClick: onClick,
    target: target,
    testId: testId,
    text: text || title,
    url: url
  });
};
const getTitleBlockProps = children => {
  const block = React.Children.toArray(children).find(child => isFlexibleUiTitleBlock(child));
  if ( /*#__PURE__*/React.isValidElement(block)) {
    return block.props;
  }
};
export const getChildrenOptions = (children, context) => {
  let options = {};
  if (isFlexUiPreviewPresent(context)) {
    React.Children.map(children, child => {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        if (isFlexibleUiPreviewBlock(child)) {
          const {
            placement
          } = child.props;
          if (placement === MediaPlacement.Left) {
            options.previewOnLeft = true;
          }
          if (placement === MediaPlacement.Right) {
            options.previewOnRight = true;
          }
        }
      }
    });
  }
  return options;
};
const renderChildren = (children, containerSize, containerTheme, status, retry, onClick) => React.Children.map(children, child => {
  // TODO: EDM-6468: Use useFlexibleUiOptionContext for rendering options inside block/element instead
  if ( /*#__PURE__*/React.isValidElement(child) && isFlexibleUiBlock(child)) {
    const {
      size: blockSize
    } = child.props;
    const size = blockSize || containerSize;
    if (isFlexibleUiTitleBlock(child)) {
      return /*#__PURE__*/React.cloneElement(child, {
        // @ts-expect-error
        onClick,
        retry,
        size,
        status,
        theme: containerTheme
      });
    }
    // @ts-expect-error
    return /*#__PURE__*/React.cloneElement(child, {
      size,
      status
    });
  }
});

/**
 * A container is a hidden component that build the Flexible Smart Link.
 * All the Flexible UI components are wrapped inside the container.
 * It inherits the ui props from Card component and applies the custom styling
 * accordingly.
 * @internal
 * @see Block
 */
const ContainerOld = ({
  children,
  clickableContainer = false,
  hideBackground = false,
  hideElevation = false,
  hidePadding = false,
  onClick,
  retry,
  showHoverPreview = false,
  hoverPreviewOptions,
  actionOptions,
  size = SmartLinkSize.Medium,
  status,
  testId = 'smart-links-container',
  theme = SmartLinkTheme.Link
}) => {
  const context = useContext(FlexibleUiContext);
  const childrenOptions = getChildrenOptions(children, context);
  const canShowHoverPreview = showHoverPreview && status === 'resolved';
  // `retry` object contains action that can be performed on
  // unresolved link (unauthorized, forbidden, not found, etc.)
  const canShowAuthTooltip = showHoverPreview && status === 'unauthorized' && retry !== undefined;
  const container = jsx("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: getContainerStyles(size, hideBackground, hideElevation, hidePadding, clickableContainer, childrenOptions),
    "data-smart-link-container": true,
    "data-testid": testId
  }, clickableContainer ? getLayeredLink(testId, context, children, onClick) : null, renderChildren(children, size, theme, status, retry, onClick));
  if (context !== null && context !== void 0 && context.url && (canShowHoverPreview || canShowAuthTooltip)) {
    return jsx(HoverCardControl, {
      isHoverPreview: canShowHoverPreview,
      isAuthTooltip: canShowAuthTooltip,
      actionOptions: actionOptions,
      testId: testId,
      url: context.url,
      hoverPreviewOptions: hoverPreviewOptions
    }, container);
  }
  return container;
};
export default ContainerOld;