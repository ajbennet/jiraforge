import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import Spinner from '@atlaskit/spinner';
import { Frame } from '../Frame';
import { IconAndTitleLayout, IconTitleWrapper } from '../IconAndTitleLayout';
import { RightIconPositionWrapper } from '../IconAndTitleLayout/styled';
import { IconTitleWrapper as IconTitleWrapperOld, RightIconPositionWrapper as RightIconPositionWrapperOld } from '../IconAndTitleLayout/styled-emotion';
import { SpinnerWrapperOldVisualRefresh } from './styled';
import { SpinnerWrapper as SpinnerWrapperOld } from './styled-emotion';
export class InlineCardResolvingViewOld extends React.Component {
  render() {
    const {
      url,
      onClick,
      isSelected,
      inlinePreloaderStyle,
      testId = 'inline-card-resolving-view',
      titleTextColor,
      resolvingPlaceholder,
      truncateInline
    } = this.props;
    const SpinnerWrapperComponent = fg('bandicoots-compiled-migration-smartcard') ? SpinnerWrapperOldVisualRefresh : SpinnerWrapperOld;
    if (inlinePreloaderStyle === 'on-right-without-skeleton') {
      if (fg('bandicoots-compiled-migration-smartcard')) {
        return /*#__PURE__*/React.createElement(Frame, {
          withoutBackground: true,
          testId: testId,
          onClick: onClick,
          isSelected: isSelected,
          truncateInline: truncateInline
        }, /*#__PURE__*/React.createElement(IconTitleWrapper, null, url, /*#__PURE__*/React.createElement(RightIconPositionWrapper, null, fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SpinnerWrapperComponent, {
          className: "inline-resolving-spinner"
        }, /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        }))))));
      } else {
        return /*#__PURE__*/React.createElement(Frame, {
          withoutBackground: true,
          testId: testId,
          onClick: onClick,
          isSelected: isSelected,
          truncateInline: truncateInline
        }, /*#__PURE__*/React.createElement(IconTitleWrapperOld, null, url, /*#__PURE__*/React.createElement(RightIconPositionWrapperOld, null, /*#__PURE__*/React.createElement(SpinnerWrapperComponent, {
          className: "inline-resolving-spinner"
        }, /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        })))));
      }
    } else {
      return /*#__PURE__*/React.createElement(Frame, {
        testId: testId,
        onClick: onClick,
        isSelected: isSelected,
        link: url,
        truncateInline: truncateInline
      }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
        title: resolvingPlaceholder !== null && resolvingPlaceholder !== void 0 ? resolvingPlaceholder : url,
        titleTextColor: titleTextColor
      }, fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Spinner, {
        size: 14
      }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SpinnerWrapperComponent, {
        className: "inline-resolving-spinner"
      }, /*#__PURE__*/React.createElement(Spinner, {
        size: 14
      })))));
    }
  }
}