/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { getFormattedMessage, getTruncateStyles } from '../../utils';
const getStyles = maxLines => css({
  color: "var(--ds-text-subtlest, #626F86)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  whiteSpace: 'normal'
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
getTruncateStyles(maxLines));

/**
 * A base element that displays some Text.
 * @internal
 * @param {TextProps} TextProps - The props necessary for the Text element.
 * @see Title
 */
const TextOld = ({
  content,
  maxLines = 1,
  message,
  name,
  overrideCss,
  testId = 'smart-element-text'
}) => {
  if (!message && !content) {
    return null;
  }
  return jsx("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getStyles(maxLines), overrideCss],
    "data-separator": true,
    "data-smart-element": name,
    "data-smart-element-text": true,
    "data-testid": testId
  }, getFormattedMessage(message) || content);
};
export default TextOld;