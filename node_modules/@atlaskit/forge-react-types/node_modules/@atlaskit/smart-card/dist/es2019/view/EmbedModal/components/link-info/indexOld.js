/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import Heading from '@atlaskit/heading';
import DownloadIcon from '@atlaskit/icon/core/download';
import FullscreenExitIcon from '@atlaskit/icon/core/fullscreen-exit';
import CrossIcon from '@atlaskit/icon/core/migration/close--cross';
import VidFullScreenOnIcon from '@atlaskit/icon/core/migration/fullscreen-enter--vid-full-screen-on';
import ShortcutIcon from '@atlaskit/icon/core/migration/link-external--shortcut';
import DownloadIconLegacy from '@atlaskit/icon/glyph/download';
import VidFullScreenOffIcon from '@atlaskit/icon/glyph/vid-full-screen-off';
import { useModal } from '@atlaskit/modal-dialog';
import { messages } from '../../../../messages';
import { Icon } from '../../../common/Icon';
import { MAX_MODAL_SIZE } from '../../constants';
import LinkInfoButton from './link-info-button';
import { actionCss, containerStyles, iconCss, titleCss } from './styledOld';
const LinkInfo = ({
  icon,
  providerName,
  onDownloadButtonClick,
  onResizeButtonClick,
  onViewButtonClick,
  size,
  testId,
  title
}) => {
  const {
    onClose
  } = useModal();
  const downloadButton = useMemo(() => {
    if (onDownloadButtonClick) {
      return jsx(LinkInfoButton, {
        content: jsx(FormattedMessage, messages.download),
        icon: jsx(DownloadIcon, {
          label: messages.download.defaultMessage,
          LEGACY_fallbackIcon: DownloadIconLegacy,
          spacing: "spacious",
          color: "currentColor"
        }),
        onClick: onDownloadButtonClick,
        testId: `${testId}-download`
      });
    }
  }, [onDownloadButtonClick, testId]);
  const urlButton = useMemo(() => {
    if (onViewButtonClick) {
      const content = providerName ? jsx(React.Fragment, null, jsx(FormattedMessage, messages.viewIn), " ", providerName) : jsx(FormattedMessage, messages.viewOriginal);
      return jsx(LinkInfoButton, {
        content: content,
        icon: jsx(ShortcutIcon, {
          label: messages.viewOriginal.defaultMessage,
          spacing: "spacious",
          color: "currentColor"
        }),
        onClick: onViewButtonClick,
        testId: `${testId}-url`
      });
    }
  }, [onViewButtonClick, providerName, testId]);
  const sizeButton = useMemo(() => {
    const isFullScreen = size === MAX_MODAL_SIZE;
    const message = isFullScreen ? messages.preview_min_size : messages.preview_max_size;
    const icon = isFullScreen ? jsx(FullscreenExitIcon, {
      LEGACY_fallbackIcon: VidFullScreenOffIcon,
      label: message.defaultMessage,
      spacing: "spacious",
      color: "currentColor"
    }) : jsx(VidFullScreenOnIcon, {
      label: message.defaultMessage,
      spacing: "spacious",
      color: "currentColor"
    });
    return (
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      jsx("span", {
        className: "smart-link-resize-button"
      }, jsx(LinkInfoButton, {
        content: jsx(FormattedMessage, message),
        icon: icon,
        onClick: onResizeButtonClick,
        testId: `${testId}-resize`
      }))
    );
  }, [onResizeButtonClick, size, testId]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: containerStyles
    }, icon &&
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: iconCss,
      "data-testid": `${testId}-icon`
    }, jsx(Icon, icon)), jsx("div", {
      css: titleCss
    }, jsx(Heading, {
      size: "medium",
      testId: `${testId}-title`
    }, title), jsx("span", {
      tabIndex: 0
    })), jsx("div", {
      css: actionCss
    }, downloadButton, urlButton, sizeButton, jsx(LinkInfoButton, {
      content: jsx(FormattedMessage, messages.preview_close),
      icon: jsx(CrossIcon, {
        label: messages.preview_close.defaultMessage,
        color: "currentColor",
        spacing: "spacious"
      }),
      onClick: onClose,
      testId: `${testId}-close`
    })))
  );
};
export default LinkInfo;