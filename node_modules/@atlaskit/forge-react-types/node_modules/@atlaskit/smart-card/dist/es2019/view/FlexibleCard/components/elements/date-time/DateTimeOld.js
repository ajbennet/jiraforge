import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { selectUnit } from '@formatjs/intl-utils';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { messages } from '../../../../../messages';
import { getTruncateStyles } from '../../utils';
const styles = css({
  color: "var(--ds-text-subtlest, #626F86)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
getTruncateStyles(1));
const typeToDescriptorMap = {
  created: {
    relative: messages.created_on_relative,
    absolute: messages.created_on_absolute
  },
  modified: {
    relative: messages.modified_on_relative,
    absolute: messages.modified_on_absolute
  },
  sent: {
    relative: messages.sent_on_relative,
    absolute: messages.sent_on_absolute
  }
};

/**
 * A base element that displays an ISO Timestamp in text.
 * @internal
 * @param {DateTimeProps} DateTimeProps - The props necessary for the DateTime element.
 * @see CreatedOn
 * @see ModifiedOn
 * @see SentOn
 */
const DateTimeOld = ({
  date,
  name,
  overrideCss,
  type,
  testId = 'smart-element-date-time',
  text
}) => {
  const {
    formatRelativeTime,
    formatDate
  } = useIntl();
  if (!type || !date) {
    return null;
  }
  const isLongerThenWeek = Math.abs(date.getTime() - Date.now()) > 1000 * 60 * 60 * 24 * 7;
  let context;
  let typeVariant;
  if (isLongerThenWeek) {
    typeVariant = 'absolute';
    context = formatDate(date, {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  } else {
    const {
      value,
      unit
    } = selectUnit(date, Date.now());
    typeVariant = 'relative';
    context = formatRelativeTime(value, unit, {
      numeric: 'auto'
    });
  }
  return jsx("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [styles, overrideCss],
    "data-separator": true,
    "data-smart-element": name,
    "data-smart-element-date-time": true,
    "data-testid": testId
  }, text ? `${text} ${context}` : jsx(FormattedMessage, _extends({}, typeToDescriptorMap[type][typeVariant], {
    values: {
      context
    }
  })));
};
export default DateTimeOld;