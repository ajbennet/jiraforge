import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
/* eslint-disable @atlaskit/design-system/use-tokens-typography */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import Loadable from 'react-loadable';
import { fg } from '@atlaskit/platform-feature-flags';
import { SmartLinkSize } from '../../../constants';
export const sizeToButtonSpacing = {
  [SmartLinkSize.Small]: 'none',
  [SmartLinkSize.Medium]: 'compact',
  [SmartLinkSize.Large]: 'compact',
  [SmartLinkSize.XLarge]: 'default'
};
export const getFormattedMessage = message => {
  if (message) {
    const {
      descriptor,
      values
    } = message;
    return /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, descriptor, {
      values: values
    }));
  }
};
export const getFormattedMessageAsString = (intl, message, context) => {
  const {
    formatMessage
  } = intl;
  return message ? formatMessage(message, {
    context
  }) : '';
};

/**
 * @deprecated remove on FF bandicoots-compiled-migration-smartcard clean up
 */
const getIconDimensionStyles = value => css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  height: value,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  minHeight: value,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  maxHeight: value,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: value,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  minWidth: value,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  maxWidth: value
});

/**
 * @deprecated remove on FF bandicoots-compiled-migration-smartcard clean up
 */
export const getIconSizeStyles = width => {
  const sizeStyles = getIconDimensionStyles(width);
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return css`
		flex: 0 0 auto;
		${sizeStyles}
		span,
    svg,
    img {
			${sizeStyles}
		}
		svg {
			padding: 0;
		}
	`;
};

// TODO Delete when cleaning platform-smart-card-icon-migration
export const getIconWidthOld = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return '2rem';
    case SmartLinkSize.Large:
      return '1.5rem';
    case SmartLinkSize.Medium:
      return '1rem';
    case SmartLinkSize.Small:
    default:
      return '.75rem';
  }
};

// TODO Rename to getIconWidth when cleaning platform-smart-card-icon-migration
export const getIconWidthNew = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
    case SmartLinkSize.Large:
      return "var(--ds-space-300, 24px)";
    case SmartLinkSize.Medium:
    case SmartLinkSize.Small:
    default:
      return "var(--ds-space-200, 16px)";
  }
};

// TODO Delete when cleaning platform-smart-card-icon-migration
export const getIconWidth = size => {
  return fg('platform-smart-card-icon-migration') ? getIconWidthNew(size) : getIconWidthOld(size);
};
export const importIcon = importFn => {
  return Loadable({
    loader: () => importFn().then(module => module.default),
    loading: () => null
  }); // Because we're using dynamic loading here, TS will not be able to infer the type.
};

/**
 * @deprecated remove FF bandicoots-compiled-migration-smartcard clean up
 */
export const getLinkLineHeight = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.5rem';
    case SmartLinkSize.Large:
    case SmartLinkSize.Medium:
    case SmartLinkSize.Small:
    default:
      return '1rem';
  }
};

/**
 * @deprecated remove FF bandicoots-compiled-migration-smartcard clean up
 */
export const getLinkSizeStyles = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return css({
        font: "var(--ds-font-heading-medium, normal 500 20px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-regular, 400)",
        lineHeight: getLinkLineHeight(size)
      });
    case SmartLinkSize.Large:
    case SmartLinkSize.Medium:
      return css({
        font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-regular, 400)",
        lineHeight: getLinkLineHeight(size)
      });
    case SmartLinkSize.Small:
    default:
      return css({
        font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-regular, 400)",
        lineHeight: getLinkLineHeight(size)
      });
  }
};
export const getMaxLineHeight = size => {
  // The maximum line height based on all elements in specific size.
  // These heights belongs to AvatarGroup.
  switch (size) {
    case SmartLinkSize.XLarge:
    case SmartLinkSize.Large:
      return 1.75;
    case SmartLinkSize.Medium:
    case SmartLinkSize.Small:
    default:
      return 1.5;
  }
};
export const getMaxLines = (value, defaultValue, max, min) => {
  if (value > max) {
    return defaultValue;
  }
  if (value < min) {
    return min;
  }
  return value;
};

/**
 * A space between element based on smart link size
 * To replace blocks/utils.tsz getGapSize() with space token for primitives
 */
export const getPrimitivesInlineSpaceBySize = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return 'space.250';
    case SmartLinkSize.Large:
      return 'space.200';
    case SmartLinkSize.Medium:
      return 'space.100';
    case SmartLinkSize.Small:
    default:
      return 'space.050';
  }
};

/**
 * Get container padding based on smart link size
 * To replace container/index.tsx getPadding() with space token for primitives
 * @deprecated remove on FF clean up bandicoots-compiled-migration-smartcard
 */
export const getPrimitivesPaddingSpaceBySize = size => {
  switch (size) {
    case SmartLinkSize.XLarge:
      return 'space.300';
    case SmartLinkSize.Large:
      return 'space.250';
    case SmartLinkSize.Medium:
      return 'space.200';
    case SmartLinkSize.Small:
    default:
      return 'space.100';
  }
};

/**
 * @deprecated remove FF bandicoots-compiled-migration-smartcard clean up
 */
export const getTruncateStyles = (maxLines, lineHeight = '1rem', wordBreak = 'break-word') => css({
  display: '-webkit-box',
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  wordBreak: wordBreak,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  WebkitLineClamp: maxLines,
  WebkitBoxOrient: 'vertical',
  '@supports not (-webkit-line-clamp: 1)': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    maxHeight: `calc(${maxLines} * ${lineHeight})`
  }
});
export const hasWhiteSpace = str => {
  return str.search(/\s/) >= 0;
};