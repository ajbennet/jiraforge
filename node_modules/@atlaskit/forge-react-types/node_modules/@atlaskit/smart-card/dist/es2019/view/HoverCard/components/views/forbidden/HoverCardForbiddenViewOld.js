import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import Button from '@atlaskit/button';
import { extractProvider } from '@atlaskit/link-extractors';
import { extractRequestAccessContextImproved } from '../../../../../extractors/common/context/extractAccessContext';
import extractHostname from '../../../../../extractors/common/hostname/extractHostname';
import { messages } from '../../../../../messages';
import FlexibleCard from '../../../../FlexibleCard';
import { CustomBlock, PreviewBlock } from '../../../../FlexibleCard/components/blocks';
import { getPreviewBlockStyles } from '../../../styled';
import { connectButtonStyles, mainTextStyles, titleBlockStyles } from './styled';
const HoverCardForbiddenViewOld = ({
  flexibleCardProps,
  testId = 'hover-card-forbidden-view'
}) => {
  var _cardState$details, _cardState$details2, _extractProvider$text, _extractProvider, _extractRequestAccess;
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const {
    cardState,
    url
  } = flexibleCardProps;
  const data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  const meta = (_cardState$details2 = cardState.details) === null || _cardState$details2 === void 0 ? void 0 : _cardState$details2.meta;
  const product = (_extractProvider$text = (_extractProvider = extractProvider(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text) !== null && _extractProvider$text !== void 0 ? _extractProvider$text : '';
  const hostname = /*#__PURE__*/React.createElement("b", null, extractHostname(url));
  const {
    action,
    descriptiveMessageKey,
    titleMessageKey,
    buttonDisabled
  } = (_extractRequestAccess = extractRequestAccessContextImproved({
    jsonLd: meta,
    url,
    product,
    createAnalyticsEvent
  })) !== null && _extractRequestAccess !== void 0 ? _extractRequestAccess : {};
  if (!titleMessageKey || !descriptiveMessageKey) {
    return null;
  }
  return /*#__PURE__*/React.createElement(FlexibleCard, _extends({}, flexibleCardProps, {
    testId: testId
  }), /*#__PURE__*/React.createElement(PreviewBlock, {
    ignoreContainerPadding: true,
    overrideCss: getPreviewBlockStyles(),
    testId: testId
  }), /*#__PURE__*/React.createElement(CustomBlock, {
    overrideCss: titleBlockStyles,
    testId: `${testId}-title`
  }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages[titleMessageKey], {
    values: {
      product
    }
  }))), /*#__PURE__*/React.createElement(CustomBlock, {
    overrideCss: mainTextStyles,
    testId: `${testId}-content`
  }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages[descriptiveMessageKey], {
    values: {
      product,
      hostname
    }
  }))), action && /*#__PURE__*/React.createElement(CustomBlock, {
    overrideCss: connectButtonStyles
  }, /*#__PURE__*/React.createElement(Button, {
    testId: `${testId}-button`,
    onClick: action === null || action === void 0 ? void 0 : action.promise,
    appearance: "primary",
    isDisabled: buttonDisabled
  }, action === null || action === void 0 ? void 0 : action.text)));
};
export default HoverCardForbiddenViewOld;