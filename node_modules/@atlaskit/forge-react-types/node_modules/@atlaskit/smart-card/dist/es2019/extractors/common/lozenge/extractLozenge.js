import { extractType } from '@atlaskit/link-extractors';
import { fg } from '@atlaskit/platform-feature-flags';
import { extractState } from './extractState';
import { extractTag } from './extractTag';
import { extractTaskStatus } from './extractTaskStatus';
import { extractTaskType } from './extractTaskType';
const DOC_TYPES = ['schema:BlogPosting', 'schema:TextDigitalDocument', 'schema:DigitalDocument', 'schema:PresentationDigitalDocument', 'schema:SpreadsheetDigitalDocument'];
export const extractLozenge = jsonLd => {
  const type = extractType(jsonLd);
  if (type) {
    if (fg('linking_platform_show_lozenge_atlassian_state')) {
      if (type.includes('atlassian:Task')) {
        const jsonLdTask = jsonLd;
        const lozengeFromTag = extractTag(jsonLdTask);
        const lozengeFromStatus = extractTaskStatus(jsonLdTask);
        const lozengeFromTaskType = extractLozengeFromTaskType(jsonLdTask);
        return lozengeFromTag || lozengeFromStatus || lozengeFromTaskType;
      }
      if (type.includes('atlassian:UndefinedLink')) {
        return {
          text: 'UNDEFINED',
          appearance: 'inprogress'
        };
      }

      // casting it because `extractState` can safely handle missing properties
      return extractState(jsonLd);
    }
    if (type.includes('atlassian:SourceCodePullRequest')) {
      return extractState(jsonLd);
    } else if (type.includes('atlassian:Task')) {
      const jsonLdTask = jsonLd;
      const lozengeFromTag = extractTag(jsonLdTask);
      const lozengeFromStatus = extractTaskStatus(jsonLdTask);
      const lozengeFromTaskType = extractLozengeFromTaskType(jsonLdTask);
      return lozengeFromTag || lozengeFromStatus || lozengeFromTaskType;
    } else if (type.some(types => DOC_TYPES.includes(types))) {
      const jsonLdDocument = jsonLd;
      const lozengeFromState = extractState(jsonLdDocument);
      return lozengeFromState;
    } else if (type.includes('atlassian:Goal')) {
      const jsonLdProject = jsonLd;
      const lozengeFromState = extractState(jsonLdProject);
      return lozengeFromState;
    } else if (type.includes('atlassian:Project')) {
      const jsonLdProject = jsonLd;
      const lozengeFromState = extractState(jsonLdProject);
      return lozengeFromState;
    } else if (type.includes('atlassian:UndefinedLink')) {
      return {
        text: 'UNDEFINED',
        appearance: 'inprogress'
      };
    }
  }
};
const extractLozengeFromTaskType = jsonLdTask => {
  const taskType = extractTaskType(jsonLdTask);
  if (taskType && taskType.name) {
    return {
      text: taskType.name,
      appearance: 'success'
    };
  }
};