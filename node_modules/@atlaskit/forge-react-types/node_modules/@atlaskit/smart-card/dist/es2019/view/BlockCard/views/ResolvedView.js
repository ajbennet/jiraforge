/* ResolvedView.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./ResolvedView.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useEffect, useMemo, useState } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { ActionName, ElementName, SmartLinkPosition, SmartLinkStatus } from '../../../constants';
import FlexibleCard from '../../FlexibleCard';
import { FooterBlock, MetadataBlock, PreviewBlock, SnippetBlock, TitleBlock } from '../../FlexibleCard/components/blocks';
import ResolvedViewOld from './ResolvedViewOld';
import { FlexibleCardUiOptions, getSimulatedBetterMetadata, PreviewBlockOptions, titleBlockOptions } from './utils';
import { withFlexibleUIBlockCardStyle } from './utils/withFlexibleUIBlockCardStyle';
const titleBlockCss = null;
const footerBlockCss = null;
const metadataBlockCss = null;

/**
 * This view represents a Block card that has an 'Resolved' status.
 * @see SmartLinkStatus
 * @see FlexibleCardProps
 */
const ResolvedView = ({
  cardState,
  onClick,
  onError,
  onResolve,
  actionOptions,
  testId = 'smart-block-resolved-view',
  url
}) => {
  const [isPreviewBlockErrored, setIsPreviewBlockErrored] = useState(false);
  useEffect(() => {
    setIsPreviewBlockErrored(false);
  }, [url, cardState]);
  const {
    titleMetadata,
    topMetadata,
    bottomMetadata
  } = getSimulatedBetterMetadata(cardState.details);
  const footerActions = useMemo(() => [{
    name: ActionName.FollowAction,
    hideIcon: true
  }, {
    name: ActionName.PreviewAction,
    hideIcon: true
  }, {
    name: ActionName.DownloadAction,
    hideIcon: true
  }], []);
  const status = cardState.status;
  return /*#__PURE__*/React.createElement(FlexibleCard, {
    appearance: "block",
    cardState: cardState,
    onClick: onClick,
    onError: onError,
    onResolve: onResolve,
    origin: "smartLinkCard",
    actionOptions: actionOptions,
    testId: testId,
    ui: FlexibleCardUiOptions,
    url: url
  }, /*#__PURE__*/React.createElement(TitleBlock, _extends({}, titleBlockOptions, {
    metadata: titleMetadata,
    subtitle: [{
      name: ElementName.Location
    }],
    metadataPosition: SmartLinkPosition.Top,
    status: status,
    className: ax(["_zulpcxkx _13mh1pd9"])
  })), /*#__PURE__*/React.createElement(MetadataBlock, {
    primary: topMetadata,
    maxLines: 1,
    status: SmartLinkStatus.Resolved,
    className: ax(["_wwyvidpf _1sxbcxkx _i8d01j6v"])
  }), /*#__PURE__*/React.createElement(SnippetBlock, null), /*#__PURE__*/React.createElement(MetadataBlock, {
    primary: bottomMetadata,
    maxLines: 1,
    status: SmartLinkStatus.Resolved,
    className: ax(["_wwyvidpf _1sxbcxkx _i8d01j6v"])
  }), !isPreviewBlockErrored ? /*#__PURE__*/React.createElement(PreviewBlock, _extends({}, PreviewBlockOptions, {
    onError: () => {
      setIsPreviewBlockErrored(true);
    },
    status: SmartLinkStatus.Resolved
  })) : null, /*#__PURE__*/React.createElement(FooterBlock, {
    actions: footerActions,
    status: SmartLinkStatus.Resolved,
    className: ax(["_4t3i1k8s _g0eioxwj _1qryoxwj _sxbroxwj _1gyioxwj"])
  }));
};
const ResolvedViewExported = props => {
  if (fg('bandicoots-compiled-migration-smartcard')) {
    return /*#__PURE__*/React.createElement(ResolvedView, props);
  } else {
    return /*#__PURE__*/React.createElement(ResolvedViewOld, props);
  }
};
export default withFlexibleUIBlockCardStyle(ResolvedViewExported);