import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useMemo } from 'react';
import { SmartLinkAlignment, SmartLinkDirection, SmartLinkSize, SmartLinkWidth } from '../../../../../../constants';
import { useFlexibleUiContext } from '../../../../../../state/flexible-ui-context';
import { Provider } from '../../../elements';
import ActionGroup from '../../action-group';
import Block from '../../block';
import ElementGroup from '../../element-group';
import { filterActionItems, getActionGroupStyles } from '../../utils';
const FooterBlockResolvedViewOld = props => {
  const {
    actions,
    testId,
    onActionMenuOpenChange,
    size = SmartLinkSize.Medium,
    hideProvider
  } = props;
  const context = useFlexibleUiContext();
  const hasActions = useMemo(() => {
    var _filterActionItems;
    return ((_filterActionItems = filterActionItems(actions, context)) === null || _filterActionItems === void 0 ? void 0 : _filterActionItems.length) > 0;
  }, [actions, context]);
  const onDropdownOpenChange = useCallback(isOpen => {
    if (onActionMenuOpenChange) {
      onActionMenuOpenChange({
        isOpen
      });
    }
  }, [onActionMenuOpenChange]);
  return /*#__PURE__*/React.createElement(Block, _extends({}, props, {
    testId: `${testId}-resolved-view`
  }), !hideProvider && /*#__PURE__*/React.createElement(Provider, {
    testId: `${testId}-provider`
  }), actions && hasActions ? /*#__PURE__*/React.createElement(ElementGroup, {
    testId: "smart-element-group-actions",
    align: SmartLinkAlignment.Right,
    direction: SmartLinkDirection.Horizontal,
    overrideCss: getActionGroupStyles(size),
    width: SmartLinkWidth.Flexible
  }, /*#__PURE__*/React.createElement(ActionGroup, {
    onDropdownOpenChange: onDropdownOpenChange,
    items: actions,
    appearance: "default"
  })) : null);
};
export default FooterBlockResolvedViewOld;