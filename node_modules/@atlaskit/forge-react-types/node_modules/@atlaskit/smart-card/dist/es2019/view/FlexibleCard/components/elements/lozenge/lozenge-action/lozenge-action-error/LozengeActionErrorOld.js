/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment, useCallback, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import { DropdownItem, DropdownItemGroup } from '@atlaskit/dropdown-menu';
import ErrorIcon from '@atlaskit/icon/core/migration/error';
import { R50, R500 } from '@atlaskit/theme/colors';
import { useAnalyticsEvents } from '../../../../../../../common/analytics/generated/use-analytics-events';
import { messages } from '../../../../../../../messages';
import useInvokeClientAction from '../../../../../../../state/hooks/use-invoke-client-action';
import { getFormattedMessage } from '../../../../utils';
import { contentStyles, dropdownItemGroupStyles, linkStyles, textStyles } from './styled';
const MAX_LINE_NUMBER = 8;
const LozengeActionErrorOld = ({
  errorMessage,
  testId,
  maxLineNumber = MAX_LINE_NUMBER,
  invokePreviewAction
}) => {
  const {
    fireEvent
  } = useAnalyticsEvents();
  const invoke = useInvokeClientAction({});
  const isPreviewAvailable = invokePreviewAction !== undefined;
  const handlePreviewOpen = useCallback(() => {
    if (isPreviewAvailable) {
      fireEvent('ui.button.clicked.smartLinkStatusOpenPreview', {});
      if (invokePreviewAction) {
        invoke(invokePreviewAction);
      }
    }
  }, [isPreviewAvailable, invoke, invokePreviewAction, fireEvent]);
  const content = useMemo(() => {
    return jsx(Fragment, null, jsx("div", {
      css: contentStyles
    }, jsx(ErrorIcon, {
      testId: `${testId}-icon`,
      LEGACY_size: "medium",
      color: `var(--ds-icon-danger, ${R500})`,
      LEGACY_secondaryColor: `var(--ds-background-danger, ${R50})`,
      label: 'error',
      spacing: "spacious"
    }), jsx("span", {
      css: textStyles(maxLineNumber),
      "data-testid": `${testId}-error-message`
    }, typeof errorMessage === 'string' ? errorMessage : getFormattedMessage(errorMessage))), isPreviewAvailable ?
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("div", {
      css: linkStyles
    }, jsx("a", {
      target: "_blank",
      "data-testid": `${testId}-open-embed`,
      onClick: handlePreviewOpen
    }, jsx(FormattedMessage, messages.open_issue_in_jira))) : null);
  }, [errorMessage, handlePreviewOpen, isPreviewAvailable, maxLineNumber, testId]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("span", {
      css: dropdownItemGroupStyles,
      "data-testid": `${testId}-error-item-group`
    }, jsx(DropdownItemGroup, null, jsx(DropdownItem, {
      testId: `${testId}-error`
    }, content)))
  );
};
export default LozengeActionErrorOld;