import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

import extractPreview from '../../../extractors/flexible/extract-preview';
import { PreviewBlock } from '../../FlexibleCard/components/blocks';
import { getPreviewBlockStyles, getTransitionStyles } from '../styled';
var ImagePreviewOld = function ImagePreviewOld(_ref) {
  var data = _ref.data,
    fallbackElementHeight = _ref.fallbackElementHeight;
  var transitionStarted = useRef(false);
  var previewBlockRef = useRef(null);
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    showPreview = _useState2[0],
    setShowPreview = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    previewCss = _useState4[0],
    setPreviewCss = _useState4[1];

  // Set Preview to a fixed height to enable transitions
  var onPreviewRender = useCallback(function () {
    var _previewBlockRef$curr;
    previewBlockRef.current && setPreviewCss(getPreviewBlockStyles((_previewBlockRef$curr = previewBlockRef.current) === null || _previewBlockRef$curr === void 0 ? void 0 : _previewBlockRef$curr.getBoundingClientRect().height));
  }, []);

  // On error set Preview to Fallback height with transition
  var onPreviewError = useCallback(function () {
    if (transitionStarted.current === false) {
      setPreviewCss(getTransitionStyles(fallbackElementHeight));
      transitionStarted.current = true;
    }
  }, [fallbackElementHeight]);
  var onPreviewTransitionEnd = useCallback(function () {
    setShowPreview(false);
  }, []);
  return showPreview && data && extractPreview(data) ? /*#__PURE__*/React.createElement(PreviewBlock, {
    onError: onPreviewError,
    ignoreContainerPadding: true,
    overrideCss: previewCss,
    onTransitionEnd: onPreviewTransitionEnd,
    blockRef: previewBlockRef,
    onRender: onPreviewRender
  }) : null;
};
export default ImagePreviewOld;