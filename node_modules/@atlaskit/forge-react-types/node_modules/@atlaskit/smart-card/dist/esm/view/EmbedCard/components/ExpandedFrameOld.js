/* ExpandedFrameOld.tsx generated by @compiled/babel-plugin v0.36.1 */
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import Tooltip from '@atlaskit/tooltip';
import { useMouseDownEvent } from '../../../state/analytics/useLinkClicked';
import { handleClickCommon } from '../../common/utils';
import { className, Content, Header, IconWrapper, LinkWrapper, TextWrapper, TooltipWrapper, Wrapper } from './styledOld';
export var ExpandedFrameOld = function ExpandedFrameOld(_ref) {
  var _ref$isPlaceholder = _ref.isPlaceholder,
    isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder,
    children = _ref.children,
    onClick = _ref.onClick,
    icon = _ref.icon,
    text = _ref.text,
    isSelected = _ref.isSelected,
    _ref$frameStyle = _ref.frameStyle,
    frameStyle = _ref$frameStyle === void 0 ? 'showOnHover' : _ref$frameStyle,
    href = _ref.href,
    minWidth = _ref.minWidth,
    maxWidth = _ref.maxWidth,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'expanded-frame' : _ref$testId,
    inheritDimensions = _ref.inheritDimensions,
    _ref$allowScrollBar = _ref.allowScrollBar,
    allowScrollBar = _ref$allowScrollBar === void 0 ? false : _ref$allowScrollBar,
    _ref$setOverflow = _ref.setOverflow,
    setOverflow = _ref$setOverflow === void 0 ? true : _ref$setOverflow;
  var isInteractive = function isInteractive() {
    return !isPlaceholder && (Boolean(href) || Boolean(onClick));
  };
  var handleClick = function handleClick(event) {
    return handleClickCommon(event, onClick);
  };
  var handleMouseDown = useMouseDownEvent();
  var renderHeader = function renderHeader() {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      React.createElement(Header, {
        className: "embed-header",
        frameStyle: frameStyle
      }, /*#__PURE__*/React.createElement(IconWrapper, {
        isPlaceholder: isPlaceholder
      }, !isPlaceholder && icon), /*#__PURE__*/React.createElement(TooltipWrapper, null, /*#__PURE__*/React.createElement(Tooltip, {
        content: text,
        hideTooltipOnMouseDown: true
      }, /*#__PURE__*/React.createElement(TextWrapper, {
        isPlaceholder: isPlaceholder
      }, !isPlaceholder && /*#__PURE__*/React.createElement("a", {
        href: href,
        onClick: handleClick,
        onMouseDown: handleMouseDown
      }, text)))))
    );
  };
  var renderContent = function renderContent() {
    return /*#__PURE__*/React.createElement(Content, {
      "data-testid": "embed-content-wrapper",
      allowScrollBar: allowScrollBar,
      removeOverflow: !setOverflow,
      isInteractive: isInteractive(),
      frameStyle: frameStyle
      // This fixes an issue with input fields in cross domain iframes (ie. databases and jira fields from different domains)
      // See: HOT-107830
      ,
      contentEditable: 'false',
      suppressContentEditableWarning: true
    }, children);
  };
  if (!isPlaceholder && href) {
    return /*#__PURE__*/React.createElement(LinkWrapper
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      isInteractive: isInteractive(),
      isSelected: isSelected,
      frameStyle: frameStyle,
      minWidth: minWidth,
      maxWidth: maxWidth,
      "data-testid": testId,
      "data-trello-do-not-use-override": testId
      // Due to limitations of testing library, we can't assert ::after
      ,
      "data-is-selected": isSelected,
      inheritDimensions: inheritDimensions
    }, renderHeader(), renderContent());
  } else {
    return /*#__PURE__*/React.createElement(Wrapper
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      isInteractive: isInteractive(),
      isSelected: isSelected,
      minWidth: minWidth,
      frameStyle: frameStyle,
      maxWidth: maxWidth,
      "data-testid": testId,
      "data-trello-do-not-use-override": testId,
      "data-is-selected": isSelected,
      "data-wrapper-type": "default",
      "data-is-interactive": isInteractive()
    }, renderHeader(), renderContent());
  }
};