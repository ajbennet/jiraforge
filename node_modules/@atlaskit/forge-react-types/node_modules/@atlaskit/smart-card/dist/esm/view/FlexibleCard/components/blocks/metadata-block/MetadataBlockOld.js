import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["maxLines", "status", "testId", "primary", "secondary"];
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css } from '@emotion/react';
import { SmartLinkAlignment, SmartLinkDirection, SmartLinkSize, SmartLinkStatus, SmartLinkWidth } from '../../../../../constants';
import { getMaxLineHeight, getTruncateStyles } from '../../utils';
import Block from '../block';
import ElementGroup from '../element-group';
import { renderElementItems } from '../utils';
var DEFAULT_MAX_LINES = 2;
var MAXIMUM_MAX_LINES = 2;
var MINIMUM_MAX_LINES = 1;
var getElementGroupStyles = function getElementGroupStyles(size, maxLines) {
  // MetadataBlock allows metadata elements to be displayed in
  // multiple lines, with maximum of 2 lines.
  // We need the height of the line to be equal on both left and right
  // sides so they line up nicely.
  var lineHeight = getMaxLineHeight(size);
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/use-tokens-typography -- Ignored via go/DSP-18766
    lineHeight: "".concat(lineHeight, "rem")
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getTruncateStyles(maxLines, lineHeight + 'rem'));
};
var getMaxLines = function getMaxLines(maxLines) {
  if (maxLines > MAXIMUM_MAX_LINES) {
    return DEFAULT_MAX_LINES;
  }
  if (maxLines < MINIMUM_MAX_LINES) {
    return MINIMUM_MAX_LINES;
  }
  return maxLines;
};

/**
 * Represents a MetadataBlock, designed to contain groups of metadata in the form of elements.
 * Accepts an array of elements to be shown either primary (left hand side) or secondary (right hand side).
 * @public
 * @param {MetadataBlockProps} MetadataBlockProps
 * @see Block
 */
var MetadataBlockOld = function MetadataBlockOld(_ref) {
  var _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? SmartLinkStatus.Fallback : _ref$status,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-metadata' : _ref$testId,
    _ref$primary = _ref.primary,
    primary = _ref$primary === void 0 ? [] : _ref$primary,
    _ref$secondary = _ref.secondary,
    secondary = _ref$secondary === void 0 ? [] : _ref$secondary,
    blockProps = _objectWithoutProperties(_ref, _excluded);
  if (primary.length === 0 && secondary.length === 0 || status !== SmartLinkStatus.Resolved) {
    return null;
  }
  var primaryElements = renderElementItems(primary);
  var secondaryElements = renderElementItems(secondary);
  var _blockProps$size = blockProps.size,
    size = _blockProps$size === void 0 ? SmartLinkSize.Medium : _blockProps$size;
  var elementGroupStyles = getElementGroupStyles(size, getMaxLines(maxLines));
  return /*#__PURE__*/React.createElement(Block, _extends({}, blockProps, {
    testId: "".concat(testId, "-resolved-view")
  }), primaryElements && /*#__PURE__*/React.createElement(ElementGroup, {
    align: SmartLinkAlignment.Left,
    overrideCss: elementGroupStyles,
    direction: SmartLinkDirection.Horizontal,
    width: SmartLinkWidth.Flexible
  }, primaryElements), secondaryElements && /*#__PURE__*/React.createElement(ElementGroup, {
    align: SmartLinkAlignment.Right,
    overrideCss: elementGroupStyles,
    direction: SmartLinkDirection.Horizontal,
    width: SmartLinkWidth.Flexible
  }, secondaryElements));
};
export default MetadataBlockOld;