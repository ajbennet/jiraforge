import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["actionGroup", "retry", "position", "testId", "title", "icon", "hideIcon"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import { Box } from '@atlaskit/primitives';
import { SmartLinkAlignment, SmartLinkDirection, SmartLinkSize } from '../../../../../../constants';
import { LinkIcon } from '../../../elements';
import { getLinkLineHeight, getLinkSizeStyles, getTruncateStyles } from '../../../utils';
import Block from '../../block';
import ElementGroup from '../../element-group';
var actionStyles = css({
  cursor: 'pointer',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    color: "var(--ds-text-subtle, #8993A4)",
    textDecoration: 'underline'
  }
});
var actionHoverStyles = css({
  position: 'relative',
  zIndex: 1,
  '&:focus': {
    outlineOffset: "var(--ds-space-negative-025, -2px)"
  }
});

/**
 * This function does not work in the component below as it needs to be xcss.
 * The component instead uses inherited styles
 */
var getMessageStyles = function getMessageStyles(size, hasAction) {
  var sizeStyles = getLinkSizeStyles(size);
  return css({
    flex: '1 1 auto',
    justifyContent: 'flex-end'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  hasAction ? actionStyles : '',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  sizeStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getTruncateStyles(1, getLinkLineHeight(size)), {
    color: "var(--ds-text-disabled, #6B778C)",
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    ':focus': {
      outline: "var(--ds-border-focused, #388BFF)".concat(" solid 2px")
    }
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  hasAction ? actionHoverStyles : '');
};

/**
 * Represents an Errored TitleBlock view.
 * This will render when a Smart Link did not successfully resolve.
 * This may be a result of a Smart Link not having the correct credentials,
 * or the backend response was errored or malformed.
 * @see TitleBlock
 */
var TitleBlockErroredViewOld = function TitleBlockErroredViewOld(_ref) {
  var actionGroup = _ref.actionGroup,
    retry = _ref.retry,
    position = _ref.position,
    testId = _ref.testId,
    title = _ref.title,
    icon = _ref.icon,
    hideIcon = _ref.hideIcon,
    blockProps = _objectWithoutProperties(_ref, _excluded);
  var _ref2 = retry || {},
    descriptor = _ref2.descriptor,
    onClick = _ref2.onClick,
    values = _ref2.values;
  var _blockProps$size = blockProps.size,
    size = _blockProps$size === void 0 ? SmartLinkSize.Medium : _blockProps$size;
  var hasAction = onClick !== undefined;
  return jsx(Block, _extends({}, blockProps, {
    testId: "".concat(testId, "-errored-view")
  }), !hideIcon && jsx(LinkIcon, {
    overrideIcon: icon,
    position: position
  }), title, descriptor && jsx(ElementGroup, {
    direction: SmartLinkDirection.Horizontal,
    align: SmartLinkAlignment.Right
  }, jsx(Box
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
  , {
    xcss: getMessageStyles(size, hasAction),
    onClick: onClick,
    testId: "".concat(testId, "-errored-view-message"),
    tabIndex: hasAction ? 0 : -1
  }, jsx(FormattedMessage, _extends({}, descriptor, {
    values: values
  })))), actionGroup);
};
export default TitleBlockErroredViewOld;