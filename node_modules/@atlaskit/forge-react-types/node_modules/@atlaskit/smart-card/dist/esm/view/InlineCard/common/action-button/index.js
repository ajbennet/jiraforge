import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children"];
import React, { forwardRef } from 'react';
import { Box, xcss } from '@atlaskit/primitives';
/**
 * Action button has to be a span for the overflow to work correctly
 */
export var ActionButton = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded);
  // `Button transforms `testId` into `data-testid`. We need to transform it back to `testId`
  var testId = props["data-testid"];
  return /*#__PURE__*/React.createElement(Box, _extends({
    as: "span",
    ref: ref,
    xcss: [actionButtonStyle, !props.disabled && actionButtonNotDisabledStyle]
  }, props, {
    "aria-disabled": props.disabled,
    role: "button",
    testId: testId
  }), /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: internalButtonStyle
  }, children));
});
var actionButtonStyle = xcss({
  textAlign: 'initial',
  display: 'inline',
  borderRadius: 'border.radius.100',
  borderTopLeftRadius: '0px',
  borderBottomLeftRadius: '0px',
  backgroundClip: 'padding-box',
  boxDecorationBreak: 'clone',
  font: 'font.body.large',
  paddingTop: 'space.025',
  paddingLeft: 'space.075',
  paddingBottom: 'space.025',
  paddingRight: 'space.075',
  whiteSpace: 'nowrap',
  backgroundColor: 'color.background.neutral',
  cursor: 'not-allowed',
  color: 'color.text.disabled'
});
var internalButtonStyle = xcss({
  font: 'font.body'
});
var actionButtonNotDisabledStyle = xcss({
  color: 'color.text',
  cursor: 'pointer',
  ':hover': {
    backgroundColor: 'color.background.neutral.hovered'
  }
});