import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import LinkIcon from '@atlaskit/icon/core/migration/link';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { SmartLinkPosition, SmartLinkSize } from '../../../../../constants';
import AtlaskitIcon from '../../common/atlaskit-icon';
import ImageIcon from '../../common/image-icon';
import { getIconSizeStyles, getIconWidth, getTruncateStyles } from '../../utils';
var getPositionStyles = function getPositionStyles(position) {
  switch (position) {
    case SmartLinkPosition.Center:
      return css({
        alignSelf: 'center'
      });
    case SmartLinkPosition.Top:
    default:
      return css({
        alignSelf: 'flex-start',
        margin: 0
      });
  }
};
var getIconStyles = function getIconStyles(position, width) {
  return (
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    css(getPositionStyles(position), getIconSizeStyles(width))
  );
};
var getCustomRenderStyles = function getCustomRenderStyles(value) {
  return (
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    css(getTruncateStyles(1, value), {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/use-tokens-typography -- Ignored via go/DSP-18766
      lineHeight: value,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      fontSize: value,
      textAlign: 'center',
      textOverflow: 'clip',
      WebkitBoxOrient: 'unset',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      span: {
        margin: 0,
        padding: 0,
        verticalAlign: 'baseline'
      }
    })
  );
};
var renderAtlaskitIcon = function renderAtlaskitIcon(icon, testId) {
  var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SmartLinkSize.Medium;
  if (icon) {
    return jsx(AtlaskitIcon, _extends({
      icon: icon,
      testId: "".concat(testId, "-icon")
    }, fg('platform-smart-card-icon-migration') && {
      size: size
    }));
  }
};
var renderDefaultIcon = function renderDefaultIcon(label, testId) {
  return jsx(LinkIcon, {
    label: label,
    testId: "".concat(testId, "-default"),
    color: "currentColor"
  });
};
var renderImageIcon = function renderImageIcon(defaultIcon, url, testId) {
  var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : SmartLinkSize.Medium;
  var width = size === SmartLinkSize.Large ? "var(--ds-space-300, 24px)" : "var(--ds-space-200, 16px)";
  if (url) {
    return jsx(ImageIcon, _extends({
      defaultIcon: defaultIcon,
      testId: testId,
      url: url
    }, fg('platform-smart-card-icon-migration') && {
      width: width,
      height: width
    }));
  }
};

/**
 * A base element that displays an Icon or favicon.
 * @internal
 * @param {IconProps} IconProps - The props necessary for the Icon element.
 * @see LinkIcon
 */
var IconOld = function IconOld(_ref) {
  var icon = _ref.icon,
    overrideIcon = _ref.overrideIcon,
    _ref$label = _ref.label,
    label = _ref$label === void 0 ? 'Link' : _ref$label,
    name = _ref.name,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? SmartLinkPosition.Top : _ref$position,
    overrideCss = _ref.overrideCss,
    render = _ref.render,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? SmartLinkSize.Medium : _ref$size,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-icon' : _ref$testId,
    url = _ref.url;
  var element = useMemo(function () {
    var defaultIcon = renderDefaultIcon(label, testId);
    return overrideIcon || (render === null || render === void 0 ? void 0 : render()) || renderImageIcon(defaultIcon, url, testId, fg('platform-smart-card-icon-migration') ? size : undefined) || renderAtlaskitIcon(icon, testId, fg('platform-smart-card-icon-migration') ? size : undefined) || defaultIcon;
  }, [overrideIcon, icon, label, render, testId, url, size]);
  var width = getIconWidth(size);
  var styles = getIconStyles(position, width);
  var renderStyles = render ? getCustomRenderStyles(width) : undefined;
  return jsx("div", {
    css: [
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- needs dynamic css
    !fg('platform-smart-card-icon-migration') && styles,
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- needs dynamic css
    renderStyles,
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- needs dynamic css
    overrideCss],
    "data-fit-to-content": true,
    "data-smart-element": name,
    "data-smart-element-icon": true,
    "data-testid": testId
  }, fg('platform-smart-card-icon-migration') ? jsx(Box, {
    xcss: iconWrapperStyle,
    style: {
      width: width,
      height: width
    }
  }, element) : element);
};
var iconWrapperStyle = xcss({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
});
export default IconOld;