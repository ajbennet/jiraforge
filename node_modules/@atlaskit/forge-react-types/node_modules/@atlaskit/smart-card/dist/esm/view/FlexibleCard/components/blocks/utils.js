import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["name"];
var _ElementDisplaySchema, _templateObject;
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css } from '@emotion/react';
import { ActionName, ElementName, SmartLinkDirection, SmartLinkSize } from '../../../../constants';
import { isFlexibleUiElement } from '../../../../utils/flexible';
import * as Elements from '../elements';
import ActionGroup from './action-group';
import ElementGroup from './element-group';

// Determine whether the element can be display as inline/block.

export var ElementDisplaySchema = (_ElementDisplaySchema = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ElementDisplaySchema, ElementName.AssignedTo, ['inline']), ElementName.AssignedToGroup, ['inline']), ElementName.AttachmentCount, ['inline']), ElementName.AuthorGroup, ['inline']), ElementName.ChecklistProgress, ['inline']), ElementName.CollaboratorGroup, ['inline']), ElementName.CommentCount, ['inline']), ElementName.CreatedBy, ['inline']), ElementName.CreatedOn, ['inline']), ElementName.DueOn, ['inline']), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ElementDisplaySchema, ElementName.LatestCommit, ['inline']), ElementName.LinkIcon, ['inline']), ElementName.Location, ['inline']), ElementName.ModifiedBy, ['inline']), ElementName.ModifiedOn, ['inline']), ElementName.OwnedBy, ['inline']), ElementName.OwnedByGroup, ['inline']), ElementName.Preview, ['block']), ElementName.Priority, ['inline']), ElementName.ProgrammingLanguage, ['inline']), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ElementDisplaySchema, ElementName.Provider, ['inline']), ElementName.ReactCount, ['inline']), ElementName.ReadTime, ['inline']), ElementName.Snippet, ['block']), ElementName.SourceBranch, ['inline']), ElementName.SentOn, ['inline']), ElementName.State, ['inline']), ElementName.SubscriberCount, ['inline']), ElementName.SubTasksProgress, ['inline']), ElementName.StoryPoints, ['inline']), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_ElementDisplaySchema, ElementName.TargetBranch, ['inline']), ElementName.Title, ['inline']), ElementName.ViewCount, ['inline']), ElementName.VoteCount, ['inline']));
var getDirectionStyles = function getDirectionStyles(direction) {
  switch (direction) {
    case SmartLinkDirection.Vertical:
      return css({
        flexDirection: 'column',
        alignItems: 'flex-start'
      });
    case SmartLinkDirection.Horizontal:
    default:
      return css({
        flexDirection: 'row',
        alignItems: 'center'
      });
  }
};

/**
 * Get gap size between elements inside a block
 * Equivalent version for DS primitives space token is getPrimitivesInlineSpaceBySize()
 * at view/FlexibleCard/components/utils.tsx
 */
export var getGapSize = function getGapSize(size) {
  switch (size) {
    case SmartLinkSize.XLarge:
      return 1.25;
    case SmartLinkSize.Large:
      return 1;
    case SmartLinkSize.Medium:
      return 0.5;
    case SmartLinkSize.Small:
    default:
      return 0.25;
  }
};

/**
 * @deprecated remove on FF clean up bandicoots-compiled-migration-smartcard
 */
export var getBaseStyles = function getBaseStyles(direction, size) {
  return css({
    alignItems: 'center',
    display: 'flex',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    gap: "".concat(getGapSize(size), "rem"),
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: '1rem',
    minWidth: 0,
    overflow: 'hidden'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getDirectionStyles(direction), {
    '&:empty': {
      display: 'none'
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '& > *': {
      minWidth: 0
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '& > [data-fit-to-content]': {
      minWidth: 'fit-content'
    }
  });
};

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var highlightRemoveStyles = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\toutline: none !important;\n\toutline-color: inherit;\n\tcolor: inherit;\n\t-webkit-tap-highlight-color: transparent;\n\t-webkit-touch-callout: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n"])));
var isActionGroup = function isActionGroup(node) {
  return /*#__PURE__*/React.isValidElement(node) && node.type === ActionGroup;
};
var isElementDisplayValid = function isElementDisplayValid(name, display) {
  var _ElementDisplaySchema2, _ElementDisplaySchema3;
  return (_ElementDisplaySchema2 = (_ElementDisplaySchema3 = ElementDisplaySchema[name]) === null || _ElementDisplaySchema3 === void 0 ? void 0 : _ElementDisplaySchema3.includes(display)) !== null && _ElementDisplaySchema2 !== void 0 ? _ElementDisplaySchema2 : false;
};
export var isJSXElementNull = function isJSXElementNull(children) {
  return Boolean(children.type() === null);
};
var isElementOrElementGroup = function isElementOrElementGroup(node) {
  return /*#__PURE__*/React.isValidElement(node) && (isFlexibleUiElement(node) || node.type === ElementGroup);
};
export var getActionGroupStyles = function getActionGroupStyles(size) {
  if (size === SmartLinkSize.XLarge) {
    // The biggest height of the action button exceeds the max line-height
    // of the elements causing the action on the block with x-large size to
    // get cut at the bottom.
    return css({
      maxHeight: '2rem'
    });
  }
};
export var filterActionItems = function filterActionItems() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var context = arguments.length > 1 ? arguments[1] : undefined;
  return items.filter(function (item) {
    switch (item.name) {
      case ActionName.DeleteAction:
      case ActionName.EditAction:
      case ActionName.CustomAction:
        // Named and custom actions that user defines.
        return Boolean(ActionName[item.name]);
      default:
        // Action that require data from the data context to render.
        if ((context === null || context === void 0 ? void 0 : context.actions) === undefined) {
          return false;
        }
        return Boolean(item.name in context.actions ? context.actions[item.name] : undefined);
    }
  });
};
export var renderChildren = function renderChildren(children, size) {
  return React.Children.map(children, function (child) {
    if (isElementOrElementGroup(child) || isActionGroup(child)) {
      var node = child;
      var childSize = node.props.size;
      return /*#__PURE__*/React.cloneElement(node, {
        size: childSize || size
      });
    }
    return child;
  });
};
export var renderElementItems = function renderElementItems() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'inline';
  var elements = items.reduce(function (acc, curr, idx) {
    var name = curr.name,
      props = _objectWithoutProperties(curr, _excluded);
    var Element = Elements[name];
    var typedProps = props;
    if (Element && isElementDisplayValid(name, display)) {
      var element = /*#__PURE__*/React.createElement(Element, _extends({
        key: idx
      }, typedProps));
      if (!isJSXElementNull(element)) {
        return [].concat(_toConsumableArray(acc), [element]);
      }
    }
    return acc;
  }, []);
  if (elements.length) {
    return elements;
  }
};