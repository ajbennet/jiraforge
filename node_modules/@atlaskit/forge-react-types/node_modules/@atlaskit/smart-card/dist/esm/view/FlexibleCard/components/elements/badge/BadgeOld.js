import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject, _messageMapper;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { IconType } from '../../../../../constants';
import { messages } from '../../../../../messages';
import AtlaskitIcon from '../../common/atlaskit-icon';
import ImageIcon from '../../common/image-icon';
import { getFormattedMessage, getIconSizeStyles } from '../../utils';
var badgeStyles = css({
  alignItems: 'center',
  display: 'inline-flex',
  minWidth: 'fit-content'
});

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var iconStyles = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\tcolor: ", ";\n\tline-height: 0;\n\tvertical-align: middle;\n\t", "\n\timg,\n  span,\n  svg {\n\t\tline-height: 0;\n\t\tvertical-align: middle;\n\t}\n"])), "var(--ds-icon-subtle, #626F86)", getIconSizeStyles('1rem'));
var labelStyles = css({
  color: "var(--ds-text-subtlest, #626F86)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  paddingLeft: "var(--ds-space-025, 0.125rem)",
  verticalAlign: 'middle'
});
var messageMapper = (_messageMapper = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_messageMapper, IconType.PriorityBlocker, messages.priority_blocker), IconType.PriorityCritical, messages.priority_critical), IconType.PriorityHigh, messages.priority_high), IconType.PriorityHighest, messages.priority_highest), IconType.PriorityLow, messages.priority_low), IconType.PriorityLowest, messages.priority_lowest), IconType.PriorityMajor, messages.priority_major), IconType.PriorityMedium, messages.priority_medium), IconType.PriorityMinor, messages.priority_minor), IconType.PriorityTrivial, messages.priority_trivial), _defineProperty(_messageMapper, IconType.PriorityUndefined, messages.priority_undefined));
var getFormattedMessageFromIcon = function getFormattedMessageFromIcon(icon) {
  if (icon) {
    var descriptor = messageMapper[icon];
    if (descriptor) {
      return getFormattedMessage({
        descriptor: descriptor
      });
    }
  }
};
var renderAtlaskitIcon = function renderAtlaskitIcon(icon, testId) {
  if (icon) {
    return jsx(AtlaskitIcon, {
      icon: icon,
      label: icon,
      testId: "".concat(testId, "-icon")
    });
  }
};
var renderImageIcon = function renderImageIcon(url, testId) {
  if (url) {
    return jsx(ImageIcon, {
      testId: testId,
      url: url
    });
  }
};

/**
 * A base element that displays some text with an associated icon.
 * @internal
 * @param {BadgeProps} BadgeProps - The props necessary for the Badge.
 * @see CommentCount
 * @see ViewCount
 * @see ReactCount
 * @see VoteCount
 * @see SubscriberCount
 * @see Priority
 * @see ProgrammingLanguage
 * @see Provider
 */
var BadgeOld = function BadgeOld(_ref) {
  var _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    icon = _ref.icon,
    label = _ref.label,
    name = _ref.name,
    overrideCss = _ref.overrideCss,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-badge' : _ref$testId,
    url = _ref.url;
  var formattedMessageOrLabel = getFormattedMessageFromIcon(icon) || label;
  var badgeIcon = renderAtlaskitIcon(icon, testId) || renderImageIcon(url, testId);
  if (!formattedMessageOrLabel || !badgeIcon) {
    return null;
  }
  return jsx("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [badgeStyles, overrideCss],
    "data-fit-to-content": true,
    "data-smart-element": name,
    "data-smart-element-badge": true,
    "data-testid": testId
  }, !hideIcon && jsx("span", {
    css: iconStyles
  }, badgeIcon), jsx("span", {
    css: labelStyles,
    "data-testid": "".concat(testId, "-label")
  }, formattedMessageOrLabel));
};
export default BadgeOld;