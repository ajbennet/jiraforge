import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _excluded = ["ignoreContainerPadding", "onError", "overrideCss", "placement", "testId", "overrideUrl"];
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { MediaPlacement } from '../../../../../../constants';
import { Preview } from '../../../elements';
import Block from '../../block';
/**
 * Due to its placement on the left/right and ignoreContainerPadding prop
 * rely on its parent container styling, css variables are declared in
 * <Container /> to preset the base values for the preview block styling.
 *
 * `--container-padding` is the padding of the Container. This value is based
 *   on size and hidePadding.
 * `--container-gap-left` and `--container-gap-right` are the gap or padding of
 *   the Container depending on whether the container has other preview blocks
 *   with left/right positioning.
 * `--preview-block-width` is the size of the preview image in relation to
 *   the Container width when the placement is left/right.
 * @param placement
 * @param ignoreContainerPadding
 */
var getPreviewBlockStyles = function getPreviewBlockStyles(placement, ignoreContainerPadding) {
  if (placement === MediaPlacement.Left || placement === MediaPlacement.Right) {
    var containerPadding = ignoreContainerPadding ? '0rem' : 'var(--container-padding)';
    // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
    return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t\t\tposition: absolute;\n\t\t\ttop: ", ";\n\t\t\tbottom: ", ";\n\t\t\twidth: calc(var(--preview-block-width) - ", ");\n\n\t\t\t", "\n\t\t\t", "\n\n      [data-smart-element-media='image'] {\n\t\t\t\taspect-ratio: unset;\n\t\t\t\tpadding-top: unset;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tobject-fit: cover;\n\t\t\t}\n\t\t"])), containerPadding, containerPadding, containerPadding, placement === MediaPlacement.Left ? "left: ".concat(containerPadding, ";") : '', placement === MediaPlacement.Right ? "right: ".concat(containerPadding, ";") : '');
  }
  if (ignoreContainerPadding) {
    return css({
      marginLeft: 'calc(var(--container-gap-left) * -1)',
      marginRight: 'calc(var(--container-gap-right) * -1)',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
      '&:first-of-type': {
        marginTop: 'calc(var(--container-padding) * -1)'
      },
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
      '&:last-of-type': {
        marginBottom: 'calc(var(--container-padding) * -1)'
      }
    });
  }
};

/**
 * Represents a resolved PreviewBlock, which typically contains media or other large format content.
 * @public
 * @param {PreviewBlock} PreviewBlock
 * @see Block
 */
var PreviewBlockResolvedViewOld = function PreviewBlockResolvedViewOld(_ref) {
  var _ref$ignoreContainerP = _ref.ignoreContainerPadding,
    ignoreContainerPadding = _ref$ignoreContainerP === void 0 ? false : _ref$ignoreContainerP,
    onError = _ref.onError,
    overrideCss = _ref.overrideCss,
    placement = _ref.placement,
    testId = _ref.testId,
    overrideUrl = _ref.overrideUrl,
    blockProps = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(overrideCss),
    _useState2 = _slicedToArray(_useState, 2),
    styles = _useState2[0],
    setStyles = _useState2[1];
  var updateStyles = useCallback(function () {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    setStyles(css(getPreviewBlockStyles(placement, ignoreContainerPadding), overrideCss));
  }, [ignoreContainerPadding, overrideCss, placement]);
  useEffect(function () {
    updateStyles();
  }, [ignoreContainerPadding, overrideCss, placement, updateStyles]);
  var handleOnLoad = useCallback(function () {
    updateStyles();
  }, [updateStyles]);
  var handleOnError = useCallback(function () {
    if (onError) {
      onError();
    }
  }, [onError]);
  return jsx(Block, _extends({}, blockProps, {
    overrideCss: styles,
    testId: "".concat(testId, "-resolved-view")
  }), jsx(Preview, {
    onError: handleOnError,
    onLoad: handleOnLoad,
    overrideUrl: overrideUrl
  }));
};
export default PreviewBlockResolvedViewOld;