"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardActionsView = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = require("@emotion/react");
var _react2 = require("react");
var _cardActionIconButton = require("./cardActionIconButton");
var _cardActionsDropdownMenu = require("./cardActionsDropdownMenu");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var CardActionsView = exports.CardActionsView = /*#__PURE__*/function (_Component) {
  function CardActionsView() {
    (0, _classCallCheck2.default)(this, CardActionsView);
    return _callSuper(this, CardActionsView, arguments);
  }
  (0, _inherits2.default)(CardActionsView, _Component);
  return (0, _createClass2.default)(CardActionsView, [{
    key: "render",
    value: function render() {
      var actions = this.props.actions;
      if (!actions.length) {
        return null;
      }
      var primaryAction = actions.find(actionWithIcon);
      var otherActions = actions.filter(actionNotEqualTo(primaryAction));
      return (0, _react.jsx)(_react2.Fragment, null, primaryAction ? this.renderActionIconButton(primaryAction, true) : null, this.renderOtherActionButtons(otherActions));
    }
  }, {
    key: "renderActionIconButton",
    value: function renderActionIconButton(action, isPrimary) {
      var _this$props = this.props,
        triggerColor = _this$props.triggerColor,
        filename = _this$props.filename,
        variant = _this$props.variant;
      var icon = action.icon,
        handler = action.handler,
        label = action.label,
        isDisabled = action.isDisabled,
        tooltip = action.tooltip;
      return (0, _react.jsx)(_cardActionIconButton.CardActionIconButton, {
        icon: icon,
        label: label,
        filename: filename,
        isPrimary: isPrimary,
        triggerColor: triggerColor,
        onClick: function onClick() {
          return handler();
        },
        variant: variant,
        isDisabled: isDisabled,
        tooltip: tooltip
      });
    }
  }, {
    key: "renderOtherActionButtons",
    value: function renderOtherActionButtons(actions) {
      if (actions.length === 0) {
        return null;
      } else {
        var _this$props2 = this.props,
          triggerColor = _this$props2.triggerColor,
          onToggle = _this$props2.onToggle,
          variant = _this$props2.variant;
        var firstActionWithIcon = actions.find(actionWithIcon);
        var otherActions = actions.filter(actionNotEqualTo(firstActionWithIcon));
        if (firstActionWithIcon && otherActions.length === 0) {
          return this.renderActionIconButton(firstActionWithIcon, false);
        } else {
          return (0, _react.jsx)(_cardActionsDropdownMenu.CardActionsDropdownMenu, {
            actions: actions,
            triggerColor: triggerColor,
            onOpenChange: onToggle,
            triggerVariant: variant
          });
        }
      }
    }
  }]);
}(_react2.Component);
function actionWithIcon(action) {
  return !!action.icon;
}
function actionNotEqualTo(otherAction) {
  return function (action) {
    return action !== otherAction;
  };
}