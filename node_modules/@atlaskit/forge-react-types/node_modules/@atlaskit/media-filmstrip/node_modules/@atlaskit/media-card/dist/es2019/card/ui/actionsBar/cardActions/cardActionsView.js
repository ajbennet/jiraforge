/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { Component, Fragment } from 'react';
import { CardActionIconButton } from './cardActionIconButton';
import { CardActionsDropdownMenu } from './cardActionsDropdownMenu';
export class CardActionsView extends Component {
  render() {
    const {
      actions
    } = this.props;
    if (!actions.length) {
      return null;
    }
    const primaryAction = actions.find(actionWithIcon);
    const otherActions = actions.filter(actionNotEqualTo(primaryAction));
    return jsx(Fragment, null, primaryAction ? this.renderActionIconButton(primaryAction, true) : null, this.renderOtherActionButtons(otherActions));
  }
  renderActionIconButton(action, isPrimary) {
    const {
      triggerColor,
      filename,
      variant
    } = this.props;
    const {
      icon,
      handler,
      label,
      isDisabled,
      tooltip
    } = action;
    return jsx(CardActionIconButton, {
      icon: icon,
      label: label,
      filename: filename,
      isPrimary: isPrimary,
      triggerColor: triggerColor,
      onClick: () => handler(),
      variant: variant,
      isDisabled: isDisabled,
      tooltip: tooltip
    });
  }
  renderOtherActionButtons(actions) {
    if (actions.length === 0) {
      return null;
    } else {
      const {
        triggerColor,
        onToggle,
        variant
      } = this.props;
      const firstActionWithIcon = actions.find(actionWithIcon);
      const otherActions = actions.filter(actionNotEqualTo(firstActionWithIcon));
      if (firstActionWithIcon && otherActions.length === 0) {
        return this.renderActionIconButton(firstActionWithIcon, false);
      } else {
        return jsx(CardActionsDropdownMenu, {
          actions: actions,
          triggerColor: triggerColor,
          onOpenChange: onToggle,
          triggerVariant: variant
        });
      }
    }
  }
}
function actionWithIcon(action) {
  return !!action.icon;
}
function actionNotEqualTo(otherAction) {
  return action => action !== otherAction;
}