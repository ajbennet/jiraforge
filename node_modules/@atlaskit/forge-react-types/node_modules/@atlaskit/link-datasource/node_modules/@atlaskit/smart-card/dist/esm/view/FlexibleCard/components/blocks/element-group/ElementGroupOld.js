import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { SmartLinkAlignment, SmartLinkDirection, SmartLinkPosition, SmartLinkSize, SmartLinkWidth } from '../../../../../constants';
import { getMaxLineHeight, getTruncateStyles } from '../../utils';
import { getBaseStyles, getGapSize, renderChildren } from '../utils';
var getAlignmentStyles = function getAlignmentStyles(align) {
  switch (align) {
    case SmartLinkAlignment.Right:
      return css({
        WebkitBoxAlign: 'end',
        MsFlexAlign: 'end',
        justifyContent: 'flex-end',
        textAlign: 'right'
      });
    case SmartLinkAlignment.Left:
    default:
      return css({
        WebkitBoxAlign: 'start',
        MsFlexAlign: 'start',
        justifyContent: 'flex-start',
        textAlign: 'left'
      });
  }
};
var getGapStyles = function getGapStyles(size, align) {
  var gap = getGapSize(size);
  if (align === SmartLinkAlignment.Right) {
    return css({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      '> span': {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
        marginLeft: "".concat(gap, "rem")
      },
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
      '> span:first-child': {
        marginLeft: 'initial'
      }
    });
  }
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '> span': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      marginRight: "".concat(gap, "rem"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
      '&:last-child': {
        marginRight: 'initial'
      }
    }
  });
};
var getHorizontalDirectionStyles = function getHorizontalDirectionStyles(size, align) {
  var lineHeight = getMaxLineHeight(size);
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t\tdisplay: block;\n\t\tvertical-align: middle;\n\t\t", "\n\n\t\t> span, > div {\n\t\t\tvertical-align: middle;\n\n\t\t\t&[data-smart-element-date-time],\n\t\t\t&[data-smart-element-text] {\n\t\t\t\t// Show all/wrapped/truncated\n\t\t\t\tdisplay: inline;\n\t\t\t}\n\t\t}\n\n\t\t", "\n\t"])), getTruncateStyles(1, lineHeight + 'rem'), getGapStyles(size, align));
};
export var getElementGroupStyles = function getElementGroupStyles(direction, size, align, width, position) {
  return css(
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getBaseStyles(direction, size),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getAlignmentStyles(align), {
    minWidth: '10%'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  width === SmartLinkWidth.Flexible ? "flex: 1 3;" : '',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  direction === SmartLinkDirection.Horizontal ? getHorizontalDirectionStyles(size, align) : '',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  position === SmartLinkPosition.Top ? 'align-self: flex-start;' : '');
};

/**
 * Creates a group of Action components. Accepts an array of Actions, in addition to some styling
 * preferences.
 * @internal
 * @param {ActionGroupProps} ActionGroupProps
 * @see Action
 */
var ElementGroup = function ElementGroup(_ref) {
  var _ref$align = _ref.align,
    align = _ref$align === void 0 ? SmartLinkAlignment.Left : _ref$align,
    children = _ref.children,
    overrideCss = _ref.overrideCss,
    _ref$direction = _ref.direction,
    direction = _ref$direction === void 0 ? SmartLinkDirection.Horizontal : _ref$direction,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? SmartLinkSize.Medium : _ref$size,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-group' : _ref$testId,
    _ref$width = _ref.width,
    width = _ref$width === void 0 ? SmartLinkWidth.FitToContent : _ref$width,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? SmartLinkPosition.Center : _ref$position;
  return jsx("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getElementGroupStyles(direction, size, align, width, position), overrideCss],
    "data-smart-element-group": true,
    "data-testid": testId
  }, renderChildren(children, size));
};
export default ElementGroup;