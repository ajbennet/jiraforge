import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect, useMemo, useState } from 'react';
import { ActionName, ElementName, SmartLinkPosition } from '../../../constants';
import FlexibleCard from '../../FlexibleCard';
import { FooterBlock, MetadataBlock, PreviewBlock, SnippetBlock, TitleBlock } from '../../FlexibleCard/components/blocks';
import { metadataBlockCss } from './styledOld';
import { FlexibleCardUiOptions, FooterBlockOptionsOld, getSimulatedBetterMetadata, PreviewBlockOptions, titleBlockOptionsOld } from './utils';

/**
 * This view represents a Block card that has an 'Resolved' status.
 * @see SmartLinkStatus
 * @see FlexibleCardProps
 */
const ResolvedViewOld = ({
  cardState,
  onClick,
  onError,
  onResolve,
  actionOptions,
  testId = 'smart-block-resolved-view',
  url
}) => {
  const [isPreviewBlockErrored, setIsPreviewBlockErrored] = useState(false);
  useEffect(() => {
    setIsPreviewBlockErrored(false);
  }, [url, cardState]);
  const {
    titleMetadata,
    topMetadata,
    bottomMetadata
  } = getSimulatedBetterMetadata(cardState.details);
  const footerActions = useMemo(() => [{
    name: ActionName.FollowAction,
    hideIcon: true
  }, {
    name: ActionName.PreviewAction,
    hideIcon: true
  }, {
    name: ActionName.DownloadAction,
    hideIcon: true
  }], []);
  return /*#__PURE__*/React.createElement(FlexibleCard, {
    appearance: "block",
    cardState: cardState,
    onClick: onClick,
    onError: onError,
    onResolve: onResolve,
    origin: "smartLinkCard",
    actionOptions: actionOptions,
    testId: testId,
    ui: FlexibleCardUiOptions,
    url: url
  }, /*#__PURE__*/React.createElement(TitleBlock, _extends({}, titleBlockOptionsOld, {
    metadata: titleMetadata,
    subtitle: [{
      name: ElementName.Location
    }],
    metadataPosition: SmartLinkPosition.Top
  })), /*#__PURE__*/React.createElement(MetadataBlock, {
    primary: topMetadata,
    maxLines: 1,
    overrideCss: metadataBlockCss
  }), /*#__PURE__*/React.createElement(SnippetBlock, null), /*#__PURE__*/React.createElement(MetadataBlock, {
    primary: bottomMetadata,
    maxLines: 1,
    overrideCss: metadataBlockCss
  }), !isPreviewBlockErrored ? /*#__PURE__*/React.createElement(PreviewBlock, _extends({}, PreviewBlockOptions, {
    onError: () => {
      setIsPreviewBlockErrored(true);
    }
  })) : null, /*#__PURE__*/React.createElement(FooterBlock, _extends({}, FooterBlockOptionsOld, {
    actions: footerActions
  })));
};
export default ResolvedViewOld;