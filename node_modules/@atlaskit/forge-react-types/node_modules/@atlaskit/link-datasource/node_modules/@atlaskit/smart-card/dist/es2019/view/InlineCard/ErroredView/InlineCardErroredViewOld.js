import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { R300 } from '@atlaskit/theme/colors';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { AKIconWrapper as AKIconWrapperOld } from '../Icon-emotion';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import { IconStyledButton as IconStyledButtonOld } from '../styled-emotion';
import withFrameStyleControl from '../utils/withFrameStyleControl';
const iconWrapperStyles = xcss({
  marginRight: 'space.negative.025'
});
export class InlineCardErroredViewOld extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "frameRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "handleRetry", event => {
      const {
        onRetry
      } = this.props;
      if (onRetry) {
        event.preventDefault();
        event.stopPropagation();
        onRetry();
      }
    });
    _defineProperty(this, "renderActionButton", () => {
      const {
        onRetry
      } = this.props;
      const Button = withFrameStyleControl(ButtonOld, this.frameRef);
      return onRetry && /*#__PURE__*/React.createElement(Button, {
        spacing: "none",
        component: fg('bandicoots-compiled-migration-smartcard') ? IconStyledButtonOldVisualRefresh : IconStyledButtonOld,
        onClick: this.handleRetry,
        role: "button"
      }, /*#__PURE__*/React.createElement(FormattedMessage, messages.try_again));
    });
  }
  render() {
    const {
      url,
      onClick,
      isSelected,
      testId = 'inline-card-errored-view',
      icon,
      message,
      truncateInline
    } = this.props;
    const Wrapper = fg('bandicoots-compiled-migration-smartcard') ? AKIconWrapper : AKIconWrapperOld;
    const content = /*#__PURE__*/React.createElement(Frame, {
      testId: testId,
      isSelected: isSelected,
      ref: this.frameRef,
      truncateInline: truncateInline
    }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
      icon: icon || (fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
        as: "span",
        xcss: iconWrapperStyles
      }, /*#__PURE__*/React.createElement(ErrorIcon, {
        color: "var(--ds-icon-danger, #C9372C)",
        label: "error",
        LEGACY_size: "small",
        testId: "errored-view-default-icon"
      })) : /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(ErrorIcon, {
        label: "error",
        LEGACY_size: "small",
        color: `var(--ds-icon-danger, ${R300})`,
        testId: "errored-view-default-icon"
      }))),
      link: url,
      title: url,
      onClick: onClick,
      rightSide: message
    }), this.renderActionButton());
    if (this.props.showHoverPreview) {
      return /*#__PURE__*/React.createElement(HoverCard, {
        url: url
      }, content);
    }
    return content;
  }
}