"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("@emotion/react");
var _constants = require("../../../../../../constants");
var _loadingSkeleton = require("../../../common/loading-skeleton");
var _utils = require("../../../utils");
var _block = _interopRequireDefault(require("../../block"));
var _excluded = ["actionGroup", "testId", "title", "hideIcon"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
/**
 * This represents a TitleBlock for a Smart Link that is currently waiting
 * for a request to finish.
 * This should render when a Smart Link has sent a request.
 * @see TitleBlock
 */
var TitleBlockResolvingViewOld = function TitleBlockResolvingViewOld(_ref) {
  var actionGroup = _ref.actionGroup,
    testId = _ref.testId,
    title = _ref.title,
    hideIcon = _ref.hideIcon,
    blockProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _blockProps$size = blockProps.size,
    size = _blockProps$size === void 0 ? _constants.SmartLinkSize.Medium : _blockProps$size;
  var iconWidth = (0, _utils.getIconWidth)(size);
  var iconStyles = (0, _utils.getIconSizeStyles)(iconWidth);
  return (0, _react.jsx)(_block.default, (0, _extends2.default)({}, blockProps, {
    testId: "".concat(testId, "-resolving-view")
  }), !hideIcon &&
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
  (0, _react.jsx)("span", {
    css: iconStyles,
    "data-testid": "".concat(testId, "-icon")
  }, (0, _react.jsx)(_loadingSkeleton.LoadingSkeletonOld, {
    testId: "".concat(testId, "-icon-loading")
  })), title, actionGroup);
};
var _default = exports.default = TitleBlockResolvingViewOld;