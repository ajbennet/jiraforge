import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["actions", "anchorTarget", "hideTitleTooltip", "maxLines", "onActionMenuOpenChange", "onClick", "overrideCss", "status", "showActionOnHover", "testId", "text", "icon", "theme", "hideRetry", "metadataPosition", "hideIcon"];
import React, { useCallback, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css } from '@emotion/react';
import { SmartLinkStatus } from '../../../../../constants';
import { useMouseDownEvent } from '../../../../../state/analytics/useLinkClicked';
import { Title } from '../../elements';
import ActionGroup from '../action-group';
import TitleBlockErroredView from './errored';
import TitleBlockResolvedView from './resolved';
import TitleBlockResolvingView from './resolving';
var getActionStyles = function getActionStyles(showOnHover, isOpen) {
  if (showOnHover && !isOpen) {
    return css({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      '.actions-button-group': {
        opacity: 0
      },
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      '&:hover .actions-button-group, .actions-button-group:focus-within': {
        opacity: 1
      }
    });
  }
};
var getTitleBlockViewComponent = function getTitleBlockViewComponent(status) {
  switch (status) {
    case SmartLinkStatus.Pending:
    case SmartLinkStatus.Resolving:
      return TitleBlockResolvingView;
    case SmartLinkStatus.Resolved:
      return TitleBlockResolvedView;
    case SmartLinkStatus.Unauthorized:
    case SmartLinkStatus.Forbidden:
    case SmartLinkStatus.NotFound:
    case SmartLinkStatus.Errored:
    case SmartLinkStatus.Fallback:
    default:
      return TitleBlockErroredView;
  }
};

/**
 * Represents a TitleBlock, which is the foundation of Flexible UI.
 * This contains an icon, the link, and any associated metadata and actions in one block.
 * The TitleBlock will also render differently given the state of the smart link.
 * This can be found in the corresponding Resolving, Resolved and Errored views.
 * @public
 * @param {TitleBlockProps} TitleBlockProps
 * @see Block
 * @see TitleBlockResolvingView
 * @see TitleBlockResolvedView
 * @see TitleBlockErroredView
 */
var TitleBlock = function TitleBlock(_ref) {
  var _ref$actions = _ref.actions,
    actions = _ref$actions === void 0 ? [] : _ref$actions,
    anchorTarget = _ref.anchorTarget,
    hideTitleTooltip = _ref.hideTitleTooltip,
    maxLines = _ref.maxLines,
    onActionMenuOpenChange = _ref.onActionMenuOpenChange,
    onClick = _ref.onClick,
    overrideCss = _ref.overrideCss,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? SmartLinkStatus.Fallback : _ref$status,
    showActionOnHover = _ref.showActionOnHover,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-title' : _ref$testId,
    text = _ref.text,
    icon = _ref.icon,
    theme = _ref.theme,
    hideRetry = _ref.hideRetry,
    metadataPosition = _ref.metadataPosition,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    props = _objectWithoutProperties(_ref, _excluded);
  if (hideRetry && props.retry) {
    delete props.retry;
  }
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    actionDropdownOpen = _useState2[0],
    setActionDropdownOpen = _useState2[1];
  var onDropdownOpenChange = useCallback(function (isOpen) {
    setActionDropdownOpen(isOpen);
    if (onActionMenuOpenChange) {
      onActionMenuOpenChange({
        isOpen: isOpen
      });
    }
  }, [onActionMenuOpenChange]);
  var actionGroup = actions.length > 0 && /*#__PURE__*/React.createElement(ActionGroup, {
    items: actions,
    visibleButtonsNum: showActionOnHover ? 1 : 2,
    onDropdownOpenChange: onDropdownOpenChange
  });
  var actionStyles = getActionStyles(showActionOnHover, actionDropdownOpen);
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  var combinedCss = css(actionStyles, overrideCss);
  var overrideText = !!text ? {
    text: text
  } : {};
  var onMouseDown = useMouseDownEvent();
  var title = /*#__PURE__*/React.createElement(Title, _extends({
    hideTooltip: hideTitleTooltip,
    maxLines: maxLines,
    onClick: onClick,
    onMouseDown: onMouseDown,
    target: anchorTarget,
    theme: theme
  }, overrideText));
  var Component = getTitleBlockViewComponent(status);
  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
    actionGroup: actionGroup,
    overrideCss: combinedCss,
    testId: testId,
    title: title,
    metadataPosition: metadataPosition,
    hideIcon: hideIcon,
    icon: icon
  }));
};
export default TitleBlock;