"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _avatarGroup = _interopRequireDefault(require("@atlaskit/avatar-group"));
var _constants = require("../../../../../constants");
var _messages = require("../../../../../messages");
var _utils = require("../../utils");
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MAX_COUNT = 4;
var getStyles = function getStyles(size) {
  var styles = (0, _react2.css)({
    display: 'inline-flex',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    ul: {
      marginRight: "var(--ds-space-100, 0.5rem)",
      marginTop: 0
    }
  });
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
    case _constants.SmartLinkSize.Large:
      // Default AK small size
      return styles;
    case _constants.SmartLinkSize.Medium:
    case _constants.SmartLinkSize.Small:
    default:
      // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
      return (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\t\t\t\t", "\n\t\t\t\tli {\n\t\t\t\t\tspan,\n\t\t\t\t\tsvg {\n\t\t\t\t\t\tmax-height: 1.25rem;\n\t\t\t\t\t\tmax-width: 1.25rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t"])), styles);
  }
};
var getPersonNameWithPrefix = function getPersonNameWithPrefix(elementName, personName, intl) {
  switch (elementName) {
    case _constants.ElementName.AssignedToGroup:
      return (0, _utils.getFormattedMessageAsString)(intl, _messages.messages.assigned_to, personName);
    case _constants.ElementName.OwnedByGroup:
      return (0, _utils.getFormattedMessageAsString)(intl, _messages.messages.owned_by, personName);
    case _constants.ElementName.AuthorGroup:
      return (0, _utils.getFormattedMessageAsString)(intl, _messages.messages.created_by, personName);
    default:
      return personName;
  }
};

/**
 * A base element that displays a group of avatars.
 * @internal
 * @param {AvatarGroupProps} AvatarGroupProps - The props necessary for the AvatarGroup.
 * @see AuthorGroup
 * @see CollaboratorGroup
 */
var AvatarGroupOld = function AvatarGroupOld(_ref) {
  var _ref$items = _ref.items,
    items = _ref$items === void 0 ? [] : _ref$items,
    _ref$maxCount = _ref.maxCount,
    maxCount = _ref$maxCount === void 0 ? MAX_COUNT : _ref$maxCount,
    name = _ref.name,
    overrideCss = _ref.overrideCss,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? _constants.SmartLinkSize.Medium : _ref$size,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-avatar-group' : _ref$testId,
    _ref$showNamePrefix = _ref.showNamePrefix,
    showNamePrefix = _ref$showNamePrefix === void 0 ? false : _ref$showNamePrefix,
    _ref$showFallbackAvat = _ref.showFallbackAvatar,
    showFallbackAvatar = _ref$showFallbackAvat === void 0 ? true : _ref$showFallbackAvat;
  var intl = (0, _reactIntlNext.useIntl)();
  var data = (0, _react.useMemo)(function () {
    if (!items.length && showFallbackAvatar) {
      switch (name) {
        case _constants.ElementName.AssignedToGroup:
          return [{
            name: (0, _utils.getFormattedMessageAsString)(intl, _messages.messages.unassigned)
          }];
        default:
          return [];
      }
    }

    //show a name prefix if there is one Avatar in a group only
    if (name && items.length === 1 && showNamePrefix) {
      return items.map(function (person) {
        return _objectSpread(_objectSpread({}, person), {}, {
          name: getPersonNameWithPrefix(name, person.name, intl) || person.name
        });
      });
    }
    return items;
  }, [name, items, showNamePrefix, showFallbackAvatar, intl]);
  if (!data.length) {
    return null;
  }
  return (0, _react2.jsx)("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getStyles(size), overrideCss],
    "data-fit-to-content": true,
    "data-smart-element": name,
    "data-smart-element-avatar-group": true,
    "data-testid": testId
  }, (0, _react2.jsx)(_avatarGroup.default, {
    maxCount: maxCount,
    appearance: "stack",
    size: "small",
    data: data,
    testId: testId
  }));
};
var _default = exports.default = AvatarGroupOld;