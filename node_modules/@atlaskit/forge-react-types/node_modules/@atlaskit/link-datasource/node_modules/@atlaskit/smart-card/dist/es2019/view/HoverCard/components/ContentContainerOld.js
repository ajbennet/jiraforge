import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { di } from 'react-magnetic-di';
import useAISummaryAction from '../../../state/hooks/use-ai-summary-action';
import AIPrism from '../../common/ai-prism';
import { HoverCardContainer, popupContainerStyles } from '../styled';
import { hoverCardClassName } from './HoverCardContent';
const ConnectedAIPrismContainer = ({
  children,
  isAIEnabled = false,
  testId,
  url,
  ...props
}) => {
  const {
    state: {
      status
    }
  } = useAISummaryAction(url);
  const [showPrism, setShowPrism] = useState(status === 'loading');
  useEffect(() => {
    setShowPrism(status === 'loading');
  }, [status]);
  const container = jsx("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: hoverCardClassName
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    ,
    css: [HoverCardContainer, !isAIEnabled ? popupContainerStyles : undefined],
    "data-testid": testId
  }, props), children);
  return isAIEnabled ? jsx(AIPrism, {
    isVisible: showPrism,
    testId: `${testId}-prism`
  }, container) : container;
};
const ContentContainerOld = ({
  children,
  isAIEnabled = false,
  testId,
  url,
  ...props
}) => jsx(ConnectedAIPrismContainer, _extends({
  isAIEnabled: isAIEnabled,
  url: url,
  testId: testId
}, props), children);
export default ContentContainerOld;