"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _constants = require("../../../../../constants");
var _useLinkClicked = require("../../../../../state/analytics/useLinkClicked");
var _utils = require("../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var DEFAULT_MAX_LINES = 2;
var MAXIMUM_MAX_LINES = 2;
var MINIMUM_MAX_LINES = 1;
var containerStyles = (0, _react2.css)({
  flex: '1 1 auto'
});
var getThemeStyles = function getThemeStyles(theme) {
  switch (theme) {
    case _constants.SmartLinkInternalTheme.Grey:
      // We are being specifc with the CSS selectors to ensure that Confluence overrides
      // do not affect our internal Smart Card styles
      return (0, _react2.css)({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        'a&': {
          color: "var(--ds-text-subtlest, #626F86)",
          '&:active, &:visited, &:focus, &:hover': {
            color: "var(--ds-text-subtlest, #626F86)",
            textDecoration: 'underline'
          },
          font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
        }
      });
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
    case _constants.SmartLinkTheme.Black:
      return (0, _react2.css)({
        color: "var(--ds-text-subtle, #44546F)",
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':active': {
          color: "var(--ds-text, #172B4D)"
        },
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':hover': {
          color: "var(--ds-text-subtle, #44546F)",
          textDecoration: 'underline'
        }
      });
    case _constants.SmartLinkTheme.Link:
    default:
      return (0, _react2.css)({
        color: "var(--ds-link, #0C66E4)",
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':active': {
          color: "var(--ds-link-pressed, #0055CC)"
        },
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':hover': {
          color: "var(--ds-link, #0C66E4)",
          textDecoration: 'underline'
        }
      });
  }
};
var getAnchorStyles = function getAnchorStyles(size, theme, maxLines, hasSpace) {
  var sizeStyles = (0, _utils.getLinkSizeStyles)(size);
  return (0, _react2.css)({
    flex: '1 1 auto'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  sizeStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  (0, _utils.getTruncateStyles)(maxLines, (0, _utils.getLinkLineHeight)(size), hasSpace ? 'break-word' : 'break-all'),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getThemeStyles(theme));
};
var getMaxLines = function getMaxLines(maxLines) {
  if (maxLines > MAXIMUM_MAX_LINES) {
    return DEFAULT_MAX_LINES;
  }
  if (maxLines < MINIMUM_MAX_LINES) {
    return MINIMUM_MAX_LINES;
  }
  return maxLines;
};
var withTooltip = function withTooltip(trigger, content, testId) {
  return (0, _react2.jsx)(_tooltip.default, {
    content: content,
    testId: "".concat(testId, "-tooltip"),
    tag: "span"
  }, trigger);
};

/**
 * A base element that represent an anchor.
 * @internal
 * @param {LinkProps} LinkProps - The props necessary for the Link element.
 * @see LinkIcon
 */
var LinkOld = function LinkOld(_ref) {
  var hideTooltip = _ref.hideTooltip,
    _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    name = _ref.name,
    overrideCss = _ref.overrideCss,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? _constants.SmartLinkSize.Medium : _ref$size,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-link' : _ref$testId,
    text = _ref.text,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? _constants.SmartLinkTheme.Link : _ref$theme,
    url = _ref.url,
    onClick = _ref.onClick,
    _ref$target = _ref.target,
    target = _ref$target === void 0 ? '_blank' : _ref$target;
  var onMouseDown = (0, _useLinkClicked.useMouseDownEvent)();
  var hasSpace = (0, _react.useMemo)(function () {
    return text ? (0, _utils.hasWhiteSpace)(text) : false;
  }, [text]);
  var anchor = (0, _react2.jsx)("a", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getAnchorStyles(size, theme, getMaxLines(maxLines), hasSpace), overrideCss],
    "data-smart-element": name,
    "data-smart-element-link": true,
    "data-testid": testId,
    onClick: onClick,
    onMouseDown: onMouseDown,
    href: url
    // We do not want set the target if it is the default value of '_self'. This prevents link
    // click issues in Confluence and Trello which rely on it not being set unless necessary.
  }, target !== '_self' && {
    target: target
  }), text);
  return (0, _react2.jsx)("span", {
    css: containerStyles
  }, hideTooltip || text === undefined ? anchor : withTooltip(anchor, text, testId));
};
var _default = exports.default = LinkOld;