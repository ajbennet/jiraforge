/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { IconType } from '../../../../../constants';
import { messages } from '../../../../../messages';
import AtlaskitIcon from '../../common/atlaskit-icon';
import ImageIcon from '../../common/image-icon';
import { getFormattedMessage, getIconSizeStyles } from '../../utils';
const badgeStyles = css({
  alignItems: 'center',
  display: 'inline-flex',
  minWidth: 'fit-content'
});

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
const iconStyles = css`
	color: ${"var(--ds-icon-subtle, #626F86)"};
	line-height: 0;
	vertical-align: middle;
	${getIconSizeStyles('1rem')}
	img,
  span,
  svg {
		line-height: 0;
		vertical-align: middle;
	}
`;
const labelStyles = css({
  color: "var(--ds-text-subtlest, #626F86)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  paddingLeft: "var(--ds-space-025, 0.125rem)",
  verticalAlign: 'middle'
});
const messageMapper = {
  [IconType.PriorityBlocker]: messages.priority_blocker,
  [IconType.PriorityCritical]: messages.priority_critical,
  [IconType.PriorityHigh]: messages.priority_high,
  [IconType.PriorityHighest]: messages.priority_highest,
  [IconType.PriorityLow]: messages.priority_low,
  [IconType.PriorityLowest]: messages.priority_lowest,
  [IconType.PriorityMajor]: messages.priority_major,
  [IconType.PriorityMedium]: messages.priority_medium,
  [IconType.PriorityMinor]: messages.priority_minor,
  [IconType.PriorityTrivial]: messages.priority_trivial,
  [IconType.PriorityUndefined]: messages.priority_undefined
};
const getFormattedMessageFromIcon = icon => {
  if (icon) {
    const descriptor = messageMapper[icon];
    if (descriptor) {
      return getFormattedMessage({
        descriptor
      });
    }
  }
};
const renderAtlaskitIcon = (icon, testId) => {
  if (icon) {
    return jsx(AtlaskitIcon, {
      icon: icon,
      label: icon,
      testId: `${testId}-icon`
    });
  }
};
const renderImageIcon = (url, testId) => {
  if (url) {
    return jsx(ImageIcon, {
      testId: testId,
      url: url
    });
  }
};

/**
 * A base element that displays some text with an associated icon.
 * @internal
 * @param {BadgeProps} BadgeProps - The props necessary for the Badge.
 * @see CommentCount
 * @see ViewCount
 * @see ReactCount
 * @see VoteCount
 * @see SubscriberCount
 * @see Priority
 * @see ProgrammingLanguage
 * @see Provider
 */
const BadgeOld = ({
  hideIcon = false,
  icon,
  label,
  name,
  overrideCss,
  testId = 'smart-element-badge',
  url
}) => {
  const formattedMessageOrLabel = getFormattedMessageFromIcon(icon) || label;
  const badgeIcon = renderAtlaskitIcon(icon, testId) || renderImageIcon(url, testId);
  if (!formattedMessageOrLabel || !badgeIcon) {
    return null;
  }
  return jsx("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [badgeStyles, overrideCss],
    "data-fit-to-content": true,
    "data-smart-element": name,
    "data-smart-element-badge": true,
    "data-testid": testId
  }, !hideIcon && jsx("span", {
    css: iconStyles
  }, badgeIcon), jsx("span", {
    css: labelStyles,
    "data-testid": `${testId}-label`
  }, formattedMessageOrLabel));
};
export default BadgeOld;