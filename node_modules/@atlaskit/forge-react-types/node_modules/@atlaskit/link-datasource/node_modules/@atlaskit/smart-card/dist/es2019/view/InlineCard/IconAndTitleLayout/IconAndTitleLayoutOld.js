/* IconAndTitleLayoutOld.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./IconAndTitleLayoutOld.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { di } from 'react-magnetic-di';
import ImageLoader from 'react-render-image';
import LinkIcon from '@atlaskit/icon/core/migration/link';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { Icon, Shimmer } from '../Icon';
import { LinkAppearance as LinkAppearanceOld, NoLinkAppearance as NoLinkAppearanceOld } from '../styled-emotion';
import { EmojiWrapperOldVisualRefresh, IconWrapperOldVisualRefresh, TitleWrapperClassNameOldVisualRefresh } from './styled';
import { EmojiWrapper as EmojiWrapperOld, IconEmptyWrapper as IconEmptyWrapperOld, IconPositionWrapper as IconPositionWrapperOld, IconTitleWrapper as IconTitleWrapperOld, IconWrapper as IconWrapperOld, TitleWrapper as TitleWrapperOld } from './styled-emotion';
export class IconAndTitleLayoutOld extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleClick", event => {
      const {
        onClick
      } = this.props;
      if (onClick) {
        event.preventDefault();
        event.stopPropagation();
        onClick(event);
      }
    });
    _defineProperty(this, "handleKeyPress", event => {
      const {
        onClick
      } = this.props;
      if (event.key !== ' ' && event.key !== 'Enter') {
        return;
      }
      if (onClick) {
        event.preventDefault();
        event.stopPropagation();
        onClick(event);
      }
    });
  }
  renderAtlaskitIcon() {
    const {
      icon,
      emoji
    } = this.props;
    if (emoji) {
      if (fg('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/React.createElement(Box, {
          as: "span",
          xcss: iconWrapperStyle,
          testId: "icon-position-emoji-wrapper"
        }, emoji);
      }
      return fg('bandicoots-compiled-migration-smartcard') ? /*#__PURE__*/React.createElement(EmojiWrapperOldVisualRefresh, null, emoji) : /*#__PURE__*/React.createElement(EmojiWrapperOld, null, emoji);
    }
    if (!icon || typeof icon === 'string') {
      return null;
    }
    if (fg('platform-linking-visual-refresh-v1')) {
      return /*#__PURE__*/React.createElement(Box, {
        as: "span",
        xcss: iconWrapperStyle,
        testId: "icon-atlaskit-icon-wrapper"
      }, icon);
    }
    return fg('bandicoots-compiled-migration-smartcard') ? /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, icon) : /*#__PURE__*/React.createElement(IconWrapperOld, null, icon);
  }
  renderImageIcon(errored, testId) {
    const {
      icon: url
    } = this.props;
    if (!url || typeof url !== 'string') {
      return null;
    }
    if (fg('platform-linking-visual-refresh-v1')) {
      return /*#__PURE__*/React.createElement(ImageLoader, {
        src: url,
        loaded: /*#__PURE__*/React.createElement("img", {
          src: url,
          "data-testid": `${testId}-image`,
          alt: "",
          className: ax(["_1bsb1osq"])
        }),
        errored: errored,
        loading: /*#__PURE__*/React.createElement(Shimmer, {
          testId: `${testId}-loading`
        })
      });
    }
    return /*#__PURE__*/React.createElement(ImageLoader, {
      src: url,
      loaded: /*#__PURE__*/React.createElement(Icon
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      , {
        className: "smart-link-icon",
        src: url,
        "data-testid": `${testId}-image`,
        alt: ""
      }),
      errored: errored,
      loading: /*#__PURE__*/React.createElement(Shimmer, {
        testId: `${testId}-loading`
      })
    });
  }
  renderIconPlaceholder(testId) {
    const {
      defaultIcon
    } = this.props;
    if (fg('platform-linking-visual-refresh-v1')) {
      return defaultIcon || /*#__PURE__*/React.createElement(LinkIcon, {
        label: "link",
        LEGACY_size: "small",
        testId: `${testId}-default`,
        color: "currentColor"
      });
    }
    if (defaultIcon) {
      return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, defaultIcon);
    }
    return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, /*#__PURE__*/React.createElement(LinkIcon, {
      label: "link",
      LEGACY_size: "small",
      testId: `${testId}-default`,
      color: "currentColor"
    }));
  }
  renderIcon(testId) {
    // We render two kinds of icons here:
    // - Image: acquired from either DAC or Teamwork Platform Apps;
    // - Atlaskit Icon: an Atlaskit SVG;
    // Each of these are scaled down to 12x12.
    const icon = this.renderAtlaskitIcon();
    if (icon) {
      return icon;
    }
    const placeholder = this.renderIconPlaceholder(testId);
    const image = this.renderImageIcon(placeholder, testId);
    if (fg('platform-linking-visual-refresh-v1')) {
      return /*#__PURE__*/React.createElement(Box, {
        as: "span",
        xcss: iconWrapperStyle,
        testId: `${testId}-image-wrapper`
      }, image || placeholder);
    }
    return image || placeholder;
  }
  render() {
    const {
      children,
      title,
      titleColor,
      titleTextColor,
      link,
      rightSide,
      testId = 'inline-card-icon-and-title'
    } = this.props;
    const titlePart = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconPositionWrapperOld, {
      "data-testid": "icon-position-wrapper"
    }, children || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconEmptyWrapperOld, {
      "data-testid": "icon-empty-wrapper"
    }), this.renderIcon(testId))), /*#__PURE__*/React.createElement(TitleWrapperOld
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    , {
      style: {
        color: titleTextColor
      }
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: TitleWrapperClassNameOldVisualRefresh
    }, title));
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      React.createElement(IconTitleWrapperOld, {
        style: {
          color: titleColor
        },
        "data-testid": testId
      }, link ? /*#__PURE__*/React.createElement(LinkAppearanceOld, {
        href: link,
        onClick: this.handleClick,
        onKeyPress: this.handleKeyPress
      }, titlePart) : titlePart, rightSide ? /*#__PURE__*/React.createElement(NoLinkAppearanceOld, null, rightSide) : null)
    );
  }
}
_defineProperty(IconAndTitleLayoutOld, "defaultProps", {
  rightSideSpacer: true
});
const iconWidth = '16px';
const iconWrapperStyle = xcss({
  position: 'absolute',
  display: 'inline-flex',
  alignItems: 'center',
  boxSizing: 'border-box',
  top: 'space.0',
  left: 'space.0',
  bottom: 'space.0',
  width: iconWidth,
  userSelect: 'none'
});
const iconImageStyle = null;