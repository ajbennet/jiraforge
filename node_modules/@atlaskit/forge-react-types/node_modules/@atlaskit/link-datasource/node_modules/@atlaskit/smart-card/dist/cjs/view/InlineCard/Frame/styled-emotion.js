"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WrapperSpan = exports.WrapperAnchor = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _colors = require("@atlaskit/theme/colors");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var lineHeight = 22;
var selectedStyles = {
  cursor: 'pointer',
  boxShadow: "0 0 0 2px ".concat("var(--ds-border-selected, ".concat(_colors.B100, ")")),
  outline: 'none',
  userSelect: 'none',
  '&, :hover, :focus, :active': {
    textDecoration: 'none'
  },
  '&:hover': {
    border: "1px solid ".concat("var(--ds-border, ".concat(_colors.N40, ")"))
  }
};
var isInteractive = function isInteractive(_ref) {
  var isInteractive = _ref.isInteractive;
  if (isInteractive) {
    return {
      ':active': {
        backgroundColor: "var(--ds-background-selected, ".concat(_colors.B50, ")")
      },
      ':focus': selectedStyles
    };
  }
  return undefined;
};
var isSelected = function isSelected(_ref2) {
  var isSelected = _ref2.isSelected;
  if (isSelected) {
    return selectedStyles;
  } else {
    return {
      userSelect: 'text'
    };
  }
};
var hoveredStyles = {
  borderColor: "var(--ds-border-accent-blue, ".concat(_colors.B200, ")")
};
var activeHoveredFocusedStyles = function activeHoveredFocusedStyles(props) {
  if (props.withoutBackground) {
    return undefined;
  }
  return {
    textDecoration: 'none'
  };
};
var hoveredWihBorderStyles = function hoveredWihBorderStyles(props) {
  return _objectSpread(_objectSpread({}, hoveredStyles), activeHoveredFocusedStyles(props));
};

/*
  Inline smart cards should have the following layout:
  ------------------------------------
  | icon | title | action OR lozenge |
  ------------------------------------
  The aim is to ensure (1) all children are
  in line with each other, (2) are vertically
  centered.
*/
// NB: `padding` consistent with @mentions.
// NB: `display: inline` required for `box-decoration-break` to work.
// NB: `box-decoration-break` required for retaining properties (border-radius) on wrap.
var baseWrapperStyles = function baseWrapperStyles(props) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: "".concat(lineHeight, "px"),
    padding: "var(--ds-space-025, 2px)".concat(" 0px")
  }, props.withoutBackground ? {
    paddingLeft: 0,
    marginLeft: "var(--ds-space-negative-025, -2px)"
  } : undefined), {}, {
    display: 'inline',
    boxDecorationBreak: 'clone',
    borderRadius: "var(--ds-border-radius-100, 4px)",
    color: "var(--ds-link, ".concat(_colors.B400, ")")
  }, props.withoutBackground ? undefined : {
    backgroundColor: "var(--ds-surface-raised, white)"
  }), isSelected(props)), props.withoutBackground ? undefined : {
    border: "1px solid ".concat("var(--ds-border, ".concat(_colors.N40, ")"))
  }), {}, {
    '&:hover': hoveredStyles,
    '&, :hover, :focus, :active': activeHoveredFocusedStyles(props),
    transition: '0.1s all ease-in-out',
    MozUserSelect: 'none'
  }, props.isHovered ? hoveredWihBorderStyles(props) : undefined);
};
var truncateStyles = {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  wordBreak: 'break-all',
  // The height of a truncated card is 1px higher than that of a non-truncated card, so we subtract 1px from the line height.
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: "".concat(lineHeight - 1, "px"),
  display: '-webkit-inline-box',
  WebkitLineClamp: 1,
  WebkitBoxOrient: 'vertical',
  // We need to remove the padding because display: -webkit-inline-box will cause any padding to be
  // added to the total height, causing truncated cards to have greater height than non-truncated cards which use display: inline.
  padding: 0,
  '@supports not (-webkit-line-clamp: 1)': {
    display: 'inline-block',
    maxHeight: "".concat(lineHeight, "px"),
    // If the browser does not support webkit, we don't need to remove the padding
    padding: "var(--ds-space-025, 2px)".concat(" 0px")
  }
};
var isTruncated = function isTruncated(_ref3) {
  var truncateInline = _ref3.truncateInline;
  if (truncateInline) {
    return truncateStyles;
  }
  return undefined;
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles, @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
var WrapperAnchor = exports.WrapperAnchor = _styled.default.a(function (props) {
  return _objectSpread(_objectSpread(_objectSpread({}, baseWrapperStyles(props)), isInteractive(props)), isTruncated(props));
});
WrapperAnchor.displayName = 'WrapperAnchor';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles, @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
var WrapperSpan = exports.WrapperSpan = _styled.default.span(function (props) {
  return _objectSpread(_objectSpread({}, baseWrapperStyles(props)), isTruncated(props));
});
WrapperSpan.displayName = 'WrapperSpan';