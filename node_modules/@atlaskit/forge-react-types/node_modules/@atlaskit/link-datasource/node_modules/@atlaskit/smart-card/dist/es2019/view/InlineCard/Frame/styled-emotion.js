// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import { B100, B200, B400, B50, N40 } from '@atlaskit/theme/colors';
const lineHeight = 22;
const selectedStyles = {
  cursor: 'pointer',
  boxShadow: `0 0 0 2px ${`var(--ds-border-selected, ${B100})`}`,
  outline: 'none',
  userSelect: 'none',
  '&, :hover, :focus, :active': {
    textDecoration: 'none'
  },
  '&:hover': {
    border: `1px solid ${`var(--ds-border, ${N40})`}`
  }
};
const isInteractive = ({
  isInteractive
}) => {
  if (isInteractive) {
    return {
      ':active': {
        backgroundColor: `var(--ds-background-selected, ${B50})`
      },
      ':focus': selectedStyles
    };
  }
  return undefined;
};
const isSelected = ({
  isSelected
}) => {
  if (isSelected) {
    return selectedStyles;
  } else {
    return {
      userSelect: 'text'
    };
  }
};
const hoveredStyles = {
  borderColor: `var(--ds-border-accent-blue, ${B200})`
};
const activeHoveredFocusedStyles = props => {
  if (props.withoutBackground) {
    return undefined;
  }
  return {
    textDecoration: 'none'
  };
};
const hoveredWihBorderStyles = props => ({
  ...hoveredStyles,
  ...activeHoveredFocusedStyles(props)
});

/*
  Inline smart cards should have the following layout:
  ------------------------------------
  | icon | title | action OR lozenge |
  ------------------------------------
  The aim is to ensure (1) all children are
  in line with each other, (2) are vertically
  centered.
*/
// NB: `padding` consistent with @mentions.
// NB: `display: inline` required for `box-decoration-break` to work.
// NB: `box-decoration-break` required for retaining properties (border-radius) on wrap.
const baseWrapperStyles = props => ({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: `${lineHeight}px`,
  padding: `${"var(--ds-space-025, 2px)"} 0px`,
  ...(props.withoutBackground ? {
    paddingLeft: 0,
    marginLeft: "var(--ds-space-negative-025, -2px)"
  } : undefined),
  display: 'inline',
  boxDecorationBreak: 'clone',
  borderRadius: "var(--ds-border-radius-100, 4px)",
  color: `var(--ds-link, ${B400})`,
  ...(props.withoutBackground ? undefined : {
    backgroundColor: "var(--ds-surface-raised, white)"
  }),
  ...isSelected(props),
  ...(props.withoutBackground ? undefined : {
    border: `1px solid ${`var(--ds-border, ${N40})`}`
  }),
  '&:hover': hoveredStyles,
  '&, :hover, :focus, :active': activeHoveredFocusedStyles(props),
  transition: '0.1s all ease-in-out',
  MozUserSelect: 'none',
  // -moz-user-select

  ...(props.isHovered ? hoveredWihBorderStyles(props) : undefined)
});
const truncateStyles = {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  wordBreak: 'break-all',
  // The height of a truncated card is 1px higher than that of a non-truncated card, so we subtract 1px from the line height.
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: `${lineHeight - 1}px`,
  display: '-webkit-inline-box',
  WebkitLineClamp: 1,
  WebkitBoxOrient: 'vertical',
  // We need to remove the padding because display: -webkit-inline-box will cause any padding to be
  // added to the total height, causing truncated cards to have greater height than non-truncated cards which use display: inline.
  padding: 0,
  '@supports not (-webkit-line-clamp: 1)': {
    display: 'inline-block',
    maxHeight: `${lineHeight}px`,
    // If the browser does not support webkit, we don't need to remove the padding
    padding: `${"var(--ds-space-025, 2px)"} 0px`
  }
};
const isTruncated = ({
  truncateInline
}) => {
  if (truncateInline) {
    return truncateStyles;
  }
  return undefined;
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles, @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
export const WrapperAnchor = styled.a(props => ({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  ...baseWrapperStyles(props),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  ...isInteractive(props),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  ...isTruncated(props)
}));
WrapperAnchor.displayName = 'WrapperAnchor';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles, @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
export const WrapperSpan = styled.span(props => ({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  ...baseWrapperStyles(props),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  ...isTruncated(props)
}));
WrapperSpan.displayName = 'WrapperSpan';