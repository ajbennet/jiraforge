import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import Spinner from '@atlaskit/spinner';
import { Frame } from '../Frame';
import { IconAndTitleLayout, IconTitleWrapper } from '../IconAndTitleLayout';
import { RightIconPositionWrapper } from '../IconAndTitleLayout/styled';
import { IconTitleWrapper as IconTitleWrapperOld, RightIconPositionWrapper as RightIconPositionWrapperOld } from '../IconAndTitleLayout/styled-emotion';
import { SpinnerWrapperOldVisualRefresh } from './styled';
import { SpinnerWrapper as SpinnerWrapperOld } from './styled-emotion';
export var InlineCardResolvingViewOld = /*#__PURE__*/function (_React$Component) {
  function InlineCardResolvingViewOld() {
    _classCallCheck(this, InlineCardResolvingViewOld);
    return _callSuper(this, InlineCardResolvingViewOld, arguments);
  }
  _inherits(InlineCardResolvingViewOld, _React$Component);
  return _createClass(InlineCardResolvingViewOld, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        url = _this$props.url,
        onClick = _this$props.onClick,
        isSelected = _this$props.isSelected,
        inlinePreloaderStyle = _this$props.inlinePreloaderStyle,
        _this$props$testId = _this$props.testId,
        testId = _this$props$testId === void 0 ? 'inline-card-resolving-view' : _this$props$testId,
        titleTextColor = _this$props.titleTextColor,
        resolvingPlaceholder = _this$props.resolvingPlaceholder,
        truncateInline = _this$props.truncateInline;
      var SpinnerWrapperComponent = fg('bandicoots-compiled-migration-smartcard') ? SpinnerWrapperOldVisualRefresh : SpinnerWrapperOld;
      if (inlinePreloaderStyle === 'on-right-without-skeleton') {
        if (fg('bandicoots-compiled-migration-smartcard')) {
          return /*#__PURE__*/React.createElement(Frame, {
            withoutBackground: true,
            testId: testId,
            onClick: onClick,
            isSelected: isSelected,
            truncateInline: truncateInline
          }, /*#__PURE__*/React.createElement(IconTitleWrapper, null, url, /*#__PURE__*/React.createElement(RightIconPositionWrapper, null, fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Spinner, {
            size: 14
          }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SpinnerWrapperComponent, {
            className: "inline-resolving-spinner"
          }, /*#__PURE__*/React.createElement(Spinner, {
            size: 14
          }))))));
        } else {
          return /*#__PURE__*/React.createElement(Frame, {
            withoutBackground: true,
            testId: testId,
            onClick: onClick,
            isSelected: isSelected,
            truncateInline: truncateInline
          }, /*#__PURE__*/React.createElement(IconTitleWrapperOld, null, url, /*#__PURE__*/React.createElement(RightIconPositionWrapperOld, null, /*#__PURE__*/React.createElement(SpinnerWrapperComponent, {
            className: "inline-resolving-spinner"
          }, /*#__PURE__*/React.createElement(Spinner, {
            size: 14
          })))));
        }
      } else {
        return /*#__PURE__*/React.createElement(Frame, {
          testId: testId,
          onClick: onClick,
          isSelected: isSelected,
          link: url,
          truncateInline: truncateInline
        }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
          title: resolvingPlaceholder !== null && resolvingPlaceholder !== void 0 ? resolvingPlaceholder : url,
          titleTextColor: titleTextColor
        }, fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SpinnerWrapperComponent, {
          className: "inline-resolving-spinner"
        }, /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        })))));
      }
    }
  }]);
}(React.Component);