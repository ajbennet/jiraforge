import React, { useContext, createContext, useMemo } from 'react';
import { SmartCardProvider } from '../../provider';
export var SmartCardContext = /*#__PURE__*/createContext(undefined);
export function useSmartLinkContext() {
  var context = useContext(SmartCardContext);
  if (!context) {
    throw Error('useSmartCard() must be wrapped in <SmartCardProvider>');
  }
  return context;
}
export var useSmartCardContext = function useSmartCardContext() {
  return useContextMemoized(SmartCardContext);
};
export var EditorSmartCardProviderValueGuard = function EditorSmartCardProviderValueGuard(_ref) {
  var children = _ref.children;
  var cardContext = useSmartCardContext();
  if (!(cardContext !== null && cardContext !== void 0 && cardContext.value)) {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, children);
};
function useContextMemoized(reactContext) {
  var value = useContext(reactContext);
  var context = useMemo(function () {
    return {
      Provider: reactContext.Provider,
      Consumer: reactContext.Consumer,
      value: value
    };
  }, [value, reactContext]);
  return context;
}
export var EditorSmartCardProvider = function EditorSmartCardProvider(_ref2) {
  var children = _ref2.children;
  var cardContext = useSmartCardContext();
  var Provider = cardContext.Provider;
  return /*#__PURE__*/React.createElement(Provider, {
    value: cardContext.value
  }, children);
};
export { SmartCardProvider };
export default SmartCardContext;