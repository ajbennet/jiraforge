import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useMemo, useState } from 'react';
import { ActionName, ElementName, SmartLinkPosition } from '../../../constants';
import FlexibleCard from '../../FlexibleCard';
import { FooterBlock, MetadataBlock, PreviewBlock, SnippetBlock, TitleBlock } from '../../FlexibleCard/components/blocks';
import { metadataBlockCss } from './styledOld';
import { FlexibleCardUiOptions, FooterBlockOptionsOld, getSimulatedBetterMetadata, PreviewBlockOptions, titleBlockOptionsOld } from './utils';

/**
 * This view represents a Block card that has an 'Resolved' status.
 * @see SmartLinkStatus
 * @see FlexibleCardProps
 */
var ResolvedViewOld = function ResolvedViewOld(_ref) {
  var cardState = _ref.cardState,
    onClick = _ref.onClick,
    onError = _ref.onError,
    onResolve = _ref.onResolve,
    actionOptions = _ref.actionOptions,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-resolved-view' : _ref$testId,
    url = _ref.url;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isPreviewBlockErrored = _useState2[0],
    setIsPreviewBlockErrored = _useState2[1];
  useEffect(function () {
    setIsPreviewBlockErrored(false);
  }, [url, cardState]);
  var _getSimulatedBetterMe = getSimulatedBetterMetadata(cardState.details),
    titleMetadata = _getSimulatedBetterMe.titleMetadata,
    topMetadata = _getSimulatedBetterMe.topMetadata,
    bottomMetadata = _getSimulatedBetterMe.bottomMetadata;
  var footerActions = useMemo(function () {
    return [{
      name: ActionName.FollowAction,
      hideIcon: true
    }, {
      name: ActionName.PreviewAction,
      hideIcon: true
    }, {
      name: ActionName.DownloadAction,
      hideIcon: true
    }];
  }, []);
  return /*#__PURE__*/React.createElement(FlexibleCard, {
    appearance: "block",
    cardState: cardState,
    onClick: onClick,
    onError: onError,
    onResolve: onResolve,
    origin: "smartLinkCard",
    actionOptions: actionOptions,
    testId: testId,
    ui: FlexibleCardUiOptions,
    url: url
  }, /*#__PURE__*/React.createElement(TitleBlock, _extends({}, titleBlockOptionsOld, {
    metadata: titleMetadata,
    subtitle: [{
      name: ElementName.Location
    }],
    metadataPosition: SmartLinkPosition.Top
  })), /*#__PURE__*/React.createElement(MetadataBlock, {
    primary: topMetadata,
    maxLines: 1,
    overrideCss: metadataBlockCss
  }), /*#__PURE__*/React.createElement(SnippetBlock, null), /*#__PURE__*/React.createElement(MetadataBlock, {
    primary: bottomMetadata,
    maxLines: 1,
    overrideCss: metadataBlockCss
  }), !isPreviewBlockErrored ? /*#__PURE__*/React.createElement(PreviewBlock, _extends({}, PreviewBlockOptions, {
    onError: function onError() {
      setIsPreviewBlockErrored(true);
    }
  })) : null, /*#__PURE__*/React.createElement(FooterBlock, _extends({}, FooterBlockOptionsOld, {
    actions: footerActions
  })));
};
export default ResolvedViewOld;