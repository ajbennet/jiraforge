import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback } from 'react';
import { Box, Inline, Pressable, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
import { getPrimitivesInlineSpaceBySize } from '../../../utils';
import ActionIcon from '../action-icon';
const buttonStyles = xcss({
  all: 'unset',
  padding: 'space.050',
  width: '100%',
  ':hover': {
    backgroundColor: 'color.background.neutral.subtle.hovered'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.subtle.pressed'
  }
});
const contentStyles = xcss({
  color: 'color.text',
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
});
const ActionButtonOld = ({
  content,
  icon: iconOption,
  isDisabled,
  isLoading,
  onClick: onClickCallback,
  size,
  space: spaceOption,
  testId,
  tooltipProps,
  xcss
}) => {
  const space = spaceOption !== null && spaceOption !== void 0 ? spaceOption : getPrimitivesInlineSpaceBySize(size);
  const onClick = useCallback(() => {
    if (!isDisabled && !isLoading && onClickCallback) {
      onClickCallback();
    }
  }, [isDisabled, isLoading, onClickCallback]);
  const icon = iconOption && isLoading ? /*#__PURE__*/React.createElement(ActionIcon, {
    asStackItemIcon: true,
    icon: /*#__PURE__*/React.createElement(Spinner, {
      testId: `${testId}-loading`
    }),
    size: size
  }) : iconOption;
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    React.createElement(Pressable, _extends({
      xcss: [buttonStyles, xcss]
    }, tooltipProps, {
      onClick: onClick,
      testId: testId
    }), /*#__PURE__*/React.createElement(Inline, {
      alignBlock: "center",
      grow: "fill",
      space: space
    }, icon, /*#__PURE__*/React.createElement(Box, {
      xcss: contentStyles
    }, content)))
  );
};
export default ActionButtonOld;