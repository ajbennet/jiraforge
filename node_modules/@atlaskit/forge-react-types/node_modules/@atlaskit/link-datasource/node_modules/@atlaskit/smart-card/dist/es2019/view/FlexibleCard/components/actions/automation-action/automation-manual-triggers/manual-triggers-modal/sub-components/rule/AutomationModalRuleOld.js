import React from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { ButtonItem } from '@atlaskit/menu';
import { Box, Stack, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
import { useAutomationMenu } from '../../menu-context';
const ruleButtonStyle = xcss({
  borderColor: 'color.border',
  borderStyle: 'solid',
  borderWidth: 'border.width',
  borderRadius: 'border.radius'
});
const selectedRuleButtonStyle = xcss({
  backgroundColor: 'color.background.accent.blue.subtlest',
  borderColor: 'color.border.accent.blue',
  borderStyle: 'solid',
  borderWidth: 'border.width.outline',
  borderRadius: 'border.radius'
});
const ruleNameStyle = xcss({
  // Using this to increase the height of the button itself.
  height: '28px'
});
export const AutomationModalRuleOld = ({
  rule,
  selectedRule,
  setSelectedRule
}) => {
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const {
    analyticsSource,
    invokingRuleId
  } = useAutomationMenu();
  const isSelectedRule = (selectedRule === null || selectedRule === void 0 ? void 0 : selectedRule.id) === rule.id;
  const isExecuting = rule.id === invokingRuleId;
  const ruleOnClick = () => {
    createAnalyticsEvent({
      type: 'sendUIEvent',
      data: {
        action: 'clicked',
        actionSubject: 'button',
        actionSubjectId: 'selectManualTriggerAutomation',
        source: analyticsSource,
        attributes: {
          ruleId: rule.id.toString()
        }
      }
    }).fire();
    setSelectedRule(rule);
  };
  return /*#__PURE__*/React.createElement(Box, {
    xcss: isSelectedRule ? selectedRuleButtonStyle : ruleButtonStyle
  }, /*#__PURE__*/React.createElement(ButtonItem, {
    isDisabled: !!invokingRuleId,
    iconBefore: isExecuting ? /*#__PURE__*/React.createElement(Spinner, {
      size: "small"
    }) : null,
    onClick: ruleOnClick
  }, /*#__PURE__*/React.createElement(Stack, {
    xcss: ruleNameStyle,
    alignBlock: "center"
  }, rule.name)));
};