"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _button = require("@atlaskit/button");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _constants = require("../../../../../../constants");
var _utils = require("../../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var getButtonStyle = function getButtonStyle(size, iconOnly) {
  switch (size) {
    case _constants.SmartLinkSize.Large:
      return iconOnly ? (0, _react2.css)({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
        'button, button:hover, button:focus, button:active': {
          padding: 0,
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
          '> span': {
            margin: 0
          }
        }
      }) : '';
    case _constants.SmartLinkSize.Small:
      return (0, _react2.css)({
        font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-medium, 500)",
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
        'button, button:hover, button:focus, button:active': [{
          // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
          lineHeight: 'inherit'
        }, iconOnly ? "\n            padding: 0.125rem;\n          " : "\n            padding-left: 0.25rem;\n            padding-right: 0.25rem;\n          "]
      });
    case _constants.SmartLinkSize.XLarge:
    case _constants.SmartLinkSize.Medium:
    default:
      return '';
  }
};
var ActionButtonOld = function ActionButtonOld(_ref) {
  var appearance = _ref.appearance,
    content = _ref.content,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    isLoading = _ref.isLoading,
    onClick = _ref.onClick,
    overrideCss = _ref.overrideCss,
    size = _ref.size,
    testId = _ref.testId,
    tooltipMessage = _ref.tooltipMessage,
    isDisabled = _ref.isDisabled,
    href = _ref.href,
    ariaLabel = _ref.ariaLabel;
  var iconOnly = !content;
  var onButtonClick = (0, _react.useCallback)(function (handler) {
    return function (e) {
      e.preventDefault();
      handler();
    };
  }, []);
  return (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getButtonStyle(size, iconOnly), overrideCss],
    "data-testid": "".concat(testId, "-button-wrapper")
  }, (0, _react2.jsx)(_tooltip.default, {
    content: tooltipMessage,
    hideTooltipOnClick: true,
    testId: "".concat(testId, "-tooltip")
  }, (0, _react2.jsx)(_button.LoadingButton, {
    appearance: appearance,
    iconAfter: iconAfter,
    iconBefore: iconBefore,
    isDisabled: isDisabled,
    isLoading: isLoading,
    onClick: onButtonClick(onClick),
    spacing: _utils.sizeToButtonSpacing[size],
    testId: testId,
    href: href,
    "aria-label": ariaLabel
  }, content)));
};
var _default = exports.default = ActionButtonOld;