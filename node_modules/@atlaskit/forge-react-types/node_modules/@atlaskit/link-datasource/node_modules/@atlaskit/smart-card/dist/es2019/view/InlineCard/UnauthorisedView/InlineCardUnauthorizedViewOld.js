import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import LockLockedIcon from '@atlaskit/icon/core/lock-locked';
import LegacyLockIcon from '@atlaskit/icon/glyph/lock-filled';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { N500, R400 } from '@atlaskit/theme/colors';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { AKIconWrapper as AKIconWrapperOld } from '../Icon-emotion';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import { IconStyledButton as IconStyledButtonOld } from '../styled-emotion';
import withFrameStyleControl from '../utils/withFrameStyleControl';
const iconWrapperStyles = xcss({
  marginRight: 'space.negative.025'
});
const fallbackUnauthorizedIcon = () => {
  if (fg('bandicoots-compiled-migration-smartcard')) {
    return fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: iconWrapperStyles
    }, /*#__PURE__*/React.createElement(LockLockedIcon, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small"
    })) : /*#__PURE__*/React.createElement(AKIconWrapper, null, /*#__PURE__*/React.createElement(LegacyLockIcon, {
      label: "error",
      size: "small",
      primaryColor: `var(--ds-icon-danger, ${R400})`
    }));
  } else {
    return fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: iconWrapperStyles
    }, /*#__PURE__*/React.createElement(LockLockedIcon, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small"
    })) : /*#__PURE__*/React.createElement(AKIconWrapperOld, null, /*#__PURE__*/React.createElement(LegacyLockIcon, {
      label: "error",
      size: "small",
      primaryColor: `var(--ds-icon-danger, ${R400})`
    }));
  }
};
export const InlineCardUnauthorizedViewOld = ({
  url,
  id,
  icon,
  onAuthorise,
  onClick,
  isSelected,
  testId = 'inline-card-unauthorized-view',
  showHoverPreview = false,
  truncateInline,
  context
}) => {
  const frameRef = React.useRef(null);
  const {
    fireEvent
  } = useAnalyticsEvents();
  const handleConnectAccount = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    if (onAuthorise) {
      fireEvent('track.applicationAccount.authStarted', {});
      onAuthorise();
    }
  }, [fireEvent, onAuthorise]);
  const renderActionButton = React.useCallback(() => {
    const Button = withFrameStyleControl(ButtonOld, frameRef);
    if (fg('bandicoots-compiled-migration-smartcard')) {
      return onAuthorise ? /*#__PURE__*/React.createElement(Button, {
        spacing: "none",
        component: IconStyledButtonOldVisualRefresh,
        onClick: handleConnectAccount,
        testId: "button-connect-account"
      }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.connect_link_account_card_name, {
        values: {
          context
        }
      }))) : undefined;
    } else {
      return onAuthorise ? /*#__PURE__*/React.createElement(Button, {
        spacing: "none",
        component: IconStyledButtonOld,
        onClick: handleConnectAccount,
        testId: "button-connect-account"
      }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.connect_link_account_card_name, {
        values: {
          context
        }
      }))) : undefined;
    }
  }, [handleConnectAccount, onAuthorise, context]);
  const inlineCardUnauthenticatedView = /*#__PURE__*/React.createElement(Frame, {
    testId: testId,
    isSelected: isSelected,
    ref: frameRef,
    truncateInline: truncateInline
  }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
    icon: icon ? icon : fallbackUnauthorizedIcon(),
    title: url,
    link: url,
    onClick: onClick,
    titleColor: `var(--ds-text-subtle, ${N500})`
  }), renderActionButton());
  if (onAuthorise && showHoverPreview) {
    return /*#__PURE__*/React.createElement(HoverCard, {
      url: url,
      id: id
    }, inlineCardUnauthenticatedView);
  }
  return inlineCardUnauthenticatedView;
};