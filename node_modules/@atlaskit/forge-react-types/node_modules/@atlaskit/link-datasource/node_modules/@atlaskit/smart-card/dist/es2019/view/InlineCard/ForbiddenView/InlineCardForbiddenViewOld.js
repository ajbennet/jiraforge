import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import LockLockedIcon from '@atlaskit/icon/core/lock-locked';
import LegacyLockIcon from '@atlaskit/icon/glyph/lock-filled';
import Lozenge from '@atlaskit/lozenge';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { N500, R400 } from '@atlaskit/theme/colors';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { AKIconWrapper as AKIconWrapperOld } from '../Icon-emotion';
import { IconAndTitleLayout, LozengeWrapper } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import { IconStyledButton as IconStyledButtonOld } from '../styled-emotion';
import withFrameStyleControl from '../utils/withFrameStyleControl';
const iconWrapperStyles = xcss({
  marginRight: 'space.negative.025'
});
const fallbackForbiddenIcon = () => {
  if (fg('bandicoots-compiled-migration-smartcard')) {
    return fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: iconWrapperStyles
    }, /*#__PURE__*/React.createElement(LockLockedIcon, {
      label: "error",
      color: "var(--ds-icon-danger, #C9372C)",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small",
      testId: "forbidden-view-fallback-icon"
    })) : /*#__PURE__*/React.createElement(AKIconWrapper, null, /*#__PURE__*/React.createElement(LegacyLockIcon, {
      label: "error",
      size: "small",
      primaryColor: `var(--ds-icon-danger, ${R400})`,
      testId: "forbidden-view-fallback-icon"
    }));
  } else {
    return fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: iconWrapperStyles
    }, /*#__PURE__*/React.createElement(LockLockedIcon, {
      label: "error",
      color: "var(--ds-icon-danger, #C9372C)",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small",
      testId: "forbidden-view-fallback-icon"
    })) : /*#__PURE__*/React.createElement(AKIconWrapperOld, null, /*#__PURE__*/React.createElement(LegacyLockIcon, {
      label: "error",
      size: "small",
      primaryColor: `var(--ds-icon-danger, ${R400})`,
      testId: "forbidden-view-fallback-icon"
    }));
  }
};
export class InlineCardForbiddenViewOld extends React.Component {
  constructor(...args) {
    var _this$props, _this$props$requestAc;
    super(...args);
    _defineProperty(this, "frameRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "state", {
      hasRequestAccessContextMessage: !!((_this$props = this.props) !== null && _this$props !== void 0 && (_this$props$requestAc = _this$props.requestAccessContext) !== null && _this$props$requestAc !== void 0 && _this$props$requestAc.callToActionMessageKey)
    });
    _defineProperty(this, "handleRetry", event => {
      const {
        onAuthorise
      } = this.props;
      event.preventDefault();
      event.stopPropagation();
      if (onAuthorise) {
        onAuthorise();
      } else {
        var _this$props2, _this$props2$requestA, _this$props2$requestA2;
        (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$requestA = _this$props2.requestAccessContext) === null || _this$props2$requestA === void 0 ? void 0 : (_this$props2$requestA2 = _this$props2$requestA.action) === null || _this$props2$requestA2 === void 0 ? void 0 : _this$props2$requestA2.promise();
      }
    });
    _defineProperty(this, "renderForbiddenAccessMessage", () => {
      var _this$props3, _this$props3$requestA;
      if ((_this$props3 = this.props) !== null && _this$props3 !== void 0 && (_this$props3$requestA = _this$props3.requestAccessContext) !== null && _this$props3$requestA !== void 0 && _this$props3$requestA.callToActionMessageKey) {
        const {
          callToActionMessageKey
        } = this.props.requestAccessContext;
        return /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages[callToActionMessageKey], {
          values: {
            product: this.props.context
          }
        }));
      }
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, messages.invalid_permissions, formattedMessage => {
        return /*#__PURE__*/React.createElement(React.Fragment, null, formattedMessage);
      }));
    });
    _defineProperty(this, "renderActionButton", () => {
      var _this$props$requestAc2;
      const {
        onAuthorise
      } = this.props;
      const Button = withFrameStyleControl(ButtonOld, this.frameRef);
      const accessType = (_this$props$requestAc2 = this.props.requestAccessContext) === null || _this$props$requestAc2 === void 0 ? void 0 : _this$props$requestAc2.accessType;
      if (this.state.hasRequestAccessContextMessage) {
        if (fg('bandicoots-compiled-migration-smartcard')) {
          return /*#__PURE__*/React.createElement(Button, {
            spacing: "none",
            onClick: this.handleRetry,
            component: IconStyledButtonOldVisualRefresh,
            testId: "button-connect-other-account",
            role: "button",
            isDisabled: accessType === 'PENDING_REQUEST_EXISTS'
          }, this.renderForbiddenAccessMessage());
        } else {
          return /*#__PURE__*/React.createElement(Button, {
            spacing: "none",
            onClick: this.handleRetry,
            component: IconStyledButtonOld,
            testId: "button-connect-other-account",
            role: "button",
            isDisabled: accessType === 'PENDING_REQUEST_EXISTS'
          }, this.renderForbiddenAccessMessage());
        }
      }
      if (onAuthorise) {
        return /*#__PURE__*/React.createElement(Button, {
          spacing: "none",
          onClick: this.handleRetry,
          appearance: "subtle-link",
          testId: "button-connect-other-account",
          role: "button"
        }, /*#__PURE__*/React.createElement(LozengeWrapper, null, /*#__PURE__*/React.createElement(Lozenge, _extends({
          appearance: 'moved'
        }, fg('platform-component-visual-refresh') ? {
          isBold: true
        } : undefined), this.renderForbiddenAccessMessage())));
      }
      return null;
    });
  }
  render() {
    const {
      url,
      icon,
      onClick,
      isSelected,
      testId = 'inline-card-forbidden-view',
      truncateInline
    } = this.props;
    const content = /*#__PURE__*/React.createElement(Frame, {
      testId: testId,
      isSelected: isSelected,
      ref: this.frameRef,
      truncateInline: truncateInline
    }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
      icon: icon ? icon : fallbackForbiddenIcon(),
      link: url,
      title: url,
      onClick: onClick,
      titleColor: `var(--ds-text-subtle, ${N500})`
    }), this.renderActionButton());
    if (this.props.showHoverPreview) {
      return /*#__PURE__*/React.createElement(HoverCard, {
        url: url
      }, content);
    }
    return content;
  }
}