"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _dropdownMenu = require("@atlaskit/dropdown-menu");
var _error = _interopRequireDefault(require("@atlaskit/icon/core/migration/error"));
var _colors = require("@atlaskit/theme/colors");
var _useAnalyticsEvents2 = require("../../../../../../../common/analytics/generated/use-analytics-events");
var _messages = require("../../../../../../../messages");
var _useInvokeClientAction = _interopRequireDefault(require("../../../../../../../state/hooks/use-invoke-client-action"));
var _utils = require("../../../../utils");
var _styled = require("./styled");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var MAX_LINE_NUMBER = 8;
var LozengeActionErrorOld = function LozengeActionErrorOld(_ref) {
  var errorMessage = _ref.errorMessage,
    testId = _ref.testId,
    _ref$maxLineNumber = _ref.maxLineNumber,
    maxLineNumber = _ref$maxLineNumber === void 0 ? MAX_LINE_NUMBER : _ref$maxLineNumber,
    invokePreviewAction = _ref.invokePreviewAction;
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var invoke = (0, _useInvokeClientAction.default)({});
  var isPreviewAvailable = invokePreviewAction !== undefined;
  var handlePreviewOpen = (0, _react.useCallback)(function () {
    if (isPreviewAvailable) {
      fireEvent('ui.button.clicked.smartLinkStatusOpenPreview', {});
      if (invokePreviewAction) {
        invoke(invokePreviewAction);
      }
    }
  }, [isPreviewAvailable, invoke, invokePreviewAction, fireEvent]);
  var content = (0, _react.useMemo)(function () {
    return (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)("div", {
      css: _styled.contentStyles
    }, (0, _react2.jsx)(_error.default, {
      testId: "".concat(testId, "-icon"),
      LEGACY_size: "medium",
      color: "var(--ds-icon-danger, ".concat(_colors.R500, ")"),
      LEGACY_secondaryColor: "var(--ds-background-danger, ".concat(_colors.R50, ")"),
      label: 'error',
      spacing: "spacious"
    }), (0, _react2.jsx)("span", {
      css: (0, _styled.textStyles)(maxLineNumber),
      "data-testid": "".concat(testId, "-error-message")
    }, typeof errorMessage === 'string' ? errorMessage : (0, _utils.getFormattedMessage)(errorMessage))), isPreviewAvailable ?
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styled.linkStyles
    }, (0, _react2.jsx)("a", {
      target: "_blank",
      "data-testid": "".concat(testId, "-open-embed"),
      onClick: handlePreviewOpen
    }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.messages.open_issue_in_jira))) : null);
  }, [errorMessage, handlePreviewOpen, isPreviewAvailable, maxLineNumber, testId]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("span", {
      css: _styled.dropdownItemGroupStyles,
      "data-testid": "".concat(testId, "-error-item-group")
    }, (0, _react2.jsx)(_dropdownMenu.DropdownItemGroup, null, (0, _react2.jsx)(_dropdownMenu.DropdownItem, {
      testId: "".concat(testId, "-error")
    }, content)))
  );
};
var _default = exports.default = LozengeActionErrorOld;