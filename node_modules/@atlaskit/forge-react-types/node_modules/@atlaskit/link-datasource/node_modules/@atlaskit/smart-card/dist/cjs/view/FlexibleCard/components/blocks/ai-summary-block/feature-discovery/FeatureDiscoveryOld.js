"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _storageClient = require("@atlaskit/frontend-utilities/storage-client");
var _styled = require("./styled");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var LOCAL_STORAGE_CLIENT_KEY = '@atlaskit/smart-card';
var LOCAL_STORAGE_DISCOVERY_KEY = 'action-discovery-ai-summarise';
var LOCAL_STORAGE_DISCOVERY_VALUE = 'discovered';
var LOCAL_STORAGE_DISCOVERY_EXPIRY_IN_MS = 15552000000; // 180 days
var LOCAL_STORAGE_DISCOVERY_REQUIRED_TIME = 2000;
/**
 * This is a hacky solution to help with the feature discovery.
 * This implementation must be removed once the experiment is completed.
 * Cleanup on https://product-fabric.atlassian.net/browse/EDM-9649
 */
var FeatureDiscoveryOld = function FeatureDiscoveryOld(_ref) {
  var children = _ref.children,
    testId = _ref.testId;
  var renderedTime = (0, _react.useRef)();
  var storageClient = (0, _react.useMemo)(function () {
    return new _storageClient.StorageClient(LOCAL_STORAGE_CLIENT_KEY);
  }, []);
  var discovered = (0, _react.useMemo)(function () {
    try {
      return storageClient.getItem(LOCAL_STORAGE_DISCOVERY_KEY) === LOCAL_STORAGE_DISCOVERY_VALUE;
    } catch (_unused) {
      // If localStorage is not available, don't show feature discovery component. Treat it as 'discovered'.
      return true;
    }
  }, [storageClient]);
  (0, _react.useEffect)(function () {
    renderedTime.current = Date.now();
    return function () {
      if (!discovered && renderedTime.current) {
        var duration = Date.now() - renderedTime.current;
        if (duration > LOCAL_STORAGE_DISCOVERY_REQUIRED_TIME) {
          try {
            storageClient.setItemWithExpiry(LOCAL_STORAGE_DISCOVERY_KEY, LOCAL_STORAGE_DISCOVERY_VALUE, LOCAL_STORAGE_DISCOVERY_EXPIRY_IN_MS);
          } catch (_unused2) {
            // silent error
          }
        }
      }
    };
  }, [storageClient, discovered]);
  var component = (0, _react.useMemo)(function () {
    if (!discovered) {
      return (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        (0, _react2.jsx)("span", {
          css: (0, _styled.getPulseStyles)(),
          "data-testid": "".concat(testId, "-discovery")
        }, children)
      );
    }
  }, [children, discovered, testId]);
  return component !== null && component !== void 0 ? component : children;
};
var _default = exports.default = FeatureDiscoveryOld;