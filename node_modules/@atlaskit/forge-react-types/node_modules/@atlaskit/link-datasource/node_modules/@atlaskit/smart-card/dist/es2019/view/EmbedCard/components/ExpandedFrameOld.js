/* ExpandedFrameOld.tsx generated by @compiled/babel-plugin v0.36.1 */
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import Tooltip from '@atlaskit/tooltip';
import { useMouseDownEvent } from '../../../state/analytics/useLinkClicked';
import { handleClickCommon } from '../../common/utils';
import { className, Content, Header, IconWrapper, LinkWrapper, TextWrapper, TooltipWrapper, Wrapper } from './styledOld';
export const ExpandedFrameOld = ({
  isPlaceholder = false,
  children,
  onClick,
  icon,
  text,
  isSelected,
  frameStyle = 'showOnHover',
  href,
  minWidth,
  maxWidth,
  testId = 'expanded-frame',
  inheritDimensions,
  allowScrollBar = false,
  setOverflow = true
}) => {
  const isInteractive = () => !isPlaceholder && (Boolean(href) || Boolean(onClick));
  const handleClick = event => handleClickCommon(event, onClick);
  const handleMouseDown = useMouseDownEvent();
  const renderHeader = () => {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      React.createElement(Header, {
        className: "embed-header",
        frameStyle: frameStyle
      }, /*#__PURE__*/React.createElement(IconWrapper, {
        isPlaceholder: isPlaceholder
      }, !isPlaceholder && icon), /*#__PURE__*/React.createElement(TooltipWrapper, null, /*#__PURE__*/React.createElement(Tooltip, {
        content: text,
        hideTooltipOnMouseDown: true
      }, /*#__PURE__*/React.createElement(TextWrapper, {
        isPlaceholder: isPlaceholder
      }, !isPlaceholder && /*#__PURE__*/React.createElement("a", {
        href: href,
        onClick: handleClick,
        onMouseDown: handleMouseDown
      }, text)))))
    );
  };
  const renderContent = () => {
    return /*#__PURE__*/React.createElement(Content, {
      "data-testid": "embed-content-wrapper",
      allowScrollBar: allowScrollBar,
      removeOverflow: !setOverflow,
      isInteractive: isInteractive(),
      frameStyle: frameStyle
      // This fixes an issue with input fields in cross domain iframes (ie. databases and jira fields from different domains)
      // See: HOT-107830
      ,
      contentEditable: 'false',
      suppressContentEditableWarning: true
    }, children);
  };
  if (!isPlaceholder && href) {
    return /*#__PURE__*/React.createElement(LinkWrapper
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      isInteractive: isInteractive(),
      isSelected: isSelected,
      frameStyle: frameStyle,
      minWidth: minWidth,
      maxWidth: maxWidth,
      "data-testid": testId,
      "data-trello-do-not-use-override": testId
      // Due to limitations of testing library, we can't assert ::after
      ,
      "data-is-selected": isSelected,
      inheritDimensions: inheritDimensions
    }, renderHeader(), renderContent());
  } else {
    return /*#__PURE__*/React.createElement(Wrapper
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      isInteractive: isInteractive(),
      isSelected: isSelected,
      minWidth: minWidth,
      frameStyle: frameStyle,
      maxWidth: maxWidth,
      "data-testid": testId,
      "data-trello-do-not-use-override": testId,
      "data-is-selected": isSelected,
      "data-wrapper-type": "default",
      "data-is-interactive": isInteractive()
    }, renderHeader(), renderContent());
  }
};