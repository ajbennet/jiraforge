"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeToButtonSpacing = exports.importIcon = exports.hasWhiteSpace = exports.getTruncateStyles = exports.getPrimitivesPaddingSpaceBySize = exports.getPrimitivesInlineSpaceBySize = exports.getMaxLines = exports.getMaxLineHeight = exports.getLinkSizeStyles = exports.getLinkLineHeight = exports.getIconWidthOld = exports.getIconWidthNew = exports.getIconWidth = exports.getIconSizeStyles = exports.getFormattedMessageAsString = exports.getFormattedMessage = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _reactLoadable = _interopRequireDefault(require("react-loadable"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _constants = require("../../../constants");
var _templateObject;
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
/* eslint-disable @atlaskit/design-system/use-tokens-typography */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var sizeToButtonSpacing = exports.sizeToButtonSpacing = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _constants.SmartLinkSize.Small, 'none'), _constants.SmartLinkSize.Medium, 'compact'), _constants.SmartLinkSize.Large, 'compact'), _constants.SmartLinkSize.XLarge, 'default');
var getFormattedMessage = exports.getFormattedMessage = function getFormattedMessage(message) {
  if (message) {
    var descriptor = message.descriptor,
      values = message.values;
    return /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, descriptor, {
      values: values
    }));
  }
};
var getFormattedMessageAsString = exports.getFormattedMessageAsString = function getFormattedMessageAsString(intl, message, context) {
  var formatMessage = intl.formatMessage;
  return message ? formatMessage(message, {
    context: context
  }) : '';
};

/**
 * @deprecated remove on FF bandicoots-compiled-migration-smartcard clean up
 */
var getIconDimensionStyles = function getIconDimensionStyles(value) {
  return (0, _react2.css)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    height: value,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    minHeight: value,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    maxHeight: value,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    width: value,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    minWidth: value,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    maxWidth: value
  });
};

/**
 * @deprecated remove on FF bandicoots-compiled-migration-smartcard clean up
 */
var getIconSizeStyles = exports.getIconSizeStyles = function getIconSizeStyles(width) {
  var sizeStyles = getIconDimensionStyles(width);
  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\t\tflex: 0 0 auto;\n\t\t", "\n\t\tspan,\n    svg,\n    img {\n\t\t\t", "\n\t\t}\n\t\tsvg {\n\t\t\tpadding: 0;\n\t\t}\n\t"])), sizeStyles, sizeStyles);
};

// TODO Delete when cleaning platform-smart-card-icon-migration
var getIconWidthOld = exports.getIconWidthOld = function getIconWidthOld(size) {
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
      return '2rem';
    case _constants.SmartLinkSize.Large:
      return '1.5rem';
    case _constants.SmartLinkSize.Medium:
      return '1rem';
    case _constants.SmartLinkSize.Small:
    default:
      return '.75rem';
  }
};

// TODO Rename to getIconWidth when cleaning platform-smart-card-icon-migration
var getIconWidthNew = exports.getIconWidthNew = function getIconWidthNew(size) {
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
    case _constants.SmartLinkSize.Large:
      return "var(--ds-space-300, 24px)";
    case _constants.SmartLinkSize.Medium:
    case _constants.SmartLinkSize.Small:
    default:
      return "var(--ds-space-200, 16px)";
  }
};

// TODO Delete when cleaning platform-smart-card-icon-migration
var getIconWidth = exports.getIconWidth = function getIconWidth(size) {
  return (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? getIconWidthNew(size) : getIconWidthOld(size);
};
var importIcon = exports.importIcon = function importIcon(importFn) {
  return (0, _reactLoadable.default)({
    loader: function loader() {
      return importFn().then(function (module) {
        return module.default;
      });
    },
    loading: function loading() {
      return null;
    }
  }); // Because we're using dynamic loading here, TS will not be able to infer the type.
};

/**
 * @deprecated remove FF bandicoots-compiled-migration-smartcard clean up
 */
var getLinkLineHeight = exports.getLinkLineHeight = function getLinkLineHeight(size) {
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
      return '1.5rem';
    case _constants.SmartLinkSize.Large:
    case _constants.SmartLinkSize.Medium:
    case _constants.SmartLinkSize.Small:
    default:
      return '1rem';
  }
};

/**
 * @deprecated remove FF bandicoots-compiled-migration-smartcard clean up
 */
var getLinkSizeStyles = exports.getLinkSizeStyles = function getLinkSizeStyles(size) {
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
      return (0, _react2.css)({
        font: "var(--ds-font-heading-medium, normal 500 20px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-regular, 400)",
        lineHeight: getLinkLineHeight(size)
      });
    case _constants.SmartLinkSize.Large:
    case _constants.SmartLinkSize.Medium:
      return (0, _react2.css)({
        font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-regular, 400)",
        lineHeight: getLinkLineHeight(size)
      });
    case _constants.SmartLinkSize.Small:
    default:
      return (0, _react2.css)({
        font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
        fontWeight: "var(--ds-font-weight-regular, 400)",
        lineHeight: getLinkLineHeight(size)
      });
  }
};
var getMaxLineHeight = exports.getMaxLineHeight = function getMaxLineHeight(size) {
  // The maximum line height based on all elements in specific size.
  // These heights belongs to AvatarGroup.
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
    case _constants.SmartLinkSize.Large:
      return 1.75;
    case _constants.SmartLinkSize.Medium:
    case _constants.SmartLinkSize.Small:
    default:
      return 1.5;
  }
};
var getMaxLines = exports.getMaxLines = function getMaxLines(value, defaultValue, max, min) {
  if (value > max) {
    return defaultValue;
  }
  if (value < min) {
    return min;
  }
  return value;
};

/**
 * A space between element based on smart link size
 * To replace blocks/utils.tsz getGapSize() with space token for primitives
 */
var getPrimitivesInlineSpaceBySize = exports.getPrimitivesInlineSpaceBySize = function getPrimitivesInlineSpaceBySize(size) {
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
      return 'space.250';
    case _constants.SmartLinkSize.Large:
      return 'space.200';
    case _constants.SmartLinkSize.Medium:
      return 'space.100';
    case _constants.SmartLinkSize.Small:
    default:
      return 'space.050';
  }
};

/**
 * Get container padding based on smart link size
 * To replace container/index.tsx getPadding() with space token for primitives
 * @deprecated remove on FF clean up bandicoots-compiled-migration-smartcard
 */
var getPrimitivesPaddingSpaceBySize = exports.getPrimitivesPaddingSpaceBySize = function getPrimitivesPaddingSpaceBySize(size) {
  switch (size) {
    case _constants.SmartLinkSize.XLarge:
      return 'space.300';
    case _constants.SmartLinkSize.Large:
      return 'space.250';
    case _constants.SmartLinkSize.Medium:
      return 'space.200';
    case _constants.SmartLinkSize.Small:
    default:
      return 'space.100';
  }
};

/**
 * @deprecated remove FF bandicoots-compiled-migration-smartcard clean up
 */
var getTruncateStyles = exports.getTruncateStyles = function getTruncateStyles(maxLines) {
  var lineHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1rem';
  var wordBreak = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'break-word';
  return (0, _react2.css)({
    display: '-webkit-box',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    wordBreak: wordBreak,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    WebkitLineClamp: maxLines,
    WebkitBoxOrient: 'vertical',
    '@supports not (-webkit-line-clamp: 1)': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      maxHeight: "calc(".concat(maxLines, " * ").concat(lineHeight, ")")
    }
  });
};
var hasWhiteSpace = exports.hasWhiteSpace = function hasWhiteSpace(str) {
  return str.search(/\s/) >= 0;
};