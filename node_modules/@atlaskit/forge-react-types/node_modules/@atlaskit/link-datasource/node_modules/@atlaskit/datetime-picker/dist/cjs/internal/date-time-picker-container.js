"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateTimePickerContainer = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _colors = require("@atlaskit/theme/colors");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var isInvalidBorderStyles = (0, _react2.css)({
  borderColor: "var(--ds-border-danger, ".concat(_colors.R400, ")")
});
var isFocusedBorderStyles = (0, _react2.css)({
  borderColor: "var(--ds-border-focused, ".concat(_colors.B100, ")"),
  boxShadow: "inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", "var(--ds-border-focused, ".concat(_colors.B100, ")"))
});
var isFocusedStyles = (0, _react2.css)({
  backgroundColor: "var(--ds-background-input-pressed, ".concat(_colors.N0, ")")
});
var subtleBgStyles = (0, _react2.css)({
  backgroundColor: 'transparent',
  borderColor: 'transparent'
});
var subtleFocusedBgStyles = (0, _react2.css)({
  backgroundColor: "var(--ds-background-input-pressed, transparent)",
  borderColor: 'transparent'
});
var noBgStyles = (0, _react2.css)({
  backgroundColor: 'transparent',
  borderColor: 'transparent',
  '&:hover': {
    backgroundColor: 'transparent',
    borderColor: 'transparent'
  }
});
var hoverStyles = (0, _react2.css)({
  '&:hover': {
    backgroundColor: "var(--ds-background-input-hovered, ".concat(_colors.N30, ")"),
    borderColor: "var(--ds-border-input, ".concat(_colors.N100, ")")
  }
});
var isInvalidHoverStyles = (0, _react2.css)({
  '&:hover': {
    backgroundColor: "var(--ds-background-input-hovered, ".concat(_colors.N0, ")"),
    borderColor: "var(--ds-border-danger, ".concat(_colors.R400, ")")
  }
});
var isDisabledStyles = (0, _react2.css)({
  backgroundColor: "var(--ds-background-disabled, #091E4208)",
  borderColor: "var(--ds-border-disabled, #091E420F)",
  '&:hover': {
    cursor: 'default'
  }
});
var newBorderStyles = (0, _react2.css)({
  border: "var(--ds-border-width, 1px)".concat(" solid ", "var(--ds-border-input, ".concat(_colors.N100, ")"))
});
var baseContainerStyles = (0, _react2.css)({
  display: 'flex',
  backgroundColor: "var(--ds-background-input, ".concat(_colors.N20, ")"),
  border: "2px solid ".concat("var(--ds-border-input, ".concat(_colors.N20, ")")),
  borderRadius: "var(--ds-border-radius, 3px)",
  transition: 'background-color 200ms ease-in-out, border-color 200ms ease-in-out',
  '&:hover': {
    cursor: 'pointer'
  }
});
/**
 * This is the container for the datetime picker component.
 */
var DateTimePickerContainer = exports.DateTimePickerContainer = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
    isDisabled = _ref.isDisabled,
    isFocused = _ref.isFocused,
    appearance = _ref.appearance,
    isInvalid = _ref.isInvalid,
    innerProps = _ref.innerProps,
    testId = _ref.testId;
  var notFocusedOrIsDisabled = !(isFocused || isDisabled);

  // we cannot use Box or Flex primitives because these do not allow ...innerProps to be passed
  return (0, _react2.jsx)("div", (0, _extends2.default)({
    css: [baseContainerStyles, newBorderStyles, isDisabled && isDisabledStyles, isFocused && isFocusedStyles, appearance === 'subtle' && (isFocused ? subtleFocusedBgStyles : subtleBgStyles), isFocused && isFocusedBorderStyles, isInvalid && isInvalidBorderStyles, notFocusedOrIsDisabled && (isInvalid ? isInvalidHoverStyles : hoverStyles), appearance === 'none' && noBgStyles]
  }, innerProps, {
    "data-testid": testId,
    ref: ref
  }), children);
});