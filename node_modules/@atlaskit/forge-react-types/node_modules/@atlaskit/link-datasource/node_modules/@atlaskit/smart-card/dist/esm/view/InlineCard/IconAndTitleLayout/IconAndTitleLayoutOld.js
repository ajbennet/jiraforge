/* IconAndTitleLayoutOld.tsx generated by @compiled/babel-plugin v0.36.1 */
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./IconAndTitleLayoutOld.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { di } from 'react-magnetic-di';
import ImageLoader from 'react-render-image';
import LinkIcon from '@atlaskit/icon/core/migration/link';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { Icon, Shimmer } from '../Icon';
import { LinkAppearance as LinkAppearanceOld, NoLinkAppearance as NoLinkAppearanceOld } from '../styled-emotion';
import { EmojiWrapperOldVisualRefresh, IconWrapperOldVisualRefresh, TitleWrapperClassNameOldVisualRefresh } from './styled';
import { EmojiWrapper as EmojiWrapperOld, IconEmptyWrapper as IconEmptyWrapperOld, IconPositionWrapper as IconPositionWrapperOld, IconTitleWrapper as IconTitleWrapperOld, IconWrapper as IconWrapperOld, TitleWrapper as TitleWrapperOld } from './styled-emotion';
export var IconAndTitleLayoutOld = /*#__PURE__*/function (_React$Component) {
  function IconAndTitleLayoutOld() {
    var _this;
    _classCallCheck(this, IconAndTitleLayoutOld);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, IconAndTitleLayoutOld, [].concat(args));
    _defineProperty(_this, "handleClick", function (event) {
      var onClick = _this.props.onClick;
      if (onClick) {
        event.preventDefault();
        event.stopPropagation();
        onClick(event);
      }
    });
    _defineProperty(_this, "handleKeyPress", function (event) {
      var onClick = _this.props.onClick;
      if (event.key !== ' ' && event.key !== 'Enter') {
        return;
      }
      if (onClick) {
        event.preventDefault();
        event.stopPropagation();
        onClick(event);
      }
    });
    return _this;
  }
  _inherits(IconAndTitleLayoutOld, _React$Component);
  return _createClass(IconAndTitleLayoutOld, [{
    key: "renderAtlaskitIcon",
    value: function renderAtlaskitIcon() {
      var _this$props = this.props,
        icon = _this$props.icon,
        emoji = _this$props.emoji;
      if (emoji) {
        if (fg('platform-linking-visual-refresh-v1')) {
          return /*#__PURE__*/React.createElement(Box, {
            as: "span",
            xcss: iconWrapperStyle,
            testId: "icon-position-emoji-wrapper"
          }, emoji);
        }
        return fg('bandicoots-compiled-migration-smartcard') ? /*#__PURE__*/React.createElement(EmojiWrapperOldVisualRefresh, null, emoji) : /*#__PURE__*/React.createElement(EmojiWrapperOld, null, emoji);
      }
      if (!icon || typeof icon === 'string') {
        return null;
      }
      if (fg('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/React.createElement(Box, {
          as: "span",
          xcss: iconWrapperStyle,
          testId: "icon-atlaskit-icon-wrapper"
        }, icon);
      }
      return fg('bandicoots-compiled-migration-smartcard') ? /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, icon) : /*#__PURE__*/React.createElement(IconWrapperOld, null, icon);
    }
  }, {
    key: "renderImageIcon",
    value: function renderImageIcon(errored, testId) {
      var url = this.props.icon;
      if (!url || typeof url !== 'string') {
        return null;
      }
      if (fg('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/React.createElement(ImageLoader, {
          src: url,
          loaded: /*#__PURE__*/React.createElement("img", {
            src: url,
            "data-testid": "".concat(testId, "-image"),
            alt: "",
            className: ax(["_1bsb1osq"])
          }),
          errored: errored,
          loading: /*#__PURE__*/React.createElement(Shimmer, {
            testId: "".concat(testId, "-loading")
          })
        });
      }
      return /*#__PURE__*/React.createElement(ImageLoader, {
        src: url,
        loaded: /*#__PURE__*/React.createElement(Icon
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        , {
          className: "smart-link-icon",
          src: url,
          "data-testid": "".concat(testId, "-image"),
          alt: ""
        }),
        errored: errored,
        loading: /*#__PURE__*/React.createElement(Shimmer, {
          testId: "".concat(testId, "-loading")
        })
      });
    }
  }, {
    key: "renderIconPlaceholder",
    value: function renderIconPlaceholder(testId) {
      var defaultIcon = this.props.defaultIcon;
      if (fg('platform-linking-visual-refresh-v1')) {
        return defaultIcon || /*#__PURE__*/React.createElement(LinkIcon, {
          label: "link",
          LEGACY_size: "small",
          testId: "".concat(testId, "-default"),
          color: "currentColor"
        });
      }
      if (defaultIcon) {
        return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, defaultIcon);
      }
      return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, /*#__PURE__*/React.createElement(LinkIcon, {
        label: "link",
        LEGACY_size: "small",
        testId: "".concat(testId, "-default"),
        color: "currentColor"
      }));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(testId) {
      // We render two kinds of icons here:
      // - Image: acquired from either DAC or Teamwork Platform Apps;
      // - Atlaskit Icon: an Atlaskit SVG;
      // Each of these are scaled down to 12x12.
      var icon = this.renderAtlaskitIcon();
      if (icon) {
        return icon;
      }
      var placeholder = this.renderIconPlaceholder(testId);
      var image = this.renderImageIcon(placeholder, testId);
      if (fg('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/React.createElement(Box, {
          as: "span",
          xcss: iconWrapperStyle,
          testId: "".concat(testId, "-image-wrapper")
        }, image || placeholder);
      }
      return image || placeholder;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        children = _this$props2.children,
        title = _this$props2.title,
        titleColor = _this$props2.titleColor,
        titleTextColor = _this$props2.titleTextColor,
        link = _this$props2.link,
        rightSide = _this$props2.rightSide,
        _this$props2$testId = _this$props2.testId,
        testId = _this$props2$testId === void 0 ? 'inline-card-icon-and-title' : _this$props2$testId;
      var titlePart = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconPositionWrapperOld, {
        "data-testid": "icon-position-wrapper"
      }, children || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconEmptyWrapperOld, {
        "data-testid": "icon-empty-wrapper"
      }), this.renderIcon(testId))), /*#__PURE__*/React.createElement(TitleWrapperOld
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      , {
        style: {
          color: titleTextColor
        }
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        ,
        className: TitleWrapperClassNameOldVisualRefresh
      }, title));
      return (
        /*#__PURE__*/
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        React.createElement(IconTitleWrapperOld, {
          style: {
            color: titleColor
          },
          "data-testid": testId
        }, link ? /*#__PURE__*/React.createElement(LinkAppearanceOld, {
          href: link,
          onClick: this.handleClick,
          onKeyPress: this.handleKeyPress
        }, titlePart) : titlePart, rightSide ? /*#__PURE__*/React.createElement(NoLinkAppearanceOld, null, rightSide) : null)
      );
    }
  }]);
}(React.Component);
_defineProperty(IconAndTitleLayoutOld, "defaultProps", {
  rightSideSpacer: true
});
var iconWidth = '16px';
var iconWrapperStyle = xcss({
  position: 'absolute',
  display: 'inline-flex',
  alignItems: 'center',
  boxSizing: 'border-box',
  top: 'space.0',
  left: 'space.0',
  bottom: 'space.0',
  width: iconWidth,
  userSelect: 'none'
});
var iconImageStyle = null;