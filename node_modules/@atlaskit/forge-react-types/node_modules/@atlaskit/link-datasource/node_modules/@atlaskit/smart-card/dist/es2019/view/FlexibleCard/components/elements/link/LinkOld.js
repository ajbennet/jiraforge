import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Tooltip from '@atlaskit/tooltip';
import { SmartLinkInternalTheme, SmartLinkSize, SmartLinkTheme } from '../../../../../constants';
import { useMouseDownEvent } from '../../../../../state/analytics/useLinkClicked';
import { getLinkLineHeight, getLinkSizeStyles, getTruncateStyles, hasWhiteSpace } from '../../utils';
const DEFAULT_MAX_LINES = 2;
const MAXIMUM_MAX_LINES = 2;
const MINIMUM_MAX_LINES = 1;
const containerStyles = css({
  flex: '1 1 auto'
});
const getThemeStyles = theme => {
  switch (theme) {
    case SmartLinkInternalTheme.Grey:
      // We are being specifc with the CSS selectors to ensure that Confluence overrides
      // do not affect our internal Smart Card styles
      return css({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        'a&': {
          color: "var(--ds-text-subtlest, #626F86)",
          '&:active, &:visited, &:focus, &:hover': {
            color: "var(--ds-text-subtlest, #626F86)",
            textDecoration: 'underline'
          },
          font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
        }
      });
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
    case SmartLinkTheme.Black:
      return css({
        color: "var(--ds-text-subtle, #44546F)",
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':active': {
          color: "var(--ds-text, #172B4D)"
        },
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':hover': {
          color: "var(--ds-text-subtle, #44546F)",
          textDecoration: 'underline'
        }
      });
    case SmartLinkTheme.Link:
    default:
      return css({
        color: "var(--ds-link, #0C66E4)",
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':active': {
          color: "var(--ds-link-pressed, #0055CC)"
        },
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
        ':hover': {
          color: "var(--ds-link, #0C66E4)",
          textDecoration: 'underline'
        }
      });
  }
};
const getAnchorStyles = (size, theme, maxLines, hasSpace) => {
  const sizeStyles = getLinkSizeStyles(size);
  return css({
    flex: '1 1 auto'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  sizeStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getTruncateStyles(maxLines, getLinkLineHeight(size), hasSpace ? 'break-word' : 'break-all'),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  getThemeStyles(theme));
};
const getMaxLines = maxLines => {
  if (maxLines > MAXIMUM_MAX_LINES) {
    return DEFAULT_MAX_LINES;
  }
  if (maxLines < MINIMUM_MAX_LINES) {
    return MINIMUM_MAX_LINES;
  }
  return maxLines;
};
const withTooltip = (trigger, content, testId) => jsx(Tooltip, {
  content: content,
  testId: `${testId}-tooltip`,
  tag: "span"
}, trigger);

/**
 * A base element that represent an anchor.
 * @internal
 * @param {LinkProps} LinkProps - The props necessary for the Link element.
 * @see LinkIcon
 */
const LinkOld = ({
  hideTooltip,
  maxLines = DEFAULT_MAX_LINES,
  name,
  overrideCss,
  size = SmartLinkSize.Medium,
  testId = 'smart-element-link',
  text,
  theme = SmartLinkTheme.Link,
  url,
  onClick,
  target = '_blank'
}) => {
  const onMouseDown = useMouseDownEvent();
  const hasSpace = useMemo(() => text ? hasWhiteSpace(text) : false, [text]);
  const anchor = jsx("a", _extends({
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [getAnchorStyles(size, theme, getMaxLines(maxLines), hasSpace), overrideCss],
    "data-smart-element": name,
    "data-smart-element-link": true,
    "data-testid": testId,
    onClick: onClick,
    onMouseDown: onMouseDown,
    href: url
    // We do not want set the target if it is the default value of '_self'. This prevents link
    // click issues in Confluence and Trello which rely on it not being set unless necessary.
  }, target !== '_self' && {
    target
  }), text);
  return jsx("span", {
    css: containerStyles
  }, hideTooltip || text === undefined ? anchor : withTooltip(anchor, text, testId));
};
export default LinkOld;