"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _heading = _interopRequireDefault(require("@atlaskit/heading"));
var _link = _interopRequireDefault(require("@atlaskit/icon/core/migration/link"));
var _utils = require("../../../common/utils");
var _ExpandedFrame = require("../../components/ExpandedFrame");
var _ImageIcon = require("../../components/ImageIcon");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var containerStyles = (0, _react2.css)({
  display: 'grid',
  height: 'inherit'
});
var contentStyles = (0, _react2.css)({
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  textAlign: 'center',
  alignItems: 'center',
  margin: 'auto',
  padding: "var(--ds-space-200, 16px)",
  gap: "var(--ds-space-250, 20px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  maxWidth: (0, _utils.gs)(50)
});
var descriptionStyles = (0, _react2.css)({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  textAlign: 'center'
});
var imageStyles = (0, _react2.css)({
  height: '120px',
  width: '180px',
  objectFit: 'contain',
  objectPosition: 'center center'
});
var UnresolvedViewOld = function UnresolvedViewOld(_ref) {
  var button = _ref.button,
    description = _ref.description,
    frameStyle = _ref.frameStyle,
    iconUrlOrElement = _ref.icon,
    imageUrlOrElement = _ref.image,
    inheritDimensions = _ref.inheritDimensions,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    testId = _ref.testId,
    text = _ref.text,
    title = _ref.title,
    url = _ref.url;
  var icon = (0, _react.useMemo)(function () {
    if ( /*#__PURE__*/_react.default.isValidElement(iconUrlOrElement)) {
      return iconUrlOrElement;
    }
    return (0, _react2.jsx)(_ImageIcon.ImageIcon, {
      src: typeof iconUrlOrElement === 'string' ? iconUrlOrElement : undefined,
      default: (0, _react2.jsx)(_link.default, {
        label: "icon",
        LEGACY_size: "small",
        testId: "embed-card-fallback-icon",
        color: "currentColor"
      })
    });
  }, [iconUrlOrElement]);
  var image = (0, _react.useMemo)(function () {
    if (!imageUrlOrElement) {
      return null;
    }
    var imageTestId = "".concat(testId, "-unresolved-image");
    if (typeof imageUrlOrElement === 'string') {
      return (0, _react2.jsx)("img", {
        css: imageStyles,
        "data-testid": imageTestId,
        src: imageUrlOrElement,
        alt: ""
      });
    }
    return (0, _react2.jsx)("div", {
      css: imageStyles,
      "data-testid": imageTestId
    }, imageUrlOrElement);
  }, [imageUrlOrElement, testId]);
  return (0, _react2.jsx)(_ExpandedFrame.ExpandedFrame
  // Scroll bar must be shown for unresolved views to display the connect account button
  , {
    allowScrollBar: true,
    setOverflow: true
    // EDM-9259: Fix embed frame showing on unresolved views when frameStyle is set to hide.
    // Set fallback to 'show' here to maintain the current behaviour when platform.editor.show-embed-card-frame-renderer is OFF.
    // Remove 'show' on platform.editor.show-embed-card-frame-renderer cleanup as frameStyle will be set to 'show' both in renderer and editor.
    // We want all views to be consistent and respect frameStyle instead of
    // having resolved view default to showOnHover and unresolved view default to show.
    // Default frameStyle is set inside <ExpandedFrame />
    ,
    frameStyle: frameStyle !== null && frameStyle !== void 0 ? frameStyle : 'show',
    href: url,
    icon: icon,
    inheritDimensions: inheritDimensions,
    isSelected: isSelected,
    onClick: onClick,
    testId: testId,
    text: text
  }, (0, _react2.jsx)("div", {
    css: containerStyles,
    "data-testid": "".concat(testId, "-unresolved-container")
  }, (0, _react2.jsx)("div", {
    css: contentStyles
  }, image, (0, _react2.jsx)(_heading.default, {
    size: "large",
    testId: "".concat(testId, "-unresolved-title")
  }, title), (0, _react2.jsx)("span", {
    css: descriptionStyles,
    "data-testid": "".concat(testId, "-unresolved-description")
  }, description), button)));
};
var _default = exports.default = UnresolvedViewOld;