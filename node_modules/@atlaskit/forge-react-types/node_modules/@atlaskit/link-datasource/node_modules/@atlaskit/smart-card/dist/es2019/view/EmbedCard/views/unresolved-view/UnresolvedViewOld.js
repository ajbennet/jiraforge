/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Heading from '@atlaskit/heading';
import LinkGlyph from '@atlaskit/icon/core/migration/link';
import { gs } from '../../../common/utils';
import { ExpandedFrame } from '../../components/ExpandedFrame';
import { ImageIcon } from '../../components/ImageIcon';
const containerStyles = css({
  display: 'grid',
  height: 'inherit'
});
const contentStyles = css({
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  textAlign: 'center',
  alignItems: 'center',
  margin: 'auto',
  padding: "var(--ds-space-200, 16px)",
  gap: "var(--ds-space-250, 20px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  maxWidth: gs(50)
});
const descriptionStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  textAlign: 'center'
});
const imageStyles = css({
  height: '120px',
  width: '180px',
  objectFit: 'contain',
  objectPosition: 'center center'
});
const UnresolvedViewOld = ({
  button,
  description,
  frameStyle,
  icon: iconUrlOrElement,
  image: imageUrlOrElement,
  inheritDimensions,
  isSelected,
  onClick,
  testId,
  text,
  title,
  url
}) => {
  const icon = useMemo(() => {
    if ( /*#__PURE__*/React.isValidElement(iconUrlOrElement)) {
      return iconUrlOrElement;
    }
    return jsx(ImageIcon, {
      src: typeof iconUrlOrElement === 'string' ? iconUrlOrElement : undefined,
      default: jsx(LinkGlyph, {
        label: "icon",
        LEGACY_size: "small",
        testId: "embed-card-fallback-icon",
        color: "currentColor"
      })
    });
  }, [iconUrlOrElement]);
  const image = useMemo(() => {
    if (!imageUrlOrElement) {
      return null;
    }
    const imageTestId = `${testId}-unresolved-image`;
    if (typeof imageUrlOrElement === 'string') {
      return jsx("img", {
        css: imageStyles,
        "data-testid": imageTestId,
        src: imageUrlOrElement,
        alt: ""
      });
    }
    return jsx("div", {
      css: imageStyles,
      "data-testid": imageTestId
    }, imageUrlOrElement);
  }, [imageUrlOrElement, testId]);
  return jsx(ExpandedFrame
  // Scroll bar must be shown for unresolved views to display the connect account button
  , {
    allowScrollBar: true,
    setOverflow: true
    // EDM-9259: Fix embed frame showing on unresolved views when frameStyle is set to hide.
    // Set fallback to 'show' here to maintain the current behaviour when platform.editor.show-embed-card-frame-renderer is OFF.
    // Remove 'show' on platform.editor.show-embed-card-frame-renderer cleanup as frameStyle will be set to 'show' both in renderer and editor.
    // We want all views to be consistent and respect frameStyle instead of
    // having resolved view default to showOnHover and unresolved view default to show.
    // Default frameStyle is set inside <ExpandedFrame />
    ,
    frameStyle: frameStyle !== null && frameStyle !== void 0 ? frameStyle : 'show',
    href: url,
    icon: icon,
    inheritDimensions: inheritDimensions,
    isSelected: isSelected,
    onClick: onClick,
    testId: testId,
    text: text
  }, jsx("div", {
    css: containerStyles,
    "data-testid": `${testId}-unresolved-container`
  }, jsx("div", {
    css: contentStyles
  }, image, jsx(Heading, {
    size: "large",
    testId: `${testId}-unresolved-title`
  }, title), jsx("span", {
    css: descriptionStyles,
    "data-testid": `${testId}-unresolved-description`
  }, description), button)));
};
export default UnresolvedViewOld;