"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _blocks = require("../../../../FlexibleCard/components/blocks");
var _actionGroup = _interopRequireDefault(require("../../../../FlexibleCard/components/blocks/action-group"));
var _loadingSkeleton = require("../../../../FlexibleCard/components/common/loading-skeleton");
var _icon = _interopRequireDefault(require("../../../../FlexibleCard/components/elements/icon"));
var _styled = require("../../../styled");
var _styled2 = require("./styled");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var HoverCardLoadingViewOld = function HoverCardLoadingViewOld(_ref) {
  var titleBlockProps = _ref.titleBlockProps;
  var testId = 'hover-card-loading-view';
  var lineHeightRem = 1.25;
  var skeletonWidth = _styled.CARD_WIDTH_REM - 2;
  var size = titleBlockProps.size,
    actions = titleBlockProps.actions;
  var actionGroup = (actions === null || actions === void 0 ? void 0 : actions.length) && (actions === null || actions === void 0 ? void 0 : actions.length) > 0 && (0, _react2.jsx)(_actionGroup.default, {
    items: actions,
    visibleButtonsNum: 2
  });
  var LoadingSkeleton = (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? _loadingSkeleton.LoadingSkeletonNew : _loadingSkeleton.LoadingSkeletonOld;
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _styled2.loadingViewContainer,
      "data-testid": testId
    }, (0, _react2.jsx)("div", {
      css: _styled2.skeletonContainer
    }, (0, _react2.jsx)(_blocks.CustomBlock, (0, _extends2.default)({}, titleBlockProps, {
      overrideCss: _styled2.titleBlockStyles,
      testId: "".concat(testId, "-title-block")
    }), (0, _react2.jsx)(_icon.default, {
      render: function render() {
        return (0, _react2.jsx)(LoadingSkeleton, null);
      },
      size: size
    }), (0, _react2.jsx)("span", {
      css: (0, _styled2.getTitleStyles)(lineHeightRem),
      "data-testid": "".concat(testId, "-title")
    }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonNew, {
      height: "".concat(lineHeightRem, "rem")
    }) : (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonOld, {
      height: lineHeightRem
    })), actionGroup), (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonNew, {
      width: "".concat(skeletonWidth, "rem"),
      height: "".concat(lineHeightRem, "rem")
    }), (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonNew, {
      width: "".concat(skeletonWidth, "rem"),
      height: "".concat(lineHeightRem * 3, "rem")
    }), (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonNew, {
      width: "".concat(skeletonWidth, "rem"),
      height: "".concat(lineHeightRem, "rem")
    })) : (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonOld, {
      width: skeletonWidth,
      height: lineHeightRem
    }), (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonOld, {
      width: skeletonWidth,
      height: lineHeightRem * 3
    }), (0, _react2.jsx)(_loadingSkeleton.LoadingSkeletonOld, {
      width: skeletonWidth,
      height: lineHeightRem
    }))))
  );
};
var _default = exports.default = HoverCardLoadingViewOld;