import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useContext } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { di } from 'react-magnetic-di';
import { N40 } from '@atlaskit/theme/colors';
import { MediaPlacement, SmartLinkSize, SmartLinkTheme } from '../../../../constants';
import { FlexibleUiContext } from '../../../../state/flexible-ui-context';
import { isFlexUiPreviewPresent } from '../../../../state/flexible-ui-context/utils';
import { isFlexibleUiBlock, isFlexibleUiPreviewBlock, isFlexibleUiTitleBlock } from '../../../../utils/flexible';
import HoverCardControl from './hover-card-control';
import LayeredLink from './layered-link';
var elevationStyles = css({
  border: "1px solid ".concat("var(--ds-border, ".concat(N40, ")")),
  borderRadius: "var(--ds-border-radius-200, 8px)",
  margin: "var(--ds-space-025, 2px)"
});
var clickableContainerStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  'a, button, .has-action': {
    position: 'relative',
    zIndex: 1
  }
});
var getGap = function getGap(size) {
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.25rem';
    case SmartLinkSize.Large:
      return '1rem';
    case SmartLinkSize.Medium:
      return '.5rem';
    case SmartLinkSize.Small:
    default:
      return '.25rem';
  }
};

/**
 * Get container padding based on smart link size
 * Equivalent version for DS primitives space token is getPrimitivesPaddingSpaceBySize()
 * at view/FlexibleCard/components/utils.tsx
 */
var getPadding = function getPadding(size) {
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.5rem';
    case SmartLinkSize.Large:
      return '1.25rem';
    case SmartLinkSize.Medium:
      return '1rem';
    case SmartLinkSize.Small:
    default:
      return '.5rem';
  }
};
var getContainerPaddingStyles = function getContainerPaddingStyles(size, hidePadding, childrenOptions) {
  var padding = hidePadding ? '0rem' : getPadding(size);
  var gap = getGap(size);
  var previewOnLeft = childrenOptions.previewOnLeft,
    previewOnRight = childrenOptions.previewOnRight;
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    '--container-padding': padding,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    '--container-gap-left': previewOnLeft ? gap : padding,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    '--container-gap-right': previewOnRight ? gap : padding,
    '--preview-block-width': '30%',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    padding: padding
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  previewOnLeft ? "padding-left: calc(var(--preview-block-width) + ".concat(gap, ");") : '',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  previewOnRight ? "padding-right: calc(var(--preview-block-width) + ".concat(gap, ");") : '');
};

/**
 * @deprecated consider removing on FF bandicoots-compiled-migration-smartcard
 */
export var getContainerStyles = function getContainerStyles(size, hideBackground, hideElevation, hidePadding, clickableContainer, childrenOptions) {
  var paddingCss = getContainerPaddingStyles(size, hidePadding, childrenOptions);

  // eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- needs manual remediation
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t\tdisplay: flex;\n\t\tgap: ", " 0;\n\t\tflex-direction: column;\n\t\tmin-width: 0;\n\t\toverflow-x: hidden;\n\t\tposition: relative;\n\t\t", "\n\t\t", "\n    ", "\n    ", "\n    &:hover ~ .actions-button-group {\n\t\t\topacity: 1;\n\t\t}\n\t\ta:focus,\n\t\t.has-action:focus {\n\t\t\toutline-offset: -2px;\n\t\t}\n\t"])), getGap(size), hideBackground ? '' : "background-color: ".concat("var(--ds-surface-raised, #FFFFFF)", ";"), paddingCss, hideElevation ? '' : elevationStyles, clickableContainer ? clickableContainerStyles : '');
};
var getLayeredLink = function getLayeredLink(testId, context, children, onClick) {
  var _ref = context || {},
    title = _ref.title,
    _ref$url = _ref.url,
    url = _ref$url === void 0 ? '' : _ref$url;
  var _ref2 = getTitleBlockProps(children) || {},
    target = _ref2.anchorTarget,
    text = _ref2.text;
  return jsx(LayeredLink, {
    onClick: onClick,
    target: target,
    testId: testId,
    text: text || title,
    url: url
  });
};
var getTitleBlockProps = function getTitleBlockProps(children) {
  var block = React.Children.toArray(children).find(function (child) {
    return isFlexibleUiTitleBlock(child);
  });
  if ( /*#__PURE__*/React.isValidElement(block)) {
    return block.props;
  }
};
export var getChildrenOptions = function getChildrenOptions(children, context) {
  var options = {};
  if (isFlexUiPreviewPresent(context)) {
    React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        if (isFlexibleUiPreviewBlock(child)) {
          var placement = child.props.placement;
          if (placement === MediaPlacement.Left) {
            options.previewOnLeft = true;
          }
          if (placement === MediaPlacement.Right) {
            options.previewOnRight = true;
          }
        }
      }
    });
  }
  return options;
};
var renderChildren = function renderChildren(children, containerSize, containerTheme, status, retry, onClick) {
  return React.Children.map(children, function (child) {
    // TODO: EDM-6468: Use useFlexibleUiOptionContext for rendering options inside block/element instead
    if ( /*#__PURE__*/React.isValidElement(child) && isFlexibleUiBlock(child)) {
      var blockSize = child.props.size;
      var size = blockSize || containerSize;
      if (isFlexibleUiTitleBlock(child)) {
        return /*#__PURE__*/React.cloneElement(child, {
          // @ts-expect-error
          onClick: onClick,
          retry: retry,
          size: size,
          status: status,
          theme: containerTheme
        });
      }
      // @ts-expect-error
      return /*#__PURE__*/React.cloneElement(child, {
        size: size,
        status: status
      });
    }
  });
};

/**
 * A container is a hidden component that build the Flexible Smart Link.
 * All the Flexible UI components are wrapped inside the container.
 * It inherits the ui props from Card component and applies the custom styling
 * accordingly.
 * @internal
 * @see Block
 */
var ContainerOld = function ContainerOld(_ref3) {
  var children = _ref3.children,
    _ref3$clickableContai = _ref3.clickableContainer,
    clickableContainer = _ref3$clickableContai === void 0 ? false : _ref3$clickableContai,
    _ref3$hideBackground = _ref3.hideBackground,
    hideBackground = _ref3$hideBackground === void 0 ? false : _ref3$hideBackground,
    _ref3$hideElevation = _ref3.hideElevation,
    hideElevation = _ref3$hideElevation === void 0 ? false : _ref3$hideElevation,
    _ref3$hidePadding = _ref3.hidePadding,
    hidePadding = _ref3$hidePadding === void 0 ? false : _ref3$hidePadding,
    onClick = _ref3.onClick,
    retry = _ref3.retry,
    _ref3$showHoverPrevie = _ref3.showHoverPreview,
    showHoverPreview = _ref3$showHoverPrevie === void 0 ? false : _ref3$showHoverPrevie,
    hoverPreviewOptions = _ref3.hoverPreviewOptions,
    actionOptions = _ref3.actionOptions,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? SmartLinkSize.Medium : _ref3$size,
    status = _ref3.status,
    _ref3$testId = _ref3.testId,
    testId = _ref3$testId === void 0 ? 'smart-links-container' : _ref3$testId,
    _ref3$theme = _ref3.theme,
    theme = _ref3$theme === void 0 ? SmartLinkTheme.Link : _ref3$theme;
  var context = useContext(FlexibleUiContext);
  var childrenOptions = getChildrenOptions(children, context);
  var canShowHoverPreview = showHoverPreview && status === 'resolved';
  // `retry` object contains action that can be performed on
  // unresolved link (unauthorized, forbidden, not found, etc.)
  var canShowAuthTooltip = showHoverPreview && status === 'unauthorized' && retry !== undefined;
  var container = jsx("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: getContainerStyles(size, hideBackground, hideElevation, hidePadding, clickableContainer, childrenOptions),
    "data-smart-link-container": true,
    "data-testid": testId
  }, clickableContainer ? getLayeredLink(testId, context, children, onClick) : null, renderChildren(children, size, theme, status, retry, onClick));
  if (context !== null && context !== void 0 && context.url && (canShowHoverPreview || canShowAuthTooltip)) {
    return jsx(HoverCardControl, {
      isHoverPreview: canShowHoverPreview,
      isAuthTooltip: canShowAuthTooltip,
      actionOptions: actionOptions,
      testId: testId,
      url: context.url,
      hoverPreviewOptions: hoverPreviewOptions
    }, container);
  }
  return container;
};
export default ContainerOld;