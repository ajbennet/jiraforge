"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutomationModalRuleOld = void 0;
var _react = _interopRequireDefault(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _menu = require("@atlaskit/menu");
var _primitives = require("@atlaskit/primitives");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _menuContext = require("../../menu-context");
var ruleButtonStyle = (0, _primitives.xcss)({
  borderColor: 'color.border',
  borderStyle: 'solid',
  borderWidth: 'border.width',
  borderRadius: 'border.radius'
});
var selectedRuleButtonStyle = (0, _primitives.xcss)({
  backgroundColor: 'color.background.accent.blue.subtlest',
  borderColor: 'color.border.accent.blue',
  borderStyle: 'solid',
  borderWidth: 'border.width.outline',
  borderRadius: 'border.radius'
});
var ruleNameStyle = (0, _primitives.xcss)({
  // Using this to increase the height of the button itself.
  height: '28px'
});
var AutomationModalRuleOld = exports.AutomationModalRuleOld = function AutomationModalRuleOld(_ref) {
  var rule = _ref.rule,
    selectedRule = _ref.selectedRule,
    setSelectedRule = _ref.setSelectedRule;
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useAutomationMenu = (0, _menuContext.useAutomationMenu)(),
    analyticsSource = _useAutomationMenu.analyticsSource,
    invokingRuleId = _useAutomationMenu.invokingRuleId;
  var isSelectedRule = (selectedRule === null || selectedRule === void 0 ? void 0 : selectedRule.id) === rule.id;
  var isExecuting = rule.id === invokingRuleId;
  var ruleOnClick = function ruleOnClick() {
    createAnalyticsEvent({
      type: 'sendUIEvent',
      data: {
        action: 'clicked',
        actionSubject: 'button',
        actionSubjectId: 'selectManualTriggerAutomation',
        source: analyticsSource,
        attributes: {
          ruleId: rule.id.toString()
        }
      }
    }).fire();
    setSelectedRule(rule);
  };
  return /*#__PURE__*/_react.default.createElement(_primitives.Box, {
    xcss: isSelectedRule ? selectedRuleButtonStyle : ruleButtonStyle
  }, /*#__PURE__*/_react.default.createElement(_menu.ButtonItem, {
    isDisabled: !!invokingRuleId,
    iconBefore: isExecuting ? /*#__PURE__*/_react.default.createElement(_spinner.default, {
      size: "small"
    }) : null,
    onClick: ruleOnClick
  }, /*#__PURE__*/_react.default.createElement(_primitives.Stack, {
    xcss: ruleNameStyle,
    alignBlock: "center"
  }, rule.name)));
};