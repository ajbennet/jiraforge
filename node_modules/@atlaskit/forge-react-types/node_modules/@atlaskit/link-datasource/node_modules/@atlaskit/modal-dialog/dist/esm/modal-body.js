/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { TouchScrollable } from 'react-scrolllock';
import { fg } from '@atlaskit/platform-feature-flags';
import { useModal } from './hooks';
import ScrollContainer from './internal/components/scroll-container';
import useScroll from './internal/hooks/use-scroll';
var bodyStyles = css({
  /* This ensures the body fills the whole space between header and footer. */
  flex: '1 1 auto'
});
var fontStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
});

/**
 * Adding the padding here avoids cropping the keyline on its sides.
 * The combined vertical spacing is maintained by subtracting the
 * keyline height from header and footer using negative margins.
 */
var bodyScrollStyles = css({
  paddingBlock: "var(--ds-border-width-outline, 2px)",
  paddingInline: "var(--ds-space-300, 24px)"
});

/**
 * Keylines will not be shown if scrolling in viewport so we do
 * not account for them in this case.
 */
var viewportScrollStyles = css({
  paddingInline: "var(--ds-space-300, 24px)"
});
/**
 * __Modal body__
 *
 * A modal body is used to display the main content of a modal.
 *
 * - [Examples](https://atlassian.design/components/modal-dialog/examples)
 * - [Code](https://atlassian.design/components/modal-dialog/code#modal-body-props)
 * - [Usage](https://atlassian.design/components/modal-dialog/usage)
 */
var ModalBody = function ModalBody(props) {
  var children = props.children,
    userDefinedTestId = props.testId;
  var _useModal = useModal(),
    modalTestId = _useModal.testId;
  var shouldScrollInViewport = useScroll();
  var testId = userDefinedTestId || modalTestId && "".concat(modalTestId, "--body");
  return shouldScrollInViewport ? jsx("div", {
    css: [bodyStyles, viewportScrollStyles, fg('platform_ads_explicit_font_styles') && fontStyles],
    "data-testid": testId
  }, children) : jsx(TouchScrollable, null, jsx(ScrollContainer, {
    testId: userDefinedTestId || modalTestId
  }, jsx("div", {
    css: [bodyStyles, bodyScrollStyles, fg('platform_ads_explicit_font_styles') && fontStyles],
    "data-testid": testId
  }, children)));
};
export default ModalBody;