"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@emotion/react");
var _intlUtils = require("@formatjs/intl-utils");
var _reactIntlNext = require("react-intl-next");
var _messages = require("../../../../../messages");
var _utils = require("../../utils");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var styles = (0, _react.css)({
  color: "var(--ds-text-subtlest, #626F86)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
(0, _utils.getTruncateStyles)(1));
var typeToDescriptorMap = {
  created: {
    relative: _messages.messages.created_on_relative,
    absolute: _messages.messages.created_on_absolute
  },
  modified: {
    relative: _messages.messages.modified_on_relative,
    absolute: _messages.messages.modified_on_absolute
  },
  sent: {
    relative: _messages.messages.sent_on_relative,
    absolute: _messages.messages.sent_on_absolute
  }
};

/**
 * A base element that displays an ISO Timestamp in text.
 * @internal
 * @param {DateTimeProps} DateTimeProps - The props necessary for the DateTime element.
 * @see CreatedOn
 * @see ModifiedOn
 * @see SentOn
 */
var DateTimeOld = function DateTimeOld(_ref) {
  var date = _ref.date,
    name = _ref.name,
    overrideCss = _ref.overrideCss,
    type = _ref.type,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-element-date-time' : _ref$testId,
    text = _ref.text;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatRelativeTime = _useIntl.formatRelativeTime,
    formatDate = _useIntl.formatDate;
  if (!type || !date) {
    return null;
  }
  var isLongerThenWeek = Math.abs(date.getTime() - Date.now()) > 1000 * 60 * 60 * 24 * 7;
  var context;
  var typeVariant;
  if (isLongerThenWeek) {
    typeVariant = 'absolute';
    context = formatDate(date, {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  } else {
    var _selectUnit = (0, _intlUtils.selectUnit)(date, Date.now()),
      value = _selectUnit.value,
      unit = _selectUnit.unit;
    typeVariant = 'relative';
    context = formatRelativeTime(value, unit, {
      numeric: 'auto'
    });
  }
  return (0, _react.jsx)("span", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: [styles, overrideCss],
    "data-separator": true,
    "data-smart-element": name,
    "data-smart-element-date-time": true,
    "data-testid": testId
  }, text ? "".concat(text, " ").concat(context) : (0, _react.jsx)(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, typeToDescriptorMap[type][typeVariant], {
    values: {
      context: context
    }
  })));
};
var _default = exports.default = DateTimeOld;