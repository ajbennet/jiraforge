import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useMemo } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { extractProvider } from '@atlaskit/link-extractors';
import { useAnalyticsEvents } from '../../../../../common/analytics/generated/use-analytics-events';
import { ActionName, CardDisplay } from '../../../../../constants';
import { messages } from '../../../../../messages';
import { useSmartCardActions } from '../../../../../state/actions';
import { hasAuthScopeOverrides } from '../../../../../state/helpers';
import UnauthorisedViewContent from '../../../../common/UnauthorisedViewContent';
import FlexibleCard from '../../../../FlexibleCard';
import { CustomBlock } from '../../../../FlexibleCard/components/blocks';
import ActionGroup from '../../../../FlexibleCard/components/blocks/action-group';
import { LinkIcon } from '../../../../FlexibleCard/components/elements';
import { connectButtonStyles, mainTextStyles, titleBlockStyles } from './styled';
const HoverCardUnauthorisedViewOld = ({
  id = '',
  flexibleCardProps,
  testId = 'hover-card-unauthorised-view',
  url
}) => {
  var _cardState$details, _extractProvider;
  const {
    cardState
  } = flexibleCardProps;
  const data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  const providerName = (_extractProvider = extractProvider(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text;
  const isProductIntegrationSupported = hasAuthScopeOverrides(cardState.details);
  const {
    authorize
  } = useSmartCardActions(id, url);
  const {
    fireEvent
  } = useAnalyticsEvents();
  const handleAuthorize = useCallback(() => {
    if (authorize) {
      fireEvent('track.applicationAccount.authStarted', {});
      authorize(CardDisplay.HoverCardPreview);
    }
  }, [authorize, fireEvent]);
  const actions = useMemo(() => [{
    name: ActionName.CustomAction,
    content: /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.connect_unauthorised_account_action, {
      values: {
        context: providerName
      }
    })),
    onClick: handleAuthorize
  }], [handleAuthorize, providerName]);
  return /*#__PURE__*/React.createElement(FlexibleCard, _extends({}, flexibleCardProps, {
    testId: testId
  }), /*#__PURE__*/React.createElement(CustomBlock, {
    overrideCss: titleBlockStyles,
    testId: `${testId}-title`
  }, /*#__PURE__*/React.createElement(LinkIcon, null), /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.connect_link_account_card_name, {
    values: {
      context: providerName
    }
  }))), /*#__PURE__*/React.createElement(CustomBlock, {
    overrideCss: mainTextStyles,
    testId: `${testId}-content`
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(UnauthorisedViewContent, {
    providerName: providerName,
    isProductIntegrationSupported: isProductIntegrationSupported
  }))), /*#__PURE__*/React.createElement(CustomBlock, {
    overrideCss: connectButtonStyles,
    testId: `${testId}-button`
  }, /*#__PURE__*/React.createElement(ActionGroup, {
    items: actions,
    appearance: "primary"
  })));
};
export default HoverCardUnauthorisedViewOld;