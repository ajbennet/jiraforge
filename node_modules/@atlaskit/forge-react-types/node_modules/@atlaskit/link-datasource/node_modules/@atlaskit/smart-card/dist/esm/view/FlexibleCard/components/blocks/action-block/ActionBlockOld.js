import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useMemo, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { di } from 'react-magnetic-di';
import { xcss } from '@atlaskit/primitives';
import { SmartLinkSize } from '../../../../../constants';
import { useFlexibleUiContext, useFlexibleUiOptionContext } from '../../../../../state/flexible-ui-context';
import * as Actions from '../../actions';
import { getPrimitivesPaddingSpaceBySize } from '../../utils';
import { ActionFooter } from './action-footer';
var ignoreContainerPaddingStyles = css({
  display: 'flex',
  flexDirection: 'column',
  boxSizing: 'border-box',
  flexGrow: 1,
  width: '100%',
  // We have to find a better way to ignore container padding
  // This has become more and more of a common use case.
  marginLeft: 'calc(var(--container-gap-left) * -1)',
  marginRight: 'calc(var(--container-gap-right) * -1)'
});
var DEFAULT_SORT_ORDER = ['PreviewAction', 'CopyLinkAction', 'AISummaryAction'];
var sort = function sort(a, b) {
  var idxA = DEFAULT_SORT_ORDER.indexOf(a);
  var idxB = DEFAULT_SORT_ORDER.indexOf(b);
  if (idxA === -1) {
    idxA = DEFAULT_SORT_ORDER.length;
  }
  if (idxB === -1) {
    idxB = DEFAULT_SORT_ORDER.length;
  }
  return idxA - idxB;
};
var ActionBlockOld = function ActionBlockOld(_ref) {
  var blockRef = _ref.blockRef,
    onClickCallback = _ref.onClick,
    size = _ref.size,
    spaceInline = _ref.spaceInline,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-action' : _ref$testId;
  var context = useFlexibleUiContext();
  var ui = useFlexibleUiOptionContext();
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    message = _useState2[0],
    setMessage = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var onLoadingChange = useCallback(function (isLoading) {
    setIsLoading(isLoading);
  }, [setIsLoading]);
  var padding = !(ui !== null && ui !== void 0 && ui.hidePadding) ? getPrimitivesPaddingSpaceBySize((ui === null || ui === void 0 ? void 0 : ui.size) || SmartLinkSize.Medium) : undefined;
  var _onClick = useCallback(function (name) {
    setMessage(undefined);
    onClickCallback === null || onClickCallback === void 0 || onClickCallback(name);
  }, [onClickCallback]);
  var onError = useCallback(function (error) {
    setMessage(error);
  }, []);
  var actions = useMemo(function () {
    if (!(context !== null && context !== void 0 && context.actions)) {
      return;
    }
    var arr = Object.keys(context.actions);
    arr.sort(sort);
    return arr.map(function (name) {
      var Action = name in Actions ? Actions[name] : undefined;
      return Action ? jsx(Action, {
        as: "stack-item",
        spaceInline: spaceInline,
        key: name,
        onClick: function onClick() {
          return _onClick(name);
        },
        onError: onError,
        onLoadingChange: onLoadingChange,
        size: size
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        ,
        xcss: xcss({
          paddingInline: padding
        }),
        hideTooltip: isLoading
      }) : null;
    });
  }, [context === null || context === void 0 ? void 0 : context.actions, _onClick, onError, padding, size, spaceInline, isLoading, onLoadingChange]);
  return actions ? jsx("div", {
    css: ignoreContainerPaddingStyles,
    ref: blockRef,
    "data-testid": testId
  }, actions, jsx(ActionFooter, {
    message: message,
    paddingInline: padding,
    testId: testId
  })) : null;
};
export default ActionBlockOld;