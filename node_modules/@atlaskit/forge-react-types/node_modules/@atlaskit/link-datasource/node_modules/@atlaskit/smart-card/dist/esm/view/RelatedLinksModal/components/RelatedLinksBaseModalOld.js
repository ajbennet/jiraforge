/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import { useCallback, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import Modal, { ModalBody, ModalFooter, ModalHeader, ModalTitle, ModalTransition } from '@atlaskit/modal-dialog';
import { Box, xcss } from '@atlaskit/primitives';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { messages } from '../../../messages';
var fixedWidth = 'small'; // pre-defined 400px by Atlaskit

var boxStyles = xcss({
  height: '396px' // Specified by the designer as this will display 5 incoming links and 2 outgoing links
});
var RelatedLinksBaseModal = function RelatedLinksBaseModal(_ref) {
  var onClose = _ref.onClose,
    showModal = _ref.showModal,
    children = _ref.children;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var modalOpenTimeRef = useRef(Date.now());
  var openCompleteHandler = useCallback(function (el) {
    el.focus();
    modalOpenTimeRef.current = Date.now();
    fireEvent('ui.modal.opened.relatedLinks', {});
  }, [fireEvent]);
  var closeHandler = useCallback(function () {
    fireEvent('ui.modal.closed.relatedLinks', {
      dwellTime: Date.now() - modalOpenTimeRef.current
    });
    onClose === null || onClose === void 0 || onClose();
  }, [fireEvent, onClose]);
  return jsx(ModalTransition, null, showModal && jsx(Modal, {
    testId: "related-links-modal",
    onClose: closeHandler,
    width: fixedWidth,
    autoFocus: false,
    shouldReturnFocus: false,
    onOpenComplete: openCompleteHandler
  }, jsx(ModalHeader, null, jsx(ModalTitle, null, jsx(FormattedMessage, messages.related_links_modal_title))), jsx(ModalBody, null, jsx(Box, {
    xcss: boxStyles
  }, children)), jsx(ModalFooter, null, jsx(Button, {
    appearance: "primary",
    onClick: closeHandler
  }, jsx(FormattedMessage, messages.close)))));
};
export default RelatedLinksBaseModal;