import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { forwardRef } from 'react';
import { css, jsx } from '@emotion/react';
import { B100, N0, N100, N20, N30, R400 } from '@atlaskit/theme/colors';
const isInvalidBorderStyles = css({
  borderColor: `var(--ds-border-danger, ${R400})`
});
const isFocusedBorderStyles = css({
  borderColor: `var(--ds-border-focused, ${B100})`,
  boxShadow: `inset 0 0 0 ${"var(--ds-border-width, 1px)"} ${`var(--ds-border-focused, ${B100})`}`
});
const isFocusedStyles = css({
  backgroundColor: `var(--ds-background-input-pressed, ${N0})`
});
const subtleBgStyles = css({
  backgroundColor: 'transparent',
  borderColor: 'transparent'
});
const subtleFocusedBgStyles = css({
  backgroundColor: "var(--ds-background-input-pressed, transparent)",
  borderColor: 'transparent'
});
const noBgStyles = css({
  backgroundColor: 'transparent',
  borderColor: 'transparent',
  '&:hover': {
    backgroundColor: 'transparent',
    borderColor: 'transparent'
  }
});
const hoverStyles = css({
  '&:hover': {
    backgroundColor: `var(--ds-background-input-hovered, ${N30})`,
    borderColor: `var(--ds-border-input, ${N100})`
  }
});
const isInvalidHoverStyles = css({
  '&:hover': {
    backgroundColor: `var(--ds-background-input-hovered, ${N0})`,
    borderColor: `var(--ds-border-danger, ${R400})`
  }
});
const isDisabledStyles = css({
  backgroundColor: "var(--ds-background-disabled, #091E4208)",
  borderColor: "var(--ds-border-disabled, #091E420F)",
  '&:hover': {
    cursor: 'default'
  }
});
const newBorderStyles = css({
  border: `${"var(--ds-border-width, 1px)"} solid ${`var(--ds-border-input, ${N100})`}`
});
const baseContainerStyles = css({
  display: 'flex',
  backgroundColor: `var(--ds-background-input, ${N20})`,
  border: `2px solid ${`var(--ds-border-input, ${N20})`}`,
  borderRadius: "var(--ds-border-radius, 3px)",
  transition: 'background-color 200ms ease-in-out, border-color 200ms ease-in-out',
  '&:hover': {
    cursor: 'pointer'
  }
});
/**
 * This is the container for the datetime picker component.
 */
export const DateTimePickerContainer = /*#__PURE__*/forwardRef(({
  children,
  isDisabled,
  isFocused,
  appearance,
  isInvalid,
  innerProps,
  testId
}, ref) => {
  const notFocusedOrIsDisabled = !(isFocused || isDisabled);

  // we cannot use Box or Flex primitives because these do not allow ...innerProps to be passed
  return jsx("div", _extends({
    css: [baseContainerStyles, newBorderStyles, isDisabled && isDisabledStyles, isFocused && isFocusedStyles, appearance === 'subtle' && (isFocused ? subtleFocusedBgStyles : subtleBgStyles), isFocused && isFocusedBorderStyles, isInvalid && isInvalidBorderStyles, notFocusedOrIsDisabled && (isInvalid ? isInvalidHoverStyles : hoverStyles), appearance === 'none' && noBgStyles]
  }, innerProps, {
    "data-testid": testId,
    ref: ref
  }), children);
});