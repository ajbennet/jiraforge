"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editorCardProvider = exports.EditorCardProvider = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _dataloader = _interopRequireDefault(require("dataloader"));
var _linkingCommon = require("@atlaskit/linking-common");
var _linkExtractors = require("@atlaskit/link-extractors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _transformer = require("./transformer");
var _client = _interopRequireDefault(require("../client"));
// WARNING!!!
// Editor Card Provider has been moved to the @atlaskit/editor-card-provider package.
// If you are going to make changes here, be aware that this folder and instance
// of Editor Card Provider will be removed.
// For more information see:
// https://hello.atlassian.net/browse/ENGHEALTH-661
// and
// https://product-fabric.atlassian.net/browse/EDM-5755

var BATCH_WAIT_TIME = 50;

// Check if it is matching a Jira Roadmaps or Jira Timeline url
// NOT to be confused with JSM timeline
var isJiraRoadmapOrTimeline = function isJiraRoadmapOrTimeline(url) {
  return url.match(/^https:\/\/.*?\/jira\/software\/(c\/)?projects\/[^\/]+?\/boards\/.*?\/(timeline|roadmap)\/?/);
};
var isPolarisView = function isPolarisView(url) {
  return url.match(/^https:\/\/.*?\/jira\/polaris\/projects\/[^\/]+?\/ideas\/view\/\d+$|^https:\/\/.*?\/secure\/JiraProductDiscoveryAnonymous\.jspa\?hash=\w+|^https:\/\/.*?\/jira\/polaris\/share\/\w+|^https:\/\/.*?\/jira\/discovery\/share\/views\/[\w-]+(\?selectedIssue=[\w-]+&issueViewLayout=sidebar&issueViewSection=[\w-]+)?$/);
};
var isJwmView = function isJwmView(url) {
  return url.match(/^https:\/\/.*?\/jira\/core\/projects\/[^\/]+?\/(timeline|calendar|list|board|summary|(form\/[^\/]+?))\/?/);
};
var isGiphyMedia = function isGiphyMedia(url) {
  return url.match(/^https:\/\/(.*?\.)?giphy\.com\/(gifs|media|clips)\//);
};
var isProformaView = function isProformaView(url) {
  return url.match(/^https:\/\/[^/]+\/jira\/(core|software(\/c)?|servicedesk)\/projects\/\w+\/forms\/form\/direct\/\d+\/\d+.*$/);
};

/** @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-661 Internal documentation for deprecation (no external access)} */
var EditorCardProvider = exports.EditorCardProvider = /*#__PURE__*/function () {
  function EditorCardProvider(envKey, baseUrlOverride) {
    var _this = this;
    (0, _classCallCheck2.default)(this, EditorCardProvider);
    this.baseUrl = baseUrlOverride || (0, _linkingCommon.getBaseUrl)(envKey);
    this.resolverUrl = (0, _linkingCommon.getResolverUrl)(envKey, baseUrlOverride);
    this.transformer = new _transformer.Transformer();
    this.requestHeaders = {
      Origin: this.baseUrl
    };
    this.providersLoader = new _dataloader.default(function (keys) {
      return _this.batchProviders(keys);
    }, {
      batchScheduleFn: function batchScheduleFn(callback) {
        return setTimeout(callback, BATCH_WAIT_TIME);
      }
    });
    this.cardClient = new _client.default(envKey, baseUrlOverride);
  }
  return (0, _createClass2.default)(EditorCardProvider, [{
    key: "batchProviders",
    value: function () {
      var _batchProviders = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(keys) {
        var providersData;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.fetchProvidersData();
            case 2:
              providersData = _context.sent;
              return _context.abrupt("return", keys.map(function () {
                return providersData;
              }));
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function batchProviders(_x) {
        return _batchProviders.apply(this, arguments);
      }
      return batchProviders;
    }()
  }, {
    key: "check",
    value: function () {
      var _check = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(resourceUrl) {
        var response;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.cardClient.fetchData(resourceUrl);
            case 3:
              response = _context2.sent;
              if (!((0, _linkingCommon.getStatus)(response) !== 'not_found')) {
                _context2.next = 6;
                break;
              }
              return _context2.abrupt("return", true);
            case 6:
              _context2.next = 11;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", false);
            case 11:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[0, 8]]);
      }));
      function check(_x2) {
        return _check.apply(this, arguments);
      }
      return check;
    }()
  }, {
    key: "fetchProvidersData",
    value: function () {
      var _fetchProvidersData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var endpoint, response;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              endpoint = "".concat(this.resolverUrl, "/providers");
              _context3.next = 3;
              return (0, _linkingCommon.request)('post', endpoint, undefined, this.requestHeaders);
            case 3:
              response = _context3.sent;
              return _context3.abrupt("return", {
                patterns: response.providers.reduce(function (allSources, provider) {
                  return allSources.concat(provider.patterns);
                }, []),
                userPreferences: response.userPreferences
              });
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function fetchProvidersData() {
        return _fetchProvidersData.apply(this, arguments);
      }
      return fetchProvidersData;
    }()
  }, {
    key: "loadProviderData",
    value: function () {
      var _loadProviderData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              _context4.next = 3;
              return this.providersLoader.load('providersData');
            case 3:
              this.providersData = _context4.sent;
              _context4.next = 11;
              break;
            case 6:
              _context4.prev = 6;
              _context4.t0 = _context4["catch"](0);
              // eslint-disable-next-line
              console.error('failed to fetch /providers', _context4.t0);
              this.providersLoader.clear('providerData');
              return _context4.abrupt("return", undefined);
            case 11:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[0, 6]]);
      }));
      function loadProviderData() {
        return _loadProviderData.apply(this, arguments);
      }
      return loadProviderData;
    }()
  }, {
    key: "findPattern",
    value: function () {
      var _findPattern = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(url) {
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.findPatternData(url);
            case 2:
              _context5.t0 = !!_context5.sent;
              if (_context5.t0) {
                _context5.next = 7;
                break;
              }
              _context5.next = 6;
              return this.check(url);
            case 6:
              _context5.t0 = !!_context5.sent;
            case 7:
              return _context5.abrupt("return", _context5.t0);
            case 8:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function findPattern(_x3) {
        return _findPattern.apply(this, arguments);
      }
      return findPattern;
    }()
  }, {
    key: "doesUrlMatchPath",
    value: function doesUrlMatchPath(path, url) {
      // Using [a-zA-Z0-9] here instead of \w since that includes underscores
      var startingRegex = new RegExp(/^[a-zA-Z0-9]/).test(path) ? '(^|[^a-zA-Z0-9])' : '';
      var endingRegex = new RegExp(/[a-zA-Z0-9]$/).test(path) ? '($|[^a-zA-Z0-9])' : '';
      var escapedPath = path.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      var regexPattern = new RegExp("".concat(startingRegex).concat(escapedPath).concat(endingRegex));
      return regexPattern.test(url);
    }
  }, {
    key: "findUserPreference",
    value: function () {
      var _findUserPreference = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(url) {
        var _this$providersData,
          _this2 = this;
        var userPreferences, defaultAppearance, appearances, allMatchedLabeledAppearances, longestMatchedLabeledAppearance;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (this.providersData) {
                _context6.next = 3;
                break;
              }
              _context6.next = 3;
              return this.loadProviderData();
            case 3:
              userPreferences = (_this$providersData = this.providersData) === null || _this$providersData === void 0 ? void 0 : _this$providersData.userPreferences;
              if (!userPreferences) {
                _context6.next = 12;
                break;
              }
              defaultAppearance = userPreferences.defaultAppearance, appearances = userPreferences.appearances;
              allMatchedLabeledAppearances = appearances.filter(function (_ref) {
                var urlSegment = _ref.urlSegment;
                return _this2.doesUrlMatchPath(urlSegment, url);
              });
              if (!(allMatchedLabeledAppearances.length > 0)) {
                _context6.next = 10;
                break;
              }
              longestMatchedLabeledAppearance = allMatchedLabeledAppearances.reduce(function (previousLabeledAppearance, currentLabeledAppearance) {
                return previousLabeledAppearance.urlSegment.length > currentLabeledAppearance.urlSegment.length ? previousLabeledAppearance : currentLabeledAppearance;
              });
              return _context6.abrupt("return", longestMatchedLabeledAppearance.appearance);
            case 10:
              if (!(defaultAppearance !== 'inline')) {
                _context6.next = 12;
                break;
              }
              return _context6.abrupt("return", defaultAppearance);
            case 12:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function findUserPreference(_x4) {
        return _findUserPreference.apply(this, arguments);
      }
      return findUserPreference;
    }()
  }, {
    key: "findPatternData",
    value: function () {
      var _findPatternData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(url) {
        var _this$providersData2;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (this.providersData) {
                _context7.next = 3;
                break;
              }
              _context7.next = 3;
              return this.loadProviderData();
            case 3:
              return _context7.abrupt("return", (_this$providersData2 = this.providersData) === null || _this$providersData2 === void 0 ? void 0 : _this$providersData2.patterns.find(function (pattern) {
                return url.match(pattern.source);
              }));
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function findPatternData(_x5) {
        return _findPatternData.apply(this, arguments);
      }
      return findPatternData;
    }()
  }, {
    key: "getHardCodedAppearance",
    value: function getHardCodedAppearance(url) {
      if (isJiraRoadmapOrTimeline(url) || isPolarisView(url) || isJwmView(url) || isGiphyMedia(url) || isProformaView(url)) {
        return 'embed';
      }
    }

    /**
     * Make a /resolve call and find out if result has embed capability
     * @param url
     * @private
     */
  }, {
    key: "canBeResolvedAsEmbed",
    value: (function () {
      var _canBeResolvedAsEmbed = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(url) {
        var details, embed, data, preview;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              _context8.next = 3;
              return this.cardClient.fetchData(url);
            case 3:
              details = _context8.sent;
              if (!(0, _platformFeatureFlags.fg)('smart_links_noun_support')) {
                _context8.next = 9;
                break;
              }
              if (details) {
                _context8.next = 7;
                break;
              }
              return _context8.abrupt("return", false);
            case 7:
              embed = (0, _linkExtractors.extractSmartLinkEmbed)(details);
              return _context8.abrupt("return", !!embed);
            case 9:
              data = details && details.data;
              if (data) {
                _context8.next = 12;
                break;
              }
              return _context8.abrupt("return", false);
            case 12:
              if (!((0, _linkingCommon.getStatus)(details) !== 'resolved')) {
                _context8.next = 14;
                break;
              }
              return _context8.abrupt("return", false);
            case 14:
              preview = (0, _linkExtractors.extractPreview)(data, 'web');
              return _context8.abrupt("return", !!preview);
            case 18:
              _context8.prev = 18;
              _context8.t0 = _context8["catch"](0);
              return _context8.abrupt("return", false);
            case 21:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this, [[0, 18]]);
      }));
      function canBeResolvedAsEmbed(_x6) {
        return _canBeResolvedAsEmbed.apply(this, arguments);
      }
      return canBeResolvedAsEmbed;
    }())
  }, {
    key: "resolve",
    value: function () {
      var _resolve = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9(url, appearance, shouldForceAppearance) {
        var hardCodedAppearance, _yield$Promise$all, _yield$Promise$all2, matchedProviderPattern, userPreference, isSupported, providerDefaultAppearance, preferredAppearance, canItBeEmbed;
        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              if (!(shouldForceAppearance === true)) {
                _context9.next = 3;
                break;
              }
              return _context9.abrupt("return", this.transformer.toAdf(url, appearance));
            case 3:
              hardCodedAppearance = this.getHardCodedAppearance(url);
              _context9.next = 6;
              return Promise.all([this.findPatternData(url), this.findUserPreference(url)]);
            case 6:
              _yield$Promise$all = _context9.sent;
              _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
              matchedProviderPattern = _yield$Promise$all2[0];
              userPreference = _yield$Promise$all2[1];
              if (!(shouldForceAppearance === false && userPreference === 'url')) {
                _context9.next = 12;
                break;
              }
              return _context9.abrupt("return", Promise.reject(undefined));
            case 12:
              _context9.t0 = !!matchedProviderPattern;
              if (_context9.t0) {
                _context9.next = 17;
                break;
              }
              _context9.next = 16;
              return this.check(url);
            case 16:
              _context9.t0 = _context9.sent;
            case 17:
              isSupported = _context9.t0;
              if (!isSupported) {
                _context9.next = 27;
                break;
              }
              providerDefaultAppearance = matchedProviderPattern === null || matchedProviderPattern === void 0 ? void 0 : matchedProviderPattern.defaultView;
              preferredAppearance = shouldForceAppearance === undefined ?
              // Ignore both User and provider's appearances if older editor that doesn't send shouldForceAppearance
              hardCodedAppearance || appearance :
              // User preferred appearance. It would be either one that has matching domain/path pattern OR
              // if user's default choice is NOT "inline" (so, block or embed at this point, url was dealt with above)
              userPreference ||
              // If user's default choice is "inline" or user hasn't specified preferences at all,
              // we check whatever one of the hardcoded providers match url (jira roadmap/timeline, polaris, etc)
              hardCodedAppearance ||
              // If non match, we see if this provider has default appearance for this particular regexp
              providerDefaultAppearance ||
              // If not, we pick what editor (or any other client) requested
              appearance;
              if (!(preferredAppearance === userPreference && userPreference === 'embed')) {
                _context9.next = 26;
                break;
              }
              _context9.next = 24;
              return this.canBeResolvedAsEmbed(url);
            case 24:
              canItBeEmbed = _context9.sent;
              if (!canItBeEmbed) {
                preferredAppearance = 'inline';
              }
            case 26:
              return _context9.abrupt("return", this.transformer.toAdf(url, preferredAppearance));
            case 27:
              _context9.next = 32;
              break;
            case 29:
              _context9.prev = 29;
              _context9.t1 = _context9["catch"](0);
              // eslint-disable-next-line
              console.warn("Error when trying to check Smart Card url \"".concat(url, "\"").concat(_context9.t1 instanceof Error ? " - ".concat(_context9.t1.name, " ").concat(_context9.t1.message) : ''), _context9.t1);
            case 32:
              return _context9.abrupt("return", Promise.reject(undefined));
            case 33:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this, [[0, 29]]);
      }));
      function resolve(_x7, _x8, _x9) {
        return _resolve.apply(this, arguments);
      }
      return resolve;
    }()
  }]);
}();
/** @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-661 Internal documentation for deprecation (no external access)} */
var editorCardProvider = exports.editorCardProvider = new EditorCardProvider();