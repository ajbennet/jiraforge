import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { R300 } from '@atlaskit/theme/colors';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { AKIconWrapper as AKIconWrapperOld } from '../Icon-emotion';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import { IconStyledButton as IconStyledButtonOld } from '../styled-emotion';
import withFrameStyleControl from '../utils/withFrameStyleControl';
var iconWrapperStyles = xcss({
  marginRight: 'space.negative.025'
});
export var InlineCardErroredViewOld = /*#__PURE__*/function (_React$Component) {
  function InlineCardErroredViewOld() {
    var _this;
    _classCallCheck(this, InlineCardErroredViewOld);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, InlineCardErroredViewOld, [].concat(args));
    _defineProperty(_this, "frameRef", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "handleRetry", function (event) {
      var onRetry = _this.props.onRetry;
      if (onRetry) {
        event.preventDefault();
        event.stopPropagation();
        onRetry();
      }
    });
    _defineProperty(_this, "renderActionButton", function () {
      var onRetry = _this.props.onRetry;
      var Button = withFrameStyleControl(ButtonOld, _this.frameRef);
      return onRetry && /*#__PURE__*/React.createElement(Button, {
        spacing: "none",
        component: fg('bandicoots-compiled-migration-smartcard') ? IconStyledButtonOldVisualRefresh : IconStyledButtonOld,
        onClick: _this.handleRetry,
        role: "button"
      }, /*#__PURE__*/React.createElement(FormattedMessage, messages.try_again));
    });
    return _this;
  }
  _inherits(InlineCardErroredViewOld, _React$Component);
  return _createClass(InlineCardErroredViewOld, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        url = _this$props.url,
        onClick = _this$props.onClick,
        isSelected = _this$props.isSelected,
        _this$props$testId = _this$props.testId,
        testId = _this$props$testId === void 0 ? 'inline-card-errored-view' : _this$props$testId,
        icon = _this$props.icon,
        message = _this$props.message,
        truncateInline = _this$props.truncateInline;
      var Wrapper = fg('bandicoots-compiled-migration-smartcard') ? AKIconWrapper : AKIconWrapperOld;
      var content = /*#__PURE__*/React.createElement(Frame, {
        testId: testId,
        isSelected: isSelected,
        ref: this.frameRef,
        truncateInline: truncateInline
      }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
        icon: icon || (fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
          as: "span",
          xcss: iconWrapperStyles
        }, /*#__PURE__*/React.createElement(ErrorIcon, {
          color: "var(--ds-icon-danger, #C9372C)",
          label: "error",
          LEGACY_size: "small",
          testId: "errored-view-default-icon"
        })) : /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(ErrorIcon, {
          label: "error",
          LEGACY_size: "small",
          color: "var(--ds-icon-danger, ".concat(R300, ")"),
          testId: "errored-view-default-icon"
        }))),
        link: url,
        title: url,
        onClick: onClick,
        rightSide: message
      }), this.renderActionButton());
      if (this.props.showHoverPreview) {
        return /*#__PURE__*/React.createElement(HoverCard, {
          url: url
        }, content);
      }
      return content;
    }
  }]);
}(React.Component);