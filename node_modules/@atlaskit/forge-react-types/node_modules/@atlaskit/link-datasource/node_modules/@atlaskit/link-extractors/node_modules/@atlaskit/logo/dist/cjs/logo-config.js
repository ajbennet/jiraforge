"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tempSizeWrapper = exports.createFeatureFlaggedComponent = exports.SHARED_LOGOS = exports.NEW_ONLY_LOGOS = exports.LEGACY_ONLY_LOGOS = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _excluded = ["size"],
  _excluded2 = ["size"];
/**
 * Creates a feature flagged component that renders the legacy logo or the new logo
 * based on the platform-logo-rebrand feature flag.
 *
 * @param LegacyComponent - The legacy logo component.
 * @param NewComponent - The new logo component.
 * @returns A feature flagged component that renders the legacy logo or the new logo.
 */
var createFeatureFlaggedComponent = exports.createFeatureFlaggedComponent = function createFeatureFlaggedComponent(LegacyComponent, NewComponent) {
  // Note: textColor and iconColor aren't supported on all new logos
  // These props will be deprecated in the future
  return function (_ref) {
    var size = _ref.size,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    if ((0, _platformFeatureFlags.fg)('platform-logo-rebrand')) {
      // Size defaults need to be set, as the temp library had different defaults
      return /*#__PURE__*/_react.default.createElement(NewComponent, (0, _extends2.default)({
        size: size || 'medium'
      }, props));
    }
    return /*#__PURE__*/_react.default.createElement(LegacyComponent, (0, _extends2.default)({
      size: size
    }, props));
  };
};

/**
 * Creates a wrapper around the new logo or icon component to ensure it receives the correct default (medium) size prop.
 *
 * @param NewComponent - The new logo or icon component.
 */
var tempSizeWrapper = exports.tempSizeWrapper = function tempSizeWrapper(NewComponent) {
  return function (_ref2) {
    var size = _ref2.size,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    return /*#__PURE__*/_react.default.createElement(NewComponent, (0, _extends2.default)({
      size: size || 'medium'
    }, props));
  };
};

// Logos that only exist in @atlaskit/logo
var LEGACY_ONLY_LOGOS = exports.LEGACY_ONLY_LOGOS = ['atlassian', 'atlassian-analytics', 'atlas', 'atlassian-marketplace', 'atlassian-access', 'atlassian-administration', 'atlassian-admin', 'jira-align', 'jira-software', 'jira-work-management', 'loom-attribution'];

// Logos that exist in both packages
var SHARED_LOGOS = exports.SHARED_LOGOS = ['bitbucket', 'compass', 'confluence', 'jira', 'jira-product-discovery', 'jira-service-management', 'loom', 'opsgenie', 'statuspage', 'trello', 'rovo', 'guard', 'focus'];

// Logos that only exist in @atlaskit/temp-nav-app-icons
var NEW_ONLY_LOGOS = exports.NEW_ONLY_LOGOS = ['admin', 'align', 'analytics', 'assets', 'chat', 'company-hub', 'goals', 'guard-detect', 'home', 'projects', 'search', 'studio', 'talent', 'teams'];