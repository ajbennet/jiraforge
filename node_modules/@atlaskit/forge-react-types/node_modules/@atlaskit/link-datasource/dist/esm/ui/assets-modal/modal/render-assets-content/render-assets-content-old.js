/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N40 } from '@atlaskit/theme/colors';
import { AccessRequired } from '../../../common/error-state/access-required';
import { ModalLoadingError } from '../../../common/error-state/modal-loading-error';
import { NoResults } from '../../../common/error-state/no-results';
import { EmptyStateOld, IssueLikeDataTableViewOld, scrollableContainerShadowsCssComponents } from '../../../issue-like-table/issue-like-table-old';
import { InitialStateView } from './initial-state-view';
export var MODAL_HEIGHT = 420;

// This is to prevent y scrollbar when showing table loading state
var disableOverflowStyles = css({
  overflow: 'hidden'
});
var contentContainerStyles = css({
  height: MODAL_HEIGHT,
  display: 'grid',
  overflow: 'auto'
});
var tableBordersStyles = css({
  border: "1px solid ".concat("var(--ds-border, ".concat(N40, ")")),
  borderTopLeftRadius: "var(--ds-border-radius-200, 8px)",
  borderTopRightRadius: "var(--ds-border-radius-200, 8px)",
  borderBottom: "2px solid ".concat("var(--ds-background-accent-gray-subtler, ".concat(N40, ")")),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundImage: scrollableContainerShadowsCssComponents.backgroundImage,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundRepeat: scrollableContainerShadowsCssComponents.backgroundRepeat,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundSize: scrollableContainerShadowsCssComponents.backgroundSize,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundAttachment: scrollableContainerShadowsCssComponents.backgroundAttachment
});
var RejectedView = function RejectedView() {
  return jsx("div", {
    css: [contentContainerStyles]
  }, jsx(ModalLoadingError, null));
};
var UnauthorizedView = function UnauthorizedView() {
  return jsx("div", {
    css: [contentContainerStyles]
  }, jsx(AccessRequired, null));
};
var EmptyView = function EmptyView() {
  return jsx("div", {
    css: [contentContainerStyles]
  }, jsx(InitialStateView, null));
};
var NoResultsView = function NoResultsView() {
  return jsx("div", {
    css: [contentContainerStyles]
  }, jsx(NoResults, null));
};
var LoadingView = function LoadingView() {
  return jsx("div", {
    css: [contentContainerStyles, contentContainerStyles, tableBordersStyles, disableOverflowStyles]
  }, jsx(EmptyStateOld, {
    testId: "assets-aql-datasource-modal--loading-state"
  }));
};
export var RenderAssetsContentOld = function RenderAssetsContentOld(props) {
  var status = props.status,
    responseItems = props.responseItems,
    responseItemIds = props.responseItemIds,
    visibleColumnKeys = props.visibleColumnKeys,
    onNextPage = props.onNextPage,
    hasNextPage = props.hasNextPage,
    loadDatasourceDetails = props.loadDatasourceDetails,
    columns = props.columns,
    defaultVisibleColumnKeys = props.defaultVisibleColumnKeys,
    onVisibleColumnKeysChange = props.onVisibleColumnKeysChange,
    isFetchingInitialData = props.isFetchingInitialData;
  var resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  var issueLikeDataTableView = useMemo(function () {
    return jsx("div", {
      css: [contentContainerStyles, tableBordersStyles]
    }, jsx(IssueLikeDataTableViewOld, {
      testId: "asset-datasource-table",
      status: status,
      columns: columns,
      items: responseItems,
      itemIds: responseItemIds,
      hasNextPage: hasNextPage,
      visibleColumnKeys: visibleColumnKeys || defaultVisibleColumnKeys,
      onNextPage: onNextPage,
      onLoadDatasourceDetails: loadDatasourceDetails,
      onVisibleColumnKeysChange: onVisibleColumnKeysChange
    }));
  }, [columns, defaultVisibleColumnKeys, hasNextPage, loadDatasourceDetails, onNextPage, onVisibleColumnKeysChange, responseItems, responseItemIds, status, visibleColumnKeys]);
  var renderAssetsContentView = useCallback(function () {
    if (isFetchingInitialData) {
      // Placing this check first as it's a priority before all others
      return jsx(LoadingView, null);
    } else if (status === 'rejected') {
      return jsx(RejectedView, null);
    } else if (status === 'unauthorized') {
      return jsx(UnauthorizedView, null);
    } else if (status === 'empty') {
      return jsx(EmptyView, null);
    } else if (resolvedWithNoResults) {
      return jsx(NoResultsView, null);
    } else if (status === 'loading' && !columns.length) {
      return jsx(LoadingView, null);
    }
    return issueLikeDataTableView;
  }, [columns.length, isFetchingInitialData, issueLikeDataTableView, resolvedWithNoResults, status]);
  return renderAssetsContentView();
};