/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["width"],
  _excluded2 = ["width"];
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { useMemo } from 'react';
import { useIntl } from 'react-intl-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import Select from '@atlaskit/select';
import { siteSelectorMessages } from './messages';
import { SiteSelectorOld } from './site-selector-old';
var styles = {
  dropdownContainerStyles: "_zulpu2gc _1e0c1txw _4cvr1h6o _1tke1ylp"
};
var selectStyles = null;
var SiteSelectorNew = function SiteSelectorNew(props) {
  var availableSites = props.availableSites,
    onSiteSelection = props.onSiteSelection,
    selectedSite = props.selectedSite,
    label = props.label,
    testId = props.testId;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var onChange = function onChange(newValue) {
    var selectedSite = availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(function (site) {
      return site.cloudId === (newValue === null || newValue === void 0 ? void 0 : newValue.value);
    });
    if (selectedSite) {
      onSiteSelection(selectedSite);
    }
  };
  var availableSitesOptions = useMemo(function () {
    return availableSites === null || availableSites === void 0 ? void 0 : availableSites.map(function (site) {
      return {
        label: site.displayName,
        value: site.cloudId
      };
    });
  }, [availableSites]);
  var selectedSiteOption = selectedSite && {
    label: selectedSite.displayName,
    value: selectedSite.cloudId
  };
  return /*#__PURE__*/React.createElement(Box, {
    xcss: styles.dropdownContainerStyles
  }, formatMessage(label), availableSites && availableSites.length > 1 && /*#__PURE__*/React.createElement("span", {
    "data-testid": "".concat(testId, "--trigger")
  }, /*#__PURE__*/React.createElement(Select, {
    classNamePrefix: testId,
    isLoading: !availableSites,
    onChange: onChange,
    options: availableSitesOptions,
    placeholder: formatMessage(siteSelectorMessages.chooseSite),
    styles: {
      // prevents the popup menu with available sites from being too narrow
      // if the selected site is much shorter than the other options
      menu: function menu(_ref) {
        var width = _ref.width,
          css = _objectWithoutProperties(_ref, _excluded);
        return _objectSpread(_objectSpread({}, css), {}, {
          minWidth: '100%',
          width: 'max-content',
          // font-weight has to be overridden here so that it gets applied after the font styles in teh css element above
          fontWeight: "var(--ds-font-weight-medium, 500)"
        });
      },
      valueContainer: function valueContainer(_ref2) {
        var width = _ref2.width,
          css = _objectWithoutProperties(_ref2, _excluded2);
        return _objectSpread(_objectSpread({}, css), {}, {
          // font-weight has to be overridden here so that it gets applied after the font styles in teh css element above
          fontWeight: "var(--ds-font-weight-medium, 500)"
        });
      }
    },
    testId: testId,
    value: selectedSiteOption,
    label: formatMessage(siteSelectorMessages.chooseSite),
    className: ax(["_11c82smr _1pbyibnn"])
  })));
};
export var SiteSelector = function SiteSelector(props) {
  if (fg('bandicoots-compiled-migration-link-datasource')) {
    return /*#__PURE__*/React.createElement(SiteSelectorNew, props);
  } else {
    return /*#__PURE__*/React.createElement(SiteSelectorOld, props);
  }
};