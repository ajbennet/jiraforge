import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { forwardRef, useCallback } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import Badge from '@atlaskit/badge';
import Button from '@atlaskit/button/standard-button';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { Box, Flex, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
var triggerButtonLabelStyles = xcss({
  textOverflow: 'ellipsis',
  overflow: 'hidden'
});
var badgeStyles = xcss({
  marginLeft: 'space.050'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var LoadingStateAnimationWrapper = styled.div({
  position: 'relative',
  animation: 'flickerAnimation 2s infinite',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '@keyframes flickerAnimation': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '0%': {
      opacity: 1
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '50%': {
      opacity: 0.5
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '100%': {
      opacity: 1
    }
  }
});
var PopupTrigger = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var isSelected = _ref.isSelected,
    isDisabled = _ref.isDisabled,
    isLoading = _ref.isLoading,
    selectedOptions = _ref.selectedOptions,
    testId = _ref.testId,
    label = _ref.label;
  var _ref2 = selectedOptions || [],
    _ref3 = _slicedToArray(_ref2, 1),
    firstOption = _ref3[0];
  var hasOptions = selectedOptions && selectedOptions.length > 0;
  var showButtonLoading = !isDisabled && isLoading;
  var triggerButtonTestId = "".concat(testId, "-trigger");
  var LoadingButton = useCallback(function () {
    return /*#__PURE__*/React.createElement(LoadingStateAnimationWrapper, null, /*#__PURE__*/React.createElement(Button, {
      iconAfter: /*#__PURE__*/React.createElement(Spinner, {
        size: 'xsmall'
      }),
      testId: "".concat(triggerButtonTestId, "--loading-button")
    }, label));
  }, [label, triggerButtonTestId]);
  var DefaultButton = useCallback(function () {
    return /*#__PURE__*/React.createElement(Button, {
      appearance: "default",
      isSelected: isSelected || hasOptions,
      isDisabled: isDisabled,
      iconAfter: /*#__PURE__*/React.createElement(ChevronDownIcon, {
        label: "",
        color: "currentColor"
      }),
      testId: "".concat(triggerButtonTestId, "--button")
    }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
      xcss: triggerButtonLabelStyles
    }, label, firstOption && /*#__PURE__*/React.createElement(React.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/React.createElement(Flex, {
      xcss: badgeStyles,
      alignItems: "center"
    }, /*#__PURE__*/React.createElement(Badge, {
      appearance: "primary"
    }, "+", selectedOptions.length - 1))));
  }, [firstOption, hasOptions, isDisabled, isSelected, label, selectedOptions, triggerButtonTestId]);

  /**
   * We had an issue with the popup component referencing a stale DOM ref for the trigger button.
   * Hence introducing a Box to make sure ref is always the same and only content is refreshed on re-renders
   */
  return /*#__PURE__*/React.createElement(Box, {
    ref: ref,
    testId: triggerButtonTestId
  }, showButtonLoading ? /*#__PURE__*/React.createElement(LoadingButton, null) : /*#__PURE__*/React.createElement(DefaultButton, null));
});
export default PopupTrigger;