import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children"];
import React from 'react';
import { Box, Flex, xcss } from '@atlaskit/primitives';
import { components } from '@atlaskit/select';
import Spinner from '@atlaskit/spinner';
import CustomErrorMessage from './errorMessage';
import CustomDropdownLoadingMessage from './loadingMessage';
import CustomNoOptionsMessage from './noOptionsMessage';
import ShowMoreButton from './showMoreButton';
var inlineSpinnerStyles = xcss({
  paddingTop: 'space.075'
});
var showMoreButtonBoxStyles = xcss({
  paddingLeft: 'space.075',
  paddingTop: 'space.100'
});
var CustomMenuList = function CustomMenuList(_ref) {
  var children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded);
  var _props$selectProps$me =
    // @ts-ignore - https://product-fabric.atlassian.net/browse/DSP-21000
    props.selectProps.menuListProps,
    filterName = _props$selectProps$me.filterName,
    isLoading = _props$selectProps$me.isLoading,
    isLoadingMore = _props$selectProps$me.isLoadingMore,
    isError = _props$selectProps$me.isError,
    isEmpty = _props$selectProps$me.isEmpty,
    errors = _props$selectProps$me.errors,
    showMore = _props$selectProps$me.showMore,
    handleShowMore = _props$selectProps$me.handleShowMore;
  var shouldDisplayShowMore = showMore && !isLoadingMore;
  var isLoadingMoreData = !shouldDisplayShowMore && isLoadingMore;
  var InlineSpinner = function InlineSpinner() {
    return /*#__PURE__*/React.createElement(Flex, {
      justifyContent: "center",
      xcss: inlineSpinnerStyles
    }, /*#__PURE__*/React.createElement(Spinner, {
      size: "medium"
    }));
  };
  var renderChildren = function renderChildren() {
    if (isLoading) {
      return /*#__PURE__*/React.createElement(CustomDropdownLoadingMessage, {
        filterName: filterName
      });
    }
    if (isError) {
      return /*#__PURE__*/React.createElement(CustomErrorMessage, {
        filterName: filterName,
        errors: errors
      });
    }
    if (isEmpty) {
      return /*#__PURE__*/React.createElement(CustomNoOptionsMessage, {
        filterName: filterName
      });
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, children, shouldDisplayShowMore && handleShowMore && /*#__PURE__*/React.createElement(Box, {
      xcss: showMoreButtonBoxStyles
    }, /*#__PURE__*/React.createElement(ShowMoreButton, {
      onShowMore: handleShowMore,
      filterName: filterName
    })), isLoadingMoreData && /*#__PURE__*/React.createElement(InlineSpinner, null));
  };
  return /*#__PURE__*/React.createElement(components.MenuList, props, renderChildren());
};
export default CustomMenuList;