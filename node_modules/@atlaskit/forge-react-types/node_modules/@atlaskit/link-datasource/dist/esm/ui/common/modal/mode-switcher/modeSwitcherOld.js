import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @atlaskit/design-system/use-tokens-typography */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N0, N20, N30A, N60, N700 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { DatasourceAction } from '../../../../analytics/types';
import { useUserInteractions } from '../../../../contexts/user-interactions';
import { DisplayViewDropDown } from '../display-view-dropdown/display-view-drop-down';
import { useViewModeContext } from './useViewModeContext';
var modeSwitcherStyles = css({
  alignItems: 'center',
  background: "var(--ds-background-neutral, ".concat(N20, ")"),
  borderRadius: "var(--ds-space-050, 4px)",
  boxSizing: 'border-box',
  display: 'inline-flex',
  gap: "var(--ds-space-050, 4px)",
  padding: "var(--ds-space-050, 4px)",
  '&:disabled': {
    opacity: '0.5'
  },
  marginLeft: "var(--ds-space-250, 20px)"
});
var compactModeSwitcherStyles = css({
  padding: "var(--ds-space-050, 4px)",
  gap: "var(--ds-space-025, 2px)"
});
var modeInputStyles = css({
  display: 'none'
});
var modeSwitcherLabelStyles = css({
  color: "var(--ds-text-subtlest, ".concat(N700, ")"),
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  textTransform: 'uppercase',
  padding: "var(--ds-space-050, 4px)",
  borderRadius: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    cursor: 'pointer',
    backgroundColor: "var(--ds-background-neutral-subtle-hovered, ".concat(N30A, ")")
  }
});
var modeSwitcherLabelSelectedStyles = css({
  backgroundColor: "var(--ds-background-input-pressed, ".concat(N0, ")"),
  borderRadius: "var(--ds-space-050, 4px)",
  boxShadow: "var(--ds-shadow-overflow, 0px 0px 1px rgba(9, 30, 66, 0.12), 0px 0px 8px rgba(9, 30, 66, 0.16))",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    cursor: 'pointer',
    backgroundColor: "var(--ds-background-input-pressed, ".concat(N0, ")")
  }
});
var modeSwitcherLabelDisabledStyles = css({
  color: "var(--ds-text-disabled, ".concat(N60, ")")
});
var modeSwitcherDisabledStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    cursor: 'not-allowed',
    background: 'transparent'
  }
});
var compactModeSwitcherLabelStyles = css({
  padding: "var(--ds-space-025, 2px)".concat(" ", "var(--ds-space-050, 4px)")
});
export var ModeSwitcherOld = function ModeSwitcherOld(props) {
  var _options$;
  var isCompact = props.isCompact,
    isDisabled = props.isDisabled,
    onOptionValueChange = props.onOptionValueChange,
    options = props.options,
    _props$selectedOption = props.selectedOptionValue,
    selectedOptionValue = _props$selectedOption === void 0 ? (_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.value : _props$selectedOption;
  var handleModeChange = function handleModeChange(event) {
    onOptionValueChange(event.currentTarget.value);
  };
  return options.length > 0 ? jsx("fieldset", {
    css: [modeSwitcherStyles, isCompact && compactModeSwitcherStyles],
    "data-testid": "mode-toggle-container",
    disabled: isDisabled
  }, options.map(function (_ref) {
    var value = _ref.value,
      label = _ref.label,
      isOptionDisabled = _ref.disabled,
      tooltipText = _ref.tooltipText;
    var isSelected = value === selectedOptionValue;
    return jsx(Tooltip, {
      key: value,
      content: tooltipText
    }, function (tooltipProps) {
      return jsx("label", _extends({}, tooltipProps, {
        key: value,
        css: [modeSwitcherLabelStyles, isCompact && compactModeSwitcherLabelStyles, isSelected && modeSwitcherLabelSelectedStyles, isDisabled && modeSwitcherDisabledStyles, isOptionDisabled && [modeSwitcherLabelDisabledStyles, modeSwitcherDisabledStyles]],
        "data-testid": "mode-toggle-".concat(value)
      }), label, jsx("input", {
        "aria-checked": isSelected,
        "aria-disabled": isOptionDisabled,
        checked: isSelected,
        css: modeInputStyles,
        disabled: isOptionDisabled,
        onChange: handleModeChange,
        type: "radio",
        value: value
      }));
    });
  })) : null;
};
export var DatasourceViewModeDropDown = function DatasourceViewModeDropDown() {
  var userInteractions = useUserInteractions();
  var _useViewModeContext = useViewModeContext(),
    currentViewMode = _useViewModeContext.currentViewMode,
    setCurrentViewMode = _useViewModeContext.setCurrentViewMode,
    disableDisplayDropdown = _useViewModeContext.disableDisplayDropdown;
  if (disableDisplayDropdown) {
    return null;
  }
  var handleViewModeChange = function handleViewModeChange(selectedMode) {
    userInteractions.add(DatasourceAction.DISPLAY_VIEW_CHANGED);
    setCurrentViewMode(selectedMode);
  };
  return jsx(DisplayViewDropDown, {
    onViewModeChange: handleViewModeChange,
    viewMode: currentViewMode
  });
};