/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import EmptyState from '@atlaskit/empty-state';
import { Box, xcss } from '@atlaskit/primitives';
import { N400 } from '@atlaskit/theme/colors';
import { fontFallback } from '@atlaskit/theme/typography';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { AccessRequiredSVGOld } from './access-required-svg';
import { loadingErrorMessages } from './messages';
var urlStyles = css({
  color: "var(--ds-text-subtlest, ".concat(N400, ")"),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  font: "var(--ds-font-body, ".concat(fontFallback.body.medium, ")")
});
var descriptionMessageStyles = css({
  display: 'flex',
  flexDirection: 'column',
  gap: "var(--ds-space-200, 16px)"
});
var iconContainerStyles = xcss({
  marginBottom: 'space.200'
});
var Description = function Description(_ref) {
  var message = _ref.message,
    url = _ref.url;
  return jsx("div", {
    css: descriptionMessageStyles
  }, jsx("span", {
    css: urlStyles
  }, url), jsx("span", null, message));
};
var IconContainer = function IconContainer() {
  return jsx(Box, {
    xcss: iconContainerStyles
  }, jsx(AccessRequiredSVGOld, null));
};
export var AccessRequiredOld = function AccessRequiredOld(_ref2) {
  var url = _ref2.url;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  useEffect(function () {
    fireEvent('ui.error.shown', {
      reason: 'access'
    });
  }, [fireEvent]);
  if (url) {
    return jsx(EmptyState, {
      testId: "datasource--access-required-with-url",
      header: formatMessage(loadingErrorMessages.accessRequiredWithSite),
      description: jsx(Description, {
        message: formatMessage(loadingErrorMessages.accessInstructions),
        url: url
      }),
      renderImage: IconContainer
    });
  }
  return jsx(EmptyState, {
    testId: "datasource--access-required",
    header: formatMessage(loadingErrorMessages.accessRequired),
    description: formatMessage(loadingErrorMessages.accessInstructions),
    renderImage: IconContainer
  });
};