import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment, useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import { FormattedMessage, useIntl } from 'react-intl-next';
import Button from '@atlaskit/button';
import RefreshIcon from '@atlaskit/icon/core/migration/refresh';
import { fg } from '@atlaskit/platform-feature-flags';
import { Flex } from '@atlaskit/primitives';
import { N0, N40 } from '@atlaskit/theme/colors';
import { ASSETS_LIST_OF_LINKS_DATASOURCE_ID } from '../assets-modal';
import TableSearchCount, { AssetsItemCount } from '../common/modal/search-count';
import { footerMessages } from './messages';
import { PoweredByJSMAssets } from './powered-by-jsm-assets';
import { SyncInfo } from './sync-info';
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var FooterWrapper = styled.div({
  padding: "var(--ds-space-0, 0px)".concat(" ", "var(--ds-space-200, 16px)"),
  boxSizing: 'border-box',
  borderRadius: 'inherit',
  borderTopLeftRadius: 0,
  borderTopRightRadius: 0,
  background: "var(--ds-background-input, ".concat(N0, ")"),
  borderTop: "2px solid ".concat("var(--ds-background-accent-gray-subtler, ".concat(N40, ")"))
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var TopBorderWrapper = styled.div({
  display: 'flex',
  boxSizing: 'border-box',
  justifyContent: 'space-between',
  padding: "var(--ds-space-250, 20px)".concat(" ", "var(--ds-space-0, 0px)")
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var SyncWrapper = styled.div({
  display: 'flex',
  alignItems: 'center',
  color: "var(--ds-text-accent-gray, #44546F)"
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var SyncTextWrapper = styled.div({
  marginRight: "var(--ds-space-075, 6px)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
});
export var TableFooterOld = function TableFooterOld(_ref) {
  var datasourceId = _ref.datasourceId,
    itemCount = _ref.itemCount,
    onRefresh = _ref.onRefresh,
    isLoading = _ref.isLoading,
    url = _ref.url;
  var intl = useIntl();
  var _useState = useState(new Date()),
    _useState2 = _slicedToArray(_useState, 2),
    lastSyncTime = _useState2[0],
    setLastSyncTime = _useState2[1];
  var showItemCount = itemCount && itemCount > 0 ? true : itemCount === 0 ? !isLoading : false;
  useEffect(function () {
    if (isLoading) {
      setLastSyncTime(new Date());
    }
  }, [isLoading]);

  // If only one of the two is passed in, still show the other one (Note: We keep the div encapsulating the one not shown to
  // ensure correct positioning since 'justify-content: space-between' is used).
  return onRefresh || showItemCount ? jsx(FooterWrapper, {
    "data-testid": "table-footer"
  }, jsx(TopBorderWrapper, null, showItemCount && jsx(Flex, null, datasourceId === ASSETS_LIST_OF_LINKS_DATASOURCE_ID ? jsx(AssetsItemCount, {
    searchCount: itemCount,
    url: url,
    testId: "item-count"
  }) : jsx(TableSearchCount, {
    searchCount: itemCount,
    url: url,
    prefixTextType: "item",
    testId: "item-count"
  })), datasourceId === ASSETS_LIST_OF_LINKS_DATASOURCE_ID ? jsx(PoweredByJSMAssets, {
    text: intl.formatMessage(fg('assets_as_an_app_v2') ? footerMessages.poweredByAssets : footerMessages.powerByJSM)
  }) : null, jsx(SyncWrapper, null, onRefresh && jsx(Fragment, null, jsx(SyncTextWrapper, {
    "data-testid": "sync-text"
  }, isLoading ? jsx(FormattedMessage, footerMessages.loadingText) : jsx(SyncInfo, {
    lastSyncTime: lastSyncTime
  })), jsx(Button, {
    onClick: onRefresh,
    appearance: "subtle",
    iconBefore: jsx(RefreshIcon, {
      label: intl.formatMessage(footerMessages.refreshLabel),
      color: "currentColor",
      spacing: "spacious"
    }),
    isDisabled: isLoading,
    testId: "refresh-button"
  }))))) : null;
};