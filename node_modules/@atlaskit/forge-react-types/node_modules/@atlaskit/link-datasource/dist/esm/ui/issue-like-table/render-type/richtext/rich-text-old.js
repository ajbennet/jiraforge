import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { defaultSchema } from '@atlaskit/adf-schema/schema-default';
import { Node as PMNode, Schema } from '@atlaskit/editor-prosemirror/model';
var rootStyles = css({
  position: 'relative'
});
var smartLinkNodeToUrl = function smartLinkNodeToUrl(node) {
  var _node$attrs$url;
  return (_node$attrs$url = node.attrs.url) !== null && _node$attrs$url !== void 0 ? _node$attrs$url : '';
};
var schemaSmartLinkOverride = new Schema({
  nodes: defaultSchema.spec.nodes.update('inlineCard', _objectSpread(_objectSpread({}, defaultSchema.spec.nodes.get('inlineCard')), {}, {
    leafText: smartLinkNodeToUrl
  })).update('blockCard', _objectSpread(_objectSpread({}, defaultSchema.spec.nodes.get('blockCard')), {}, {
    leafText: smartLinkNodeToUrl
  })).update('embedCard', _objectSpread(_objectSpread({}, defaultSchema.spec.nodes.get('embedCard')), {}, {
    leafText: smartLinkNodeToUrl
  })),
  marks: defaultSchema.spec.marks
});
export var parseRichText = function parseRichText(value) {
  try {
    if (value.type === 'adf') {
      var adf = JSON.parse(value.text);
      return PMNode.fromJSON(schemaSmartLinkOverride, _objectSpread(_objectSpread({}, adf), {}, {
        content: _toConsumableArray(adf.content.slice(0, 2))
      })).textContent;
    }
    return null;
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error('error parsing adf', e);
    return null;
  }
};
var RichTextType = function RichTextType(_ref) {
  var value = _ref.value;
  var adfPlainText = useMemo(function () {
    return parseRichText(value);
  }, [value]);
  if (adfPlainText) {
    return jsx("span", {
      css: rootStyles,
      "data-testid": "richtext-plaintext"
    }, adfPlainText);
  } else {
    return jsx("span", {
      "data-testid": "richtext-unsupported"
    });
  }
};
export default RichTextType;