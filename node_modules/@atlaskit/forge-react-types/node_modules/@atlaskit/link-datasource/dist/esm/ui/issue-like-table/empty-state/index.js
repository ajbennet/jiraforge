/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Skeleton } from '@atlaskit/linking-common';
import { fg } from '@atlaskit/platform-feature-flags';
import { N40 } from '@atlaskit/theme/colors';
import { TableHeading } from '../styled';
import EmptyStateOld from './empty-state-old';
var SkeletonComponent = function SkeletonComponent(_ref) {
  var width = _ref.width,
    itemName = _ref.itemName;
  return /*#__PURE__*/React.createElement(Skeleton, {
    borderRadius: "var(--ds-border-radius-100, 8px)",
    testId: "".concat(itemName, "-empty-state-skeleton"),
    height: 14,
    width: width
  });
};
var tableBodyStyles = null;
var tableStyles = null;
var padding = "var(--ds-space-100, 8px)".concat(" ", "var(--ds-space-100, 8px)");
var cellStyles = null;
var baseColumns = [{
  key: 'type',
  width: 35
}, {
  key: 'issue',
  width: 50
}, {
  key: 'summary',
  width: 100
}, {
  key: 'assignee',
  width: 70
}, {
  key: 'priority',
  width: 60
}, {
  key: 'status',
  width: 60
}, {
  key: 'resolution',
  width: 55
}, {
  key: 'created',
  width: 50
}, {
  key: 'due',
  width: 50
}];
var longColumnWidths = [141, 208, 186, 212, 212, 151, 212, 182, 180, 163, 172, 211, 145, 190];
var shortColumnWidths = [75, 54, 66, 73, 52, 73, 55, 80, 67, 76, 58, 65, 56, 76];
var renderItem = function renderItem(_ref2, _ref3) {
  var key = _ref2.key,
    width = _ref2.width;
  var longWidth = _ref3.longWidth,
    shortWidth = _ref3.shortWidth;
  switch (key) {
    case 'status':
      return /*#__PURE__*/React.createElement(SkeletonComponent, {
        width: shortWidth,
        itemName: key
      });
    case 'summary':
      return /*#__PURE__*/React.createElement(SkeletonComponent, {
        width: longWidth,
        itemName: key
      });
    default:
      return /*#__PURE__*/React.createElement(SkeletonComponent, {
        width: width,
        itemName: key
      });
  }
};
var EmptyState = function EmptyState(_ref4) {
  var isCompact = _ref4.isCompact,
    testId = _ref4.testId;
  var columnsToRender = isCompact ? baseColumns.slice(0, 6) : baseColumns;
  // if it is compact (non-modal), there is room for 14 rows
  // if it is modal (not compact), there is only room for 10 rows
  var rowsNumber = isCompact ? 14 : 10;
  var rows = new Array(rowsNumber).fill(null).map(function (_, index) {
    return {
      id: index,
      longWidth: longColumnWidths[index],
      shortWidth: shortColumnWidths[index]
    };
  });
  return /*#__PURE__*/React.createElement("div", {
    style: {
      // the IssueLikeDataTableView wraps the table in a container with the styling below while modal doesn't
      // this maxHeight comes from scrollableContainerHeight
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      maxHeight: 590,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      padding: "var(--ds-space-0, 0px)",
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      boxSizing: 'border-box'
    }
  }, /*#__PURE__*/React.createElement("table", {
    "data-testid": testId,
    className: ax(["_bfhkchd4"])
  }, /*#__PURE__*/React.createElement("thead", {
    style: {
      borderBottom: 0
    }
  }, /*#__PURE__*/React.createElement("tr", null, columnsToRender.map(function (_ref5) {
    var key = _ref5.key,
      width = _ref5.width;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      React.createElement(TableHeading, {
        key: key,
        style: {
          width: width,
          padding: padding
        }
      }, /*#__PURE__*/React.createElement(Skeleton, {
        appearance: "darkGray",
        borderRadius: 8,
        testId: "empty-state-skeleton",
        height: 12,
        width: width
      }))
    );
  }))), /*#__PURE__*/React.createElement("tbody", {
    className: ax(["_n7zlidpf"])
  }, rows.map(function (row) {
    return /*#__PURE__*/React.createElement("tr", {
      key: row.id
    }, columnsToRender.map(function (column) {
      return /*#__PURE__*/React.createElement("td", {
        key: column.key,
        className: ax(["_1yt41uce _1s7z1oij _n7zl1oij _1ls2idpf _1o59u2gc _1lhcu2gc"]),
        style: {
          "--_1n7euq6": ix("0.5px solid ".concat("var(--ds-border, ".concat(N40, ")")))
        }
      }, renderItem(column, row));
    }));
  }))));
};
var EmptyStateExported = function EmptyStateExported(props) {
  if (fg('bandicoots-compiled-migration-link-datasource')) {
    return /*#__PURE__*/React.createElement(EmptyState, props);
  } else {
    return /*#__PURE__*/React.createElement(EmptyStateOld, props);
  }
};
export default EmptyStateExported;