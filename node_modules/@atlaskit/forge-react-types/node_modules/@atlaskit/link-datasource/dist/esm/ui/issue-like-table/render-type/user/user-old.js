import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import { FormattedMessage } from 'react-intl-next';
import Avatar from '@atlaskit/avatar';
import AvatarGroup from '@atlaskit/avatar-group';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { WidthObserver } from '@atlaskit/width-detector';
import { userTypeMessages } from './messages';
var userWrapperStyles = xcss({
  display: 'flex',
  alignItems: 'center',
  font: 'font.body'
});
var avatarWrapperStyles = xcss({
  marginRight: 'space.100'
});
var widthObserverWrapperStyles = xcss({
  position: 'relative'
});
var labelWrapperStyles = css({
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  overflow: 'hidden'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var AvatarGroupWrapperStyles = styled.div({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  ul: {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    paddingLeft: '0px !important'
  }
});
var getMaxUserCount = function getMaxUserCount(userCount, availableWidth) {
  if (availableWidth <= 28) {
    // If width is less than or equal to 28px, we should only display the user count
    return 1;
  }
  var defaultMaxCount = 5;
  var usersNumFitToAvailableWidth = Math.ceil((availableWidth - 28) / 20);
  return usersNumFitToAvailableWidth > defaultMaxCount ? defaultMaxCount : usersNumFitToAvailableWidth;
};
export var USER_TYPE_TEST_ID = 'link-datasource-render-type--user';
var UserType = function UserType(_ref) {
  var users = _ref.users;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    width = _useState2[0],
    setWidth = _useState2[1];
  var multipleUsers = false;
  if (fg('platform-datasources-enable-two-way-sync-assignee')) {
    multipleUsers = users.length === 1;
  } else {
    multipleUsers = users.length <= 1;
  }
  if (multipleUsers) {
    var _ref2 = users[0] || {},
      avatarSource = _ref2.avatarSource,
      _ref2$avatarSize = _ref2.avatarSize,
      avatarSize = _ref2$avatarSize === void 0 ? 'small' : _ref2$avatarSize,
      displayName = _ref2.displayName,
      _ref2$testId = _ref2.testId,
      testId = _ref2$testId === void 0 ? USER_TYPE_TEST_ID : _ref2$testId,
      children = _ref2.children;
    return jsx(Box, {
      xcss: userWrapperStyles,
      testId: testId
    }, jsx(Box, {
      xcss: avatarWrapperStyles
    }, jsx(Avatar, {
      appearance: "circle",
      size: avatarSize || 'small',
      src: avatarSource,
      testId: "".concat(testId, "--avatar")
    })), jsx("span", {
      css: labelWrapperStyles
    }, children || displayName || jsx(FormattedMessage, userTypeMessages.userDefaultdisplayNameValue)));
  } else {
    var maxCount = width !== null ? getMaxUserCount(users.length, width) : 5;
    var data = users.filter(function (user) {
      return !!user.displayName;
    }).map(function (_ref3) {
      var atlassianUserId = _ref3.atlassianUserId,
        displayName = _ref3.displayName,
        avatarSource = _ref3.avatarSource,
        testId = _ref3.testId;
      return {
        key: atlassianUserId,
        name: displayName,
        src: avatarSource,
        testId: "".concat(testId, "--avatar")
      };
    });
    return jsx(AvatarGroupWrapperStyles, null, jsx(Box, {
      xcss: widthObserverWrapperStyles
    }, jsx(WidthObserver, {
      setWidth: setWidth
    })), jsx(AvatarGroup, {
      data: data,
      maxCount: maxCount,
      size: "small",
      isTooltipDisabled: true,
      testId: USER_TYPE_TEST_ID
    }));
  }
};
export default UserType;