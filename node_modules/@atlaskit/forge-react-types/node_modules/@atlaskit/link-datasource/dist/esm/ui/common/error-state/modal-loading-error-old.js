/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import { Box, Text } from '@atlaskit/primitives';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { LoadingErrorSVGOld } from './loading-error-svg-old';
import { loadingErrorMessages } from './messages';
var errorContainerStyles = css({
  display: 'grid',
  gap: "var(--ds-space-300, 24px)",
  placeItems: 'center',
  placeSelf: 'center'
});
var errorMessageContainerStyles = css({
  display: 'grid',
  gap: "var(--ds-space-100, 8px)",
  placeItems: 'center'
});
export var ModalLoadingErrorOld = function ModalLoadingErrorOld(_ref) {
  var _ref$errorMessage = _ref.errorMessage,
    errorMessage = _ref$errorMessage === void 0 ? jsx(FormattedMessage, loadingErrorMessages.checkConnection) : _ref$errorMessage;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  useEffect(function () {
    fireEvent('ui.error.shown', {
      reason: 'network'
    });
  }, [fireEvent]);
  return jsx(Box, {
    xcss: errorContainerStyles,
    testId: "datasource-modal--loading-error"
  }, jsx(LoadingErrorSVGOld, null), jsx(Box, {
    xcss: errorMessageContainerStyles
  }, jsx(Text, {
    size: "small"
  }, jsx(FormattedMessage, loadingErrorMessages.unableToLoadResults)), jsx(Text, {
    as: "p"
  }, errorMessage)));
};