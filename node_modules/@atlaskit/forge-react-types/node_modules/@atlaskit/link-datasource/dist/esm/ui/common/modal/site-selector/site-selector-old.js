import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["width"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { Box, xcss } from '@atlaskit/primitives';
import Select from '@atlaskit/select';
import { siteSelectorIndex } from '../../../../common/zindex';
import { siteSelectorMessages } from './messages';
var dropdownContainerStyles = xcss({
  display: 'flex',
  alignItems: 'center',
  gap: 'space.100',
  minHeight: '40px' // to prevent vertical shifting when site selector pops in
});
var selectStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: siteSelectorIndex
});
export var SiteSelectorOld = function SiteSelectorOld(props) {
  var availableSites = props.availableSites,
    onSiteSelection = props.onSiteSelection,
    selectedSite = props.selectedSite,
    label = props.label,
    testId = props.testId;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var onChange = function onChange(newValue) {
    var selectedSite = availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(function (site) {
      return site.cloudId === (newValue === null || newValue === void 0 ? void 0 : newValue.value);
    });
    if (selectedSite) {
      onSiteSelection(selectedSite);
    }
  };
  var availableSitesOptions = useMemo(function () {
    return availableSites === null || availableSites === void 0 ? void 0 : availableSites.map(function (site) {
      return {
        label: site.displayName,
        value: site.cloudId
      };
    });
  }, [availableSites]);
  var selectedSiteOption = selectedSite && {
    label: selectedSite.displayName,
    value: selectedSite.cloudId
  };
  return jsx(Box, {
    xcss: dropdownContainerStyles
  }, formatMessage(label), availableSites && availableSites.length > 1 && jsx("span", {
    "data-testid": "".concat(testId, "--trigger")
  }, jsx(Select, {
    css: selectStyles,
    classNamePrefix: testId,
    isLoading: !availableSites,
    onChange: onChange,
    options: availableSitesOptions,
    placeholder: formatMessage(siteSelectorMessages.chooseSite),
    styles: {
      // prevents the popup menu with available sites from being too narrow
      // if the selected site is much shorter than the other options
      menu: function menu(_ref) {
        var width = _ref.width,
          css = _objectWithoutProperties(_ref, _excluded);
        return _objectSpread(_objectSpread({}, css), {}, {
          minWidth: '100%',
          width: 'max-content'
        });
      }
    },
    testId: testId,
    value: selectedSiteOption,
    label: formatMessage(siteSelectorMessages.chooseSite)
  })));
};