/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { LoadingButton } from '@atlaskit/button';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import { fg } from '@atlaskit/platform-feature-flags';
import Textfield from '@atlaskit/textfield';
import { useDatasourceAnalyticsEvents } from '../../../../analytics';
import { basicSearchInputMessages } from './messages';
var searchButtonStyles = css({
  marginRight: "var(--ds-space-075, 6px)"
});
var formStyles = css({
  flex: 1
});
var formWithMaxWidthStyles = css({
  flex: 1,
  maxWidth: 250
});
export var BasicSearchInputOld = function BasicSearchInputOld(_ref) {
  var isDisabled = _ref.isDisabled,
    isSearching = _ref.isSearching,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch,
    searchTerm = _ref.searchTerm,
    fullWidth = _ref.fullWidth,
    testId = _ref.testId,
    placeholder = _ref.placeholder;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var handleSearchWithAnalytics = function handleSearchWithAnalytics() {
    fireEvent('ui.form.submitted.basicSearch', {});
    onSearch(searchTerm);
  };
  var handleFormSubmit = function handleFormSubmit(e) {
    e.preventDefault();
    handleSearchWithAnalytics();
  };
  return jsx("form", {
    css: fullWidth ? formStyles : formWithMaxWidthStyles,
    onSubmit: handleFormSubmit
  }, jsx(Textfield, {
    elemAfterInput: jsx(LoadingButton, {
      appearance: "primary",
      css: searchButtonStyles,
      iconBefore: jsx(SearchIcon, {
        label: formatMessage(fg('confluence-issue-terminology-refresh') ? basicSearchInputMessages.basicTextSearchLabelIssueTermRefresh : basicSearchInputMessages.basicTextSearchLabel),
        LEGACY_size: "medium",
        color: "currentColor",
        spacing: "spacious"
      }),
      isDisabled: isDisabled,
      isLoading: isSearching,
      onClick: handleSearchWithAnalytics,
      spacing: "none",
      testId: "".concat(testId, "--basic-search-button")
    }),
    autoFocus: true,
    onChange: onChange,
    placeholder: formatMessage(placeholder),
    testId: "".concat(testId, "--basic-search-input"),
    value: searchTerm,
    "aria-label": formatMessage(placeholder)
  }));
};