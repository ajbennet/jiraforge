/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useIntl } from 'react-intl-next';
import { LoadingButton } from '@atlaskit/button';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import { fg } from '@atlaskit/platform-feature-flags';
import Textfield from '@atlaskit/textfield';
import { useDatasourceAnalyticsEvents } from '../../../../analytics';
import { BasicSearchInputOld } from './basic-search-input-old';
import { basicSearchInputMessages } from './messages';
const searchButtonStyles = null;
const formStyles = null;
const formWithMaxWidthStyles = null;
export const BasicSearchInputNew = ({
  isDisabled,
  isSearching,
  onChange,
  onSearch,
  searchTerm,
  fullWidth,
  testId,
  placeholder
}) => {
  const {
    formatMessage
  } = useIntl();
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const handleSearchWithAnalytics = () => {
    fireEvent('ui.form.submitted.basicSearch', {});
    onSearch(searchTerm);
  };
  const handleFormSubmit = e => {
    e.preventDefault();
    handleSearchWithAnalytics();
  };
  return /*#__PURE__*/React.createElement("form", {
    onSubmit: handleFormSubmit,
    className: ax([fullWidth ? "_16jlkb7n _1o9zkb7n _i0dlf1ug" : "_16jlkb7n _1o9zkb7n _i0dlf1ug _p12fr0r7"])
  }, /*#__PURE__*/React.createElement(Textfield, {
    elemAfterInput: /*#__PURE__*/React.createElement(LoadingButton, {
      appearance: "primary",
      iconBefore: /*#__PURE__*/React.createElement(SearchIcon, {
        label: formatMessage(fg('confluence-issue-terminology-refresh') ? basicSearchInputMessages.basicTextSearchLabelIssueTermRefresh : basicSearchInputMessages.basicTextSearchLabel),
        LEGACY_size: "medium",
        color: "currentColor",
        spacing: "spacious"
      }),
      isDisabled: isDisabled,
      isLoading: isSearching,
      onClick: handleSearchWithAnalytics,
      spacing: "none",
      testId: `${testId}--basic-search-button`,
      className: ax(["_2hwx12x7"])
    }),
    autoFocus: true,
    onChange: onChange,
    placeholder: formatMessage(placeholder),
    testId: `${testId}--basic-search-input`,
    value: searchTerm,
    "aria-label": formatMessage(placeholder)
  }));
};
export const BasicSearchInput = props => {
  if (fg('bandicoots-compiled-migration-link-datasource')) {
    return /*#__PURE__*/React.createElement(BasicSearchInputNew, props);
  } else {
    return /*#__PURE__*/React.createElement(BasicSearchInputOld, props);
  }
};