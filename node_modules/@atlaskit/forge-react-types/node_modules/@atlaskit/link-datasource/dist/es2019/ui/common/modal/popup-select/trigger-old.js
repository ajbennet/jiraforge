import React, { forwardRef, useCallback } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import Badge from '@atlaskit/badge';
import Button from '@atlaskit/button/standard-button';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { Box, Flex, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
const triggerButtonLabelStyles = xcss({
  textOverflow: 'ellipsis',
  overflow: 'hidden'
});
const badgeStyles = xcss({
  marginLeft: 'space.050'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const LoadingStateAnimationWrapper = styled.div({
  position: 'relative',
  animation: 'flickerAnimation 2s infinite',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '@keyframes flickerAnimation': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '0%': {
      opacity: 1
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '50%': {
      opacity: 0.5
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '100%': {
      opacity: 1
    }
  }
});
const PopupTrigger = /*#__PURE__*/forwardRef(({
  isSelected,
  isDisabled,
  isLoading,
  selectedOptions,
  testId,
  label
}, ref) => {
  const [firstOption] = selectedOptions || [];
  const hasOptions = selectedOptions && selectedOptions.length > 0;
  const showButtonLoading = !isDisabled && isLoading;
  const triggerButtonTestId = `${testId}-trigger`;
  const LoadingButton = useCallback(() => /*#__PURE__*/React.createElement(LoadingStateAnimationWrapper, null, /*#__PURE__*/React.createElement(Button, {
    iconAfter: /*#__PURE__*/React.createElement(Spinner, {
      size: 'xsmall'
    }),
    testId: `${triggerButtonTestId}--loading-button`
  }, label)), [label, triggerButtonTestId]);
  const DefaultButton = useCallback(() => /*#__PURE__*/React.createElement(Button, {
    appearance: "default",
    isSelected: isSelected || hasOptions,
    isDisabled: isDisabled,
    iconAfter: /*#__PURE__*/React.createElement(ChevronDownIcon, {
      label: "",
      color: "currentColor"
    }),
    testId: `${triggerButtonTestId}--button`
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    xcss: triggerButtonLabelStyles
  }, label, firstOption && /*#__PURE__*/React.createElement(React.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/React.createElement(Flex, {
    xcss: badgeStyles,
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Badge, {
    appearance: "primary"
  }, "+", selectedOptions.length - 1)))), [firstOption, hasOptions, isDisabled, isSelected, label, selectedOptions, triggerButtonTestId]);

  /**
   * We had an issue with the popup component referencing a stale DOM ref for the trigger button.
   * Hence introducing a Box to make sure ref is always the same and only content is refreshed on re-renders
   */
  return /*#__PURE__*/React.createElement(Box, {
    ref: ref,
    testId: triggerButtonTestId
  }, showButtonLoading ? /*#__PURE__*/React.createElement(LoadingButton, null) : /*#__PURE__*/React.createElement(DefaultButton, null));
});
export default PopupTrigger;