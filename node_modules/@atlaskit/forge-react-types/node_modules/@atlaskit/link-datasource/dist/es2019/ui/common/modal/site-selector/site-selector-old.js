/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { Box, xcss } from '@atlaskit/primitives';
import Select from '@atlaskit/select';
import { siteSelectorIndex } from '../../../../common/zindex';
import { siteSelectorMessages } from './messages';
const dropdownContainerStyles = xcss({
  display: 'flex',
  alignItems: 'center',
  gap: 'space.100',
  minHeight: '40px' // to prevent vertical shifting when site selector pops in
});
const selectStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: siteSelectorIndex
});
export const SiteSelectorOld = props => {
  const {
    availableSites,
    onSiteSelection,
    selectedSite,
    label,
    testId
  } = props;
  const {
    formatMessage
  } = useIntl();
  const onChange = newValue => {
    const selectedSite = availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(site => site.cloudId === (newValue === null || newValue === void 0 ? void 0 : newValue.value));
    if (selectedSite) {
      onSiteSelection(selectedSite);
    }
  };
  const availableSitesOptions = useMemo(() => availableSites === null || availableSites === void 0 ? void 0 : availableSites.map(site => ({
    label: site.displayName,
    value: site.cloudId
  })), [availableSites]);
  const selectedSiteOption = selectedSite && {
    label: selectedSite.displayName,
    value: selectedSite.cloudId
  };
  return jsx(Box, {
    xcss: dropdownContainerStyles
  }, formatMessage(label), availableSites && availableSites.length > 1 && jsx("span", {
    "data-testid": `${testId}--trigger`
  }, jsx(Select, {
    css: selectStyles,
    classNamePrefix: testId,
    isLoading: !availableSites,
    onChange: onChange,
    options: availableSitesOptions,
    placeholder: formatMessage(siteSelectorMessages.chooseSite),
    styles: {
      // prevents the popup menu with available sites from being too narrow
      // if the selected site is much shorter than the other options
      menu: ({
        width,
        ...css
      }) => ({
        ...css,
        minWidth: '100%',
        width: 'max-content'
      })
    },
    testId: testId,
    value: selectedSiteOption,
    label: formatMessage(siteSelectorMessages.chooseSite)
  })));
};