/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Skeleton } from '@atlaskit/linking-common';
import { fg } from '@atlaskit/platform-feature-flags';
import { N40 } from '@atlaskit/theme/colors';
import { TableHeading } from '../styled';
import EmptyStateOld from './empty-state-old';
const SkeletonComponent = ({
  width,
  itemName
}) => /*#__PURE__*/React.createElement(Skeleton, {
  borderRadius: "var(--ds-border-radius-100, 8px)",
  testId: `${itemName}-empty-state-skeleton`,
  height: 14,
  width: width
});
const tableBodyStyles = null;
const tableStyles = null;
const padding = `${"var(--ds-space-100, 8px)"} ${"var(--ds-space-100, 8px)"}`;
const cellStyles = null;
const baseColumns = [{
  key: 'type',
  width: 35
}, {
  key: 'issue',
  width: 50
}, {
  key: 'summary',
  width: 100
}, {
  key: 'assignee',
  width: 70
}, {
  key: 'priority',
  width: 60
}, {
  key: 'status',
  width: 60
}, {
  key: 'resolution',
  width: 55
}, {
  key: 'created',
  width: 50
}, {
  key: 'due',
  width: 50
}];
const longColumnWidths = [141, 208, 186, 212, 212, 151, 212, 182, 180, 163, 172, 211, 145, 190];
const shortColumnWidths = [75, 54, 66, 73, 52, 73, 55, 80, 67, 76, 58, 65, 56, 76];
const renderItem = ({
  key,
  width
}, {
  longWidth,
  shortWidth
}) => {
  switch (key) {
    case 'status':
      return /*#__PURE__*/React.createElement(SkeletonComponent, {
        width: shortWidth,
        itemName: key
      });
    case 'summary':
      return /*#__PURE__*/React.createElement(SkeletonComponent, {
        width: longWidth,
        itemName: key
      });
    default:
      return /*#__PURE__*/React.createElement(SkeletonComponent, {
        width: width,
        itemName: key
      });
  }
};
const EmptyState = ({
  isCompact,
  testId
}) => {
  const columnsToRender = isCompact ? baseColumns.slice(0, 6) : baseColumns;
  // if it is compact (non-modal), there is room for 14 rows
  // if it is modal (not compact), there is only room for 10 rows
  const rowsNumber = isCompact ? 14 : 10;
  const rows = new Array(rowsNumber).fill(null).map((_, index) => ({
    id: index,
    longWidth: longColumnWidths[index],
    shortWidth: shortColumnWidths[index]
  }));
  return /*#__PURE__*/React.createElement("div", {
    style: {
      // the IssueLikeDataTableView wraps the table in a container with the styling below while modal doesn't
      // this maxHeight comes from scrollableContainerHeight
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      maxHeight: 590,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      padding: "var(--ds-space-0, 0px)",
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      boxSizing: 'border-box'
    }
  }, /*#__PURE__*/React.createElement("table", {
    "data-testid": testId,
    className: ax(["_bfhkchd4"])
  }, /*#__PURE__*/React.createElement("thead", {
    style: {
      borderBottom: 0
    }
  }, /*#__PURE__*/React.createElement("tr", null, columnsToRender.map(({
    key,
    width
  }) =>
  /*#__PURE__*/
  // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
  React.createElement(TableHeading, {
    key: key,
    style: {
      width,
      padding
    }
  }, /*#__PURE__*/React.createElement(Skeleton, {
    appearance: "darkGray",
    borderRadius: 8,
    testId: "empty-state-skeleton",
    height: 12,
    width: width
  }))))), /*#__PURE__*/React.createElement("tbody", {
    className: ax(["_n7zlidpf"])
  }, rows.map(row => /*#__PURE__*/React.createElement("tr", {
    key: row.id
  }, columnsToRender.map(column => /*#__PURE__*/React.createElement("td", {
    key: column.key,
    className: ax(["_1yt41uce _1s7zl0fh _n7zll0fh _1ls2idpf _1o59u2gc _1lhcu2gc"])
  }, renderItem(column, row))))))));
};
const EmptyStateExported = props => {
  if (fg('bandicoots-compiled-migration-link-datasource')) {
    return /*#__PURE__*/React.createElement(EmptyState, props);
  } else {
    return /*#__PURE__*/React.createElement(EmptyStateOld, props);
  }
};
export default EmptyStateExported;