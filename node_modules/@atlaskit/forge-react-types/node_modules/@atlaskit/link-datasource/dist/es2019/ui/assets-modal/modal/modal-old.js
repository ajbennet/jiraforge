import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import { withAnalyticsContext } from '@atlaskit/analytics-next';
import Button from '@atlaskit/button/standard-button';
import { IntlMessagesProvider } from '@atlaskit/intl-messages-provider';
import { ModalBody, ModalFooter, ModalHeader, ModalTitle, ModalTransition } from '@atlaskit/modal-dialog';
import { EVENT_CHANNEL, useDatasourceAnalyticsEvents } from '../../../analytics';
import { componentMetadata } from '../../../analytics/constants';
import { DatasourceAction, DatasourceDisplay, DatasourceSearchMethod } from '../../../analytics/types';
import { startUfoExperience } from '../../../analytics/ufoExperiences';
import { useColumnPickerRenderedFailedUfoExperience } from '../../../analytics/ufoExperiences/hooks/useColumnPickerRenderedFailedUfoExperience';
import { useDataRenderedUfoExperience } from '../../../analytics/ufoExperiences/hooks/useDataRenderedUfoExperience';
import { buildDatasourceAdf } from '../../../common/utils/adf';
import { fetchMessagesForLocale } from '../../../common/utils/locale/fetch-messages-for-locale';
import { DatasourceExperienceIdProvider, useDatasourceExperienceId } from '../../../contexts/datasource-experience-id';
import { UserInteractionsProvider, useUserInteractions } from '../../../contexts/user-interactions';
import { useAssetsClient } from '../../../hooks/useAssetsClient';
import { useDatasourceTableState } from '../../../hooks/useDatasourceTableState';
import i18nEN from '../../../i18n/en';
import { PermissionError } from '../../../services/cmdbService.utils';
import { StoreContainer } from '../../../state';
import { AccessRequired } from '../../../ui/common/error-state/access-required';
import { ModalLoadingError } from '../../common/error-state/modal-loading-error';
import { CancelButton } from '../../common/modal/cancel-button';
import { DatasourceModal } from '../../common/modal/datasource-modal';
import { AssetsSearchContainer } from '../search-container';
import { AssetsSearchContainerLoading } from '../search-container/loading-state';
import { modalMessages } from './messages';
import { MODAL_HEIGHT, RenderAssetsContent } from './render-assets-content';
const VERSION_TWO = '2';
const modalBodyErrorWrapperStyles = css({
  alignItems: 'center',
  display: 'grid',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values
  height: MODAL_HEIGHT
});
const AssetsModalTitle = jsx(ModalTitle, null, jsx(FormattedMessage, modalMessages.insertObjectsTitle));
const PlainAssetsConfigModal = props => {
  const {
    datasourceId,
    parameters: initialParameters,
    onCancel,
    onInsert,
    visibleColumnKeys: initialVisibleColumnKeys
  } = props;
  const [aql, setAql] = useState(initialParameters === null || initialParameters === void 0 ? void 0 : initialParameters.aql);
  const [schemaId, setSchemaId] = useState(initialParameters === null || initialParameters === void 0 ? void 0 : initialParameters.schemaId);
  const apiVersion = initialParameters === null || initialParameters === void 0 ? void 0 : initialParameters.version;
  const [visibleColumnKeys, setVisibleColumnKeys] = useState(apiVersion !== VERSION_TWO ? [] : initialVisibleColumnKeys);
  const [isNewSearch, setIsNewSearch] = useState(false);
  const [errorState, setErrorState] = useState();
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const experienceId = useDatasourceExperienceId();
  const {
    workspaceId,
    workspaceError,
    existingObjectSchema,
    existingObjectSchemaError,
    objectSchemas,
    objectSchemasError,
    totalObjectSchemas,
    assetsClientLoading
  } = useAssetsClient(initialParameters);

  /* ------------------------------ PERMISSIONS ------------------------------ */
  useEffect(() => {
    if (workspaceError) {
      // If a workspaceError occurs this is a critical error
      if (workspaceError instanceof PermissionError) {
        setErrorState('permission');
      } else {
        setErrorState('network');
      }
    }
  }, [workspaceError]);
  useEffect(() => {
    if (objectSchemasError) {
      // We only care about permission errors for objectSchemas fetching as the user can retry this action
      if (objectSchemasError instanceof PermissionError) {
        setErrorState('permission');
      }
    }
  }, [objectSchemasError]);
  useEffect(() => {
    if (existingObjectSchemaError) {
      // We only care about permission errors for existingObjectSchema fetching as the user can retry this action
      if (existingObjectSchemaError instanceof PermissionError) {
        setErrorState('permission');
      }
    }
  }, [existingObjectSchemaError]);
  /* ------------------------------ END PERMISSIONS ------------------------------ */

  const parameters = useMemo(() => ({
    aql: aql || '',
    schemaId: schemaId || '',
    workspaceId: workspaceId || '',
    version: VERSION_TWO
  }), [aql, schemaId, workspaceId]);
  const isParametersSet = !!(aql && workspaceId && schemaId);
  const {
    status,
    onNextPage,
    responseItems,
    responseItemIds,
    reset,
    loadDatasourceDetails,
    hasNextPage,
    columns,
    defaultVisibleColumnKeys,
    extensionKey = null,
    destinationObjectTypes,
    totalCount
  } = useDatasourceTableState({
    datasourceId,
    parameters: isParametersSet ? parameters : undefined,
    fieldKeys: isNewSearch ? [] : visibleColumnKeys
  });

  /* ------------------------------ OBSERVABILITY ------------------------------ */
  const searchCount = useRef(0);
  const userInteractions = useUserInteractions();
  const visibleColumnCount = useRef((visibleColumnKeys === null || visibleColumnKeys === void 0 ? void 0 : visibleColumnKeys.length) || 0);
  const isDataReady = (visibleColumnKeys || []).length > 0;
  const analyticsPayload = useMemo(() => {
    return {
      extensionKey: extensionKey,
      destinationObjectTypes: destinationObjectTypes
    };
  }, [destinationObjectTypes, extensionKey]);
  useEffect(() => {
    // We only want to send modal ready event once after we've fetched the schema count
    if (totalObjectSchemas !== undefined) {
      fireEvent('ui.modal.ready.datasource', {
        schemasCount: totalObjectSchemas,
        instancesCount: null
      });
    }
  }, [fireEvent, totalObjectSchemas]);
  const fireTableViewedEvent = useCallback(() => {
    if (isDataReady) {
      fireEvent('ui.table.viewed.datasourceConfigModal', {
        ...analyticsPayload,
        totalItemCount: totalCount || 0,
        searchMethod: DatasourceSearchMethod.DATASOURCE_SEARCH_QUERY,
        displayedColumnCount: visibleColumnCount.current
      });
    }
  }, [analyticsPayload, fireEvent, totalCount, isDataReady]);
  useEffect(() => {
    const isResolved = status === 'resolved';
    if (!isResolved || !totalCount) {
      return;
    }
    if (totalCount > 1) {
      fireTableViewedEvent();
    }
  }, [fireTableViewedEvent, status, totalCount]);
  useEffect(() => {
    const shouldStartUfoExperience = status === 'loading';
    if (shouldStartUfoExperience) {
      startUfoExperience({
        name: 'datasource-rendered'
      }, experienceId);
    }
  }, [experienceId, status]);
  useDataRenderedUfoExperience({
    status,
    experienceId: experienceId,
    itemCount: responseItems.length,
    canBeLink: false,
    extensionKey
  });
  useColumnPickerRenderedFailedUfoExperience(status, experienceId);
  /* ------------------------------ END OBSERVABILITY ------------------------------ */

  const onVisibleColumnKeysChange = useCallback(visibleColumnKeys => {
    setVisibleColumnKeys(visibleColumnKeys);
    setIsNewSearch(false);
  }, []);
  useEffect(() => {
    const newVisibleColumnKeys = initialVisibleColumnKeys && initialVisibleColumnKeys.length > 0 && apiVersion === VERSION_TWO ? initialVisibleColumnKeys : defaultVisibleColumnKeys;
    setVisibleColumnKeys(newVisibleColumnKeys);
  }, [initialVisibleColumnKeys, defaultVisibleColumnKeys, apiVersion]);
  useEffect(() => {
    if (isNewSearch) {
      setVisibleColumnKeys(defaultVisibleColumnKeys);
    }
  }, [defaultVisibleColumnKeys, isNewSearch]);
  useEffect(() => {
    visibleColumnCount.current = (visibleColumnKeys !== null && visibleColumnKeys !== void 0 ? visibleColumnKeys : []).length;
  }, [visibleColumnKeys]);
  const isDisabled = !!errorState || status !== 'resolved' || assetsClientLoading || !aql || !schemaId;
  const isEditingExistingTable = !!(initialParameters !== null && initialParameters !== void 0 && initialParameters.aql && initialParameters !== null && initialParameters !== void 0 && initialParameters.schemaId && initialParameters !== null && initialParameters !== void 0 && initialParameters.workspaceId);
  const retrieveUrlForSmartCardRender = useCallback(() => {
    var _data$key, _data$key$data;
    const [data] = responseItems;
    // agreement with BE that we will use `key` for rendering smartlink
    return data === null || data === void 0 ? void 0 : (_data$key = data.key) === null || _data$key === void 0 ? void 0 : (_data$key$data = _data$key.data) === null || _data$key$data === void 0 ? void 0 : _data$key$data.url;
  }, [responseItems]);
  const onInsertPressed = useCallback((e, analyticsEvent) => {
    var _insertButtonClickedE;
    if (!aql || !schemaId || !workspaceId) {
      return;
    }
    const insertButtonClickedEvent = analyticsEvent.update({
      actionSubjectId: 'insert',
      attributes: {
        ...analyticsPayload,
        totalItemCount: totalCount || 0,
        displayedColumnCount: visibleColumnCount.current,
        display: DatasourceDisplay.DATASOURCE_TABLE,
        searchCount: searchCount.current,
        searchMethod: DatasourceSearchMethod.DATASOURCE_SEARCH_QUERY,
        actions: userInteractions.get()
      },
      eventType: 'ui'
    });
    const consumerEvent = (_insertButtonClickedE = insertButtonClickedEvent.clone()) !== null && _insertButtonClickedE !== void 0 ? _insertButtonClickedE : undefined;
    insertButtonClickedEvent.fire(EVENT_CHANNEL);
    const firstAssetUrl = retrieveUrlForSmartCardRender();
    if (responseItems.length === 1 && firstAssetUrl) {
      onInsert({
        type: 'inlineCard',
        attrs: {
          url: firstAssetUrl
        }
      }, consumerEvent);
    } else {
      onInsert(buildDatasourceAdf({
        id: datasourceId,
        parameters: {
          workspaceId,
          aql,
          schemaId,
          version: VERSION_TWO
        },
        views: [{
          type: 'table',
          properties: {
            columns: (visibleColumnKeys !== null && visibleColumnKeys !== void 0 ? visibleColumnKeys : []).map(key => ({
              key
            }))
          }
        }]
      }), consumerEvent);
    }
  }, [aql, schemaId, workspaceId, analyticsPayload, totalCount, userInteractions, retrieveUrlForSmartCardRender, responseItems.length, onInsert, datasourceId, visibleColumnKeys]);
  const handleOnSearch = useCallback((searchAql, searchSchemaId) => {
    if (schemaId !== searchSchemaId || aql !== searchAql || status === 'rejected') {
      searchCount.current++;
      if (schemaId !== searchSchemaId) {
        userInteractions.add(DatasourceAction.SCHEMA_UPDATED);
      }
      if (aql !== searchAql) {
        userInteractions.add(DatasourceAction.QUERY_UPDATED);
      }
      setAql(searchAql);
      setSchemaId(searchSchemaId);
      setVisibleColumnKeys([]);
      setIsNewSearch(true);
      reset({
        shouldForceRequest: true,
        shouldResetColumns: true
      });
    }
  }, [aql, reset, schemaId, status, userInteractions]);
  const renderErrorState = useCallback(() => {
    if (errorState) {
      switch (errorState) {
        case 'permission':
          return jsx(AccessRequired, null);
        case 'network':
          return jsx(ModalLoadingError, null);
        default:
          return jsx(ModalLoadingError, null);
      }
    }
  }, [errorState]);
  const renderModalTitleContent = useCallback(() => {
    if (errorState) {
      return undefined;
    } else {
      if (!workspaceId || assetsClientLoading) {
        return jsx(AssetsSearchContainerLoading, {
          modalTitle: AssetsModalTitle
        });
      }
      return jsx(AssetsSearchContainer, {
        workspaceId: workspaceId,
        initialSearchData: {
          aql: initialParameters === null || initialParameters === void 0 ? void 0 : initialParameters.aql,
          objectSchema: existingObjectSchema,
          objectSchemas
        },
        onSearch: handleOnSearch,
        modalTitle: AssetsModalTitle,
        isSearching: status === 'loading'
      });
    }
  }, [errorState, workspaceId, assetsClientLoading, initialParameters === null || initialParameters === void 0 ? void 0 : initialParameters.aql, existingObjectSchema, objectSchemas, handleOnSearch, status]);
  const getCancelButtonAnalyticsPayload = useCallback(() => {
    return {
      ...analyticsPayload,
      searchCount: searchCount.current,
      actions: userInteractions.get()
    };
  }, [analyticsPayload, userInteractions]);
  return jsx(IntlMessagesProvider, {
    defaultMessages: i18nEN,
    loaderFn: fetchMessagesForLocale
  }, jsx(ModalTransition, null, jsx(DatasourceModal, {
    testId: "asset-datasource-modal",
    onClose: onCancel
  }, jsx(ModalHeader, null, renderModalTitleContent()), jsx(ModalBody, null, errorState ? jsx("div", {
    css: modalBodyErrorWrapperStyles
  }, renderErrorState()) : jsx(RenderAssetsContent, {
    isFetchingInitialData: assetsClientLoading,
    status: status,
    responseItems: responseItems,
    responseItemIds: responseItemIds,
    visibleColumnKeys: visibleColumnKeys,
    onVisibleColumnKeysChange: onVisibleColumnKeysChange,
    datasourceId: datasourceId,
    aql: aql,
    schemaId: schemaId,
    onNextPage: onNextPage,
    hasNextPage: hasNextPage,
    loadDatasourceDetails: loadDatasourceDetails,
    columns: columns,
    defaultVisibleColumnKeys: defaultVisibleColumnKeys
  })), jsx(ModalFooter, null, jsx(CancelButton, {
    onCancel: onCancel,
    getAnalyticsPayload: getCancelButtonAnalyticsPayload,
    testId: 'asset-datasource-modal--cancel-button'
  }), jsx(Button, {
    appearance: "primary",
    onClick: onInsertPressed,
    isDisabled: isDisabled,
    testId: 'assets-datasource-modal--insert-button'
  }, jsx(FormattedMessage, _extends({}, isEditingExistingTable ? modalMessages.updateObjectsButtonText : modalMessages.insertIssuesButtonText, {
    values: {
      objectsCount: responseItems.length
    }
  })))))));
};
const analyticsContextAttributes = {
  dataProvider: 'jsm-assets'
};
const analyticsContextData = {
  ...componentMetadata.configModal,
  source: 'datasourceConfigModal'
};
const contextData = {
  ...analyticsContextData,
  attributes: {
    ...analyticsContextAttributes
  }
};
export const AssetsConfigModalOld = withAnalyticsContext(contextData)(props => jsx(StoreContainer, null, jsx(DatasourceExperienceIdProvider, null, jsx(UserInteractionsProvider, null, jsx(PlainAssetsConfigModal, props)))));