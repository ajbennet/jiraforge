/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import { FormattedMessage } from 'react-intl-next';
import Avatar from '@atlaskit/avatar';
import AvatarGroup from '@atlaskit/avatar-group';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { WidthObserver } from '@atlaskit/width-detector';
import { userTypeMessages } from './messages';
const userWrapperStyles = xcss({
  display: 'flex',
  alignItems: 'center',
  font: 'font.body'
});
const avatarWrapperStyles = xcss({
  marginRight: 'space.100'
});
const widthObserverWrapperStyles = xcss({
  position: 'relative'
});
const labelWrapperStyles = css({
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  overflow: 'hidden'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
const AvatarGroupWrapperStyles = styled.div({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  ul: {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    paddingLeft: '0px !important'
  }
});
const getMaxUserCount = (userCount, availableWidth) => {
  if (availableWidth <= 28) {
    // If width is less than or equal to 28px, we should only display the user count
    return 1;
  }
  const defaultMaxCount = 5;
  const usersNumFitToAvailableWidth = Math.ceil((availableWidth - 28) / 20);
  return usersNumFitToAvailableWidth > defaultMaxCount ? defaultMaxCount : usersNumFitToAvailableWidth;
};
export const USER_TYPE_TEST_ID = 'link-datasource-render-type--user';
const UserType = ({
  users
}) => {
  const [width, setWidth] = useState(null);
  let multipleUsers = false;
  if (fg('platform-datasources-enable-two-way-sync-assignee')) {
    multipleUsers = users.length === 1;
  } else {
    multipleUsers = users.length <= 1;
  }
  if (multipleUsers) {
    const {
      avatarSource,
      avatarSize = 'small',
      displayName,
      testId = USER_TYPE_TEST_ID,
      children
    } = users[0] || {};
    return jsx(Box, {
      xcss: userWrapperStyles,
      testId: testId
    }, jsx(Box, {
      xcss: avatarWrapperStyles
    }, jsx(Avatar, {
      appearance: "circle",
      size: avatarSize || 'small',
      src: avatarSource,
      testId: `${testId}--avatar`
    })), jsx("span", {
      css: labelWrapperStyles
    }, children || displayName || jsx(FormattedMessage, userTypeMessages.userDefaultdisplayNameValue)));
  } else {
    const maxCount = width !== null ? getMaxUserCount(users.length, width) : 5;
    const data = users.filter(user => !!user.displayName).map(({
      atlassianUserId,
      displayName,
      avatarSource,
      testId
    }) => ({
      key: atlassianUserId,
      name: displayName,
      src: avatarSource,
      testId: `${testId}--avatar`
    }));
    return jsx(AvatarGroupWrapperStyles, null, jsx(Box, {
      xcss: widthObserverWrapperStyles
    }, jsx(WidthObserver, {
      setWidth: setWidth
    })), jsx(AvatarGroup, {
      data: data,
      maxCount: maxCount,
      size: "small",
      isTooltipDisabled: true,
      testId: USER_TYPE_TEST_ID
    }));
  }
};
export default UserType;