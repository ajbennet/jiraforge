/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N40 } from '@atlaskit/theme/colors';
import { AccessRequired } from '../../../common/error-state/access-required';
import { ModalLoadingError } from '../../../common/error-state/modal-loading-error';
import { NoResults } from '../../../common/error-state/no-results';
import { EmptyStateOld, IssueLikeDataTableViewOld, scrollableContainerShadowsCssComponents } from '../../../issue-like-table/issue-like-table-old';
import { InitialStateView } from './initial-state-view';
export const MODAL_HEIGHT = 420;

// This is to prevent y scrollbar when showing table loading state
const disableOverflowStyles = css({
  overflow: 'hidden'
});
const contentContainerStyles = css({
  height: MODAL_HEIGHT,
  display: 'grid',
  overflow: 'auto'
});
const tableBordersStyles = css({
  border: `1px solid ${`var(--ds-border, ${N40})`}`,
  borderTopLeftRadius: "var(--ds-border-radius-200, 8px)",
  borderTopRightRadius: "var(--ds-border-radius-200, 8px)",
  borderBottom: `2px solid ${`var(--ds-background-accent-gray-subtler, ${N40})`}`,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundImage: scrollableContainerShadowsCssComponents.backgroundImage,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundRepeat: scrollableContainerShadowsCssComponents.backgroundRepeat,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundSize: scrollableContainerShadowsCssComponents.backgroundSize,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundAttachment: scrollableContainerShadowsCssComponents.backgroundAttachment
});
const RejectedView = () => jsx("div", {
  css: [contentContainerStyles]
}, jsx(ModalLoadingError, null));
const UnauthorizedView = () => jsx("div", {
  css: [contentContainerStyles]
}, jsx(AccessRequired, null));
const EmptyView = () => jsx("div", {
  css: [contentContainerStyles]
}, jsx(InitialStateView, null));
const NoResultsView = () => jsx("div", {
  css: [contentContainerStyles]
}, jsx(NoResults, null));
const LoadingView = () => jsx("div", {
  css: [contentContainerStyles, contentContainerStyles, tableBordersStyles, disableOverflowStyles]
}, jsx(EmptyStateOld, {
  testId: "assets-aql-datasource-modal--loading-state"
}));
export const RenderAssetsContentOld = props => {
  const {
    status,
    responseItems,
    responseItemIds,
    visibleColumnKeys,
    onNextPage,
    hasNextPage,
    loadDatasourceDetails,
    columns,
    defaultVisibleColumnKeys,
    onVisibleColumnKeysChange,
    isFetchingInitialData
  } = props;
  const resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  const issueLikeDataTableView = useMemo(() => jsx("div", {
    css: [contentContainerStyles, tableBordersStyles]
  }, jsx(IssueLikeDataTableViewOld, {
    testId: "asset-datasource-table",
    status: status,
    columns: columns,
    items: responseItems,
    itemIds: responseItemIds,
    hasNextPage: hasNextPage,
    visibleColumnKeys: visibleColumnKeys || defaultVisibleColumnKeys,
    onNextPage: onNextPage,
    onLoadDatasourceDetails: loadDatasourceDetails,
    onVisibleColumnKeysChange: onVisibleColumnKeysChange
  })), [columns, defaultVisibleColumnKeys, hasNextPage, loadDatasourceDetails, onNextPage, onVisibleColumnKeysChange, responseItems, responseItemIds, status, visibleColumnKeys]);
  const renderAssetsContentView = useCallback(() => {
    if (isFetchingInitialData) {
      // Placing this check first as it's a priority before all others
      return jsx(LoadingView, null);
    } else if (status === 'rejected') {
      return jsx(RejectedView, null);
    } else if (status === 'unauthorized') {
      return jsx(UnauthorizedView, null);
    } else if (status === 'empty') {
      return jsx(EmptyView, null);
    } else if (resolvedWithNoResults) {
      return jsx(NoResultsView, null);
    } else if (status === 'loading' && !columns.length) {
      return jsx(LoadingView, null);
    }
    return issueLikeDataTableView;
  }, [columns.length, isFetchingInitialData, issueLikeDataTableView, resolvedWithNoResults, status]);
  return renderAssetsContentView();
};