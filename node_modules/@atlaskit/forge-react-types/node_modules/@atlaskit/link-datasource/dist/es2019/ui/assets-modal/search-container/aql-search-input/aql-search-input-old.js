import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { LoadingButton } from '@atlaskit/button';
import { ErrorMessage, Field } from '@atlaskit/form';
import CrossCircleIcon from '@atlaskit/icon/core/migration/cross-circle';
import QuestionCircleIcon from '@atlaskit/icon/core/migration/question-circle';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import CheckCircleIcon from '@atlaskit/icon/core/migration/success--check-circle';
import Spinner from '@atlaskit/spinner';
import Textfield from '@atlaskit/textfield';
import { G300, N500, R400 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { useValidateAqlText } from '../../../../hooks/useValidateAqlText';
import { aqlKey } from '../../../../types/assets/types';
import { FieldContainer } from '../styled-old';
import { searchInputMessages } from './messages';
const buttonBaseStyles = css({
  display: 'flex',
  height: '100%',
  position: 'relative',
  alignItems: 'center',
  justifyContent: 'center',
  flexDirection: 'column',
  marginRight: "var(--ds-space-100, 0.5em)"
});
const AQLSupportDocumentLink = 'https://support.atlassian.com/jira-service-management-cloud/docs/use-assets-query-language-aql/';
const searchButtonStyles = css({
  marginRight: "var(--ds-space-075, 6px)"
});
const renderValidatorIcon = lastValidationResult => {
  if (lastValidationResult.type === 'loading') {
    return jsx(Spinner, {
      size: "medium",
      testId: "assets-datasource-modal--aql-validating"
    });
  }
  if (lastValidationResult.type === 'invalid') {
    return jsx(CrossCircleIcon, {
      label: "label",
      color: `var(--ds-icon-danger, ${R400})`,
      LEGACY_size: "medium",
      testId: "assets-datasource-modal--aql-invalid",
      spacing: "spacious"
    });
  }
  if (lastValidationResult.type === 'valid') {
    return jsx(CheckCircleIcon, {
      label: "label",
      color: `var(--ds-icon-success, ${G300})`,
      LEGACY_size: "medium",
      testId: "assets-datasource-modal--aql-valid",
      spacing: "spacious"
    });
  }
  return jsx(SearchIcon, {
    label: "label",
    LEGACY_size: "medium",
    testId: "assets-datasource-modal--aql-idle",
    color: "currentColor",
    spacing: "spacious"
  });
};
export const AqlSearchInputOld = ({
  value,
  workspaceId,
  testId = 'assets-datasource-modal--aql-search-input',
  isSearching
}) => {
  const {
    formatMessage
  } = useIntl();
  const {
    debouncedValidation,
    lastValidationResult
  } = useValidateAqlText(workspaceId, value);
  return jsx(FieldContainer, null, jsx(Field, {
    name: aqlKey,
    defaultValue: value,
    validate: debouncedValidation
  }, ({
    fieldProps
  }) => jsx(Fragment, null, jsx(Textfield, _extends({}, fieldProps, {
    elemBeforeInput: jsx("span", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: {
        paddingLeft: "var(--ds-space-075, 6px)",
        width: 24,
        display: 'flex'
      }
    }, renderValidatorIcon(lastValidationResult)),
    elemAfterInput: jsx(Fragment, null, jsx(Tooltip, {
      content: formatMessage(searchInputMessages.helpTooltipText),
      position: "bottom"
    }, jsx("a", {
      href: AQLSupportDocumentLink,
      target: "_blank",
      css: buttonBaseStyles
    }, jsx(QuestionCircleIcon, {
      label: "label",
      color: `var(--ds-icon, ${N500})`,
      LEGACY_size: "medium",
      testId: "assets-datasource-modal-help",
      spacing: "spacious"
    }))), jsx(LoadingButton, {
      appearance: "primary",
      css: searchButtonStyles,
      iconBefore: jsx(SearchIcon, {
        label: formatMessage(searchInputMessages.placeholder),
        LEGACY_size: "medium",
        color: "currentColor",
        spacing: "spacious"
      }),
      isLoading: isSearching,
      spacing: "none",
      testId: "assets-datasource-modal--aql-search-button",
      type: "submit",
      isDisabled: lastValidationResult.type !== 'valid'
    })),
    placeholder: formatMessage(searchInputMessages.placeholder),
    testId: testId
  })), lastValidationResult.type === 'invalid' && lastValidationResult.error && jsx(ErrorMessage, null, lastValidationResult.error))));
};