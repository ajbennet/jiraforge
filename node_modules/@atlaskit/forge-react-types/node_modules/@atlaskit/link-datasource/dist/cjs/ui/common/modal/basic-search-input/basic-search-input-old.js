"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasicSearchInputOld = void 0;
var _react = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _button = require("@atlaskit/button");
var _searchEditorSearch = _interopRequireDefault(require("@atlaskit/icon/core/migration/search--editor-search"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _analytics = require("../../../../analytics");
var _messages = require("./messages");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var searchButtonStyles = (0, _react.css)({
  marginRight: "var(--ds-space-075, 6px)"
});
var formStyles = (0, _react.css)({
  flex: 1
});
var formWithMaxWidthStyles = (0, _react.css)({
  flex: 1,
  maxWidth: 250
});
var BasicSearchInputOld = exports.BasicSearchInputOld = function BasicSearchInputOld(_ref) {
  var isDisabled = _ref.isDisabled,
    isSearching = _ref.isSearching,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch,
    searchTerm = _ref.searchTerm,
    fullWidth = _ref.fullWidth,
    testId = _ref.testId,
    placeholder = _ref.placeholder;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var handleSearchWithAnalytics = function handleSearchWithAnalytics() {
    fireEvent('ui.form.submitted.basicSearch', {});
    onSearch(searchTerm);
  };
  var handleFormSubmit = function handleFormSubmit(e) {
    e.preventDefault();
    handleSearchWithAnalytics();
  };
  return (0, _react.jsx)("form", {
    css: fullWidth ? formStyles : formWithMaxWidthStyles,
    onSubmit: handleFormSubmit
  }, (0, _react.jsx)(_textfield.default, {
    elemAfterInput: (0, _react.jsx)(_button.LoadingButton, {
      appearance: "primary",
      css: searchButtonStyles,
      iconBefore: (0, _react.jsx)(_searchEditorSearch.default, {
        label: formatMessage((0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? _messages.basicSearchInputMessages.basicTextSearchLabelIssueTermRefresh : _messages.basicSearchInputMessages.basicTextSearchLabel),
        LEGACY_size: "medium",
        color: "currentColor",
        spacing: "spacious"
      }),
      isDisabled: isDisabled,
      isLoading: isSearching,
      onClick: handleSearchWithAnalytics,
      spacing: "none",
      testId: "".concat(testId, "--basic-search-button")
    }),
    autoFocus: true,
    onChange: onChange,
    placeholder: formatMessage(placeholder),
    testId: "".concat(testId, "--basic-search-input"),
    value: searchTerm,
    "aria-label": formatMessage(placeholder)
  }));
};