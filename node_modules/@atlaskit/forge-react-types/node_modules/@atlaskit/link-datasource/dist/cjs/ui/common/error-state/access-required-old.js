"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccessRequiredOld = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _emptyState = _interopRequireDefault(require("@atlaskit/empty-state"));
var _primitives = require("@atlaskit/primitives");
var _colors = require("@atlaskit/theme/colors");
var _typography = require("@atlaskit/theme/typography");
var _analytics = require("../../../analytics");
var _accessRequiredSvg = require("./access-required-svg");
var _messages = require("./messages");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var urlStyles = (0, _react2.css)({
  color: "var(--ds-text-subtlest, ".concat(_colors.N400, ")"),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  font: "var(--ds-font-body, ".concat(_typography.fontFallback.body.medium, ")")
});
var descriptionMessageStyles = (0, _react2.css)({
  display: 'flex',
  flexDirection: 'column',
  gap: "var(--ds-space-200, 16px)"
});
var iconContainerStyles = (0, _primitives.xcss)({
  marginBottom: 'space.200'
});
var Description = function Description(_ref) {
  var message = _ref.message,
    url = _ref.url;
  return (0, _react2.jsx)("div", {
    css: descriptionMessageStyles
  }, (0, _react2.jsx)("span", {
    css: urlStyles
  }, url), (0, _react2.jsx)("span", null, message));
};
var IconContainer = function IconContainer() {
  return (0, _react2.jsx)(_primitives.Box, {
    xcss: iconContainerStyles
  }, (0, _react2.jsx)(_accessRequiredSvg.AccessRequiredSVGOld, null));
};
var AccessRequiredOld = exports.AccessRequiredOld = function AccessRequiredOld(_ref2) {
  var url = _ref2.url;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  (0, _react.useEffect)(function () {
    fireEvent('ui.error.shown', {
      reason: 'access'
    });
  }, [fireEvent]);
  if (url) {
    return (0, _react2.jsx)(_emptyState.default, {
      testId: "datasource--access-required-with-url",
      header: formatMessage(_messages.loadingErrorMessages.accessRequiredWithSite),
      description: (0, _react2.jsx)(Description, {
        message: formatMessage(_messages.loadingErrorMessages.accessInstructions),
        url: url
      }),
      renderImage: IconContainer
    });
  }
  return (0, _react2.jsx)(_emptyState.default, {
    testId: "datasource--access-required",
    header: formatMessage(_messages.loadingErrorMessages.accessRequired),
    description: formatMessage(_messages.loadingErrorMessages.accessInstructions),
    renderImage: IconContainer
  });
};