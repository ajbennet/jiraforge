/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TableSearchCountExported = exports.AssetsItemCountNew = exports.AssetsItemCount = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _heading = _interopRequireDefault(require("@atlaskit/heading"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _linkUrl = _interopRequireDefault(require("@atlaskit/smart-card/link-url"));
var _colors = require("@atlaskit/theme/colors");
var _messages = require("../../../table-footer/messages");
var _messages2 = require("./messages");
var _searchCountOld = _interopRequireWildcard(require("./search-count-old"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  searchCountStyles: "_16jlkb7n _1o9zkb7n _i0dlf1ug"
};
var ItemCountWrapper = function ItemCountWrapper(_ref) {
  var url = _ref.url,
    children = _ref.children,
    testId = _ref.testId;
  return /*#__PURE__*/_react.default.createElement(_compiled.Flex, {
    testId: testId,
    xcss: styles.searchCountStyles,
    alignItems: "center"
  }, /*#__PURE__*/_react.default.createElement(_linkUrl.default, {
    href: url,
    target: "_blank",
    testId: "item-count-url"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      color: "var(--ds-text-accent-gray, ".concat(_colors.N800, ")"),
      textDecoration: !url ? 'none' : ''
    }
  }, /*#__PURE__*/_react.default.createElement(_heading.default, {
    size: "xxsmall"
  }, children)));
};
var AssetsItemCountNew = exports.AssetsItemCountNew = function AssetsItemCountNew(_ref2) {
  var searchCount = _ref2.searchCount,
    url = _ref2.url,
    testId = _ref2.testId;
  var capCount = searchCount >= 1000;
  var displayCount = capCount ? 1000 : searchCount;
  var countModifier = capCount ? '+' : '';
  return /*#__PURE__*/_react.default.createElement(ItemCountWrapper, {
    testId: testId,
    url: url
  }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedNumber, {
    value: displayCount
  }), countModifier, ' ', /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages.footerMessages.itemText, {
    values: {
      itemCount: searchCount
    }
  })));
};
var AssetsItemCount = exports.AssetsItemCount = function AssetsItemCount(props) {
  if ((0, _platformFeatureFlags.fg)('bandicoots-compiled-migration-link-datasource')) {
    return /*#__PURE__*/_react.default.createElement(AssetsItemCountNew, props);
  } else {
    return /*#__PURE__*/_react.default.createElement(_searchCountOld.AssetsItemCountOld, props);
  }
};
var TableSearchCount = function TableSearchCount(_ref3) {
  var url = _ref3.url,
    searchCount = _ref3.searchCount,
    _ref3$testId = _ref3.testId,
    testId = _ref3$testId === void 0 ? 'datasource-table-total-results-count' : _ref3$testId,
    _ref3$prefixTextType = _ref3.prefixTextType,
    prefixTextType = _ref3$prefixTextType === void 0 ? 'issue' : _ref3$prefixTextType;
  var isIssue = prefixTextType === 'issue';
  var messageKey = isIssue && (0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? 'issueCountTextIssueTermRefresh' : "".concat(prefixTextType, "CountText");
  return /*#__PURE__*/_react.default.createElement(ItemCountWrapper, {
    testId: testId,
    url: url
  }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages2.searchCountMessages[messageKey], {
    values: {
      searchCount: searchCount
    }
  })));
};
var TableSearchCountExported = exports.TableSearchCountExported = function TableSearchCountExported(props) {
  if ((0, _platformFeatureFlags.fg)('bandicoots-compiled-migration-link-datasource')) {
    return /*#__PURE__*/_react.default.createElement(TableSearchCount, props);
  } else {
    return /*#__PURE__*/_react.default.createElement(_searchCountOld.default, props);
  }
};
var _default = exports.default = TableSearchCountExported;