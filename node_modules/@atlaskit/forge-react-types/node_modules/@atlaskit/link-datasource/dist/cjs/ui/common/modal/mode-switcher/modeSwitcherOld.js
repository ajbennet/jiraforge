"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModeSwitcherOld = exports.DatasourceViewModeDropDown = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _colors = require("@atlaskit/theme/colors");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _types = require("../../../../analytics/types");
var _userInteractions = require("../../../../contexts/user-interactions");
var _displayViewDropDown = require("../display-view-dropdown/display-view-drop-down");
var _useViewModeContext2 = require("./useViewModeContext");
/* eslint-disable @atlaskit/design-system/use-tokens-typography */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var modeSwitcherStyles = (0, _react2.css)({
  alignItems: 'center',
  background: "var(--ds-background-neutral, ".concat(_colors.N20, ")"),
  borderRadius: "var(--ds-space-050, 4px)",
  boxSizing: 'border-box',
  display: 'inline-flex',
  gap: "var(--ds-space-050, 4px)",
  padding: "var(--ds-space-050, 4px)",
  '&:disabled': {
    opacity: '0.5'
  },
  marginLeft: "var(--ds-space-250, 20px)"
});
var compactModeSwitcherStyles = (0, _react2.css)({
  padding: "var(--ds-space-050, 4px)",
  gap: "var(--ds-space-025, 2px)"
});
var modeInputStyles = (0, _react2.css)({
  display: 'none'
});
var modeSwitcherLabelStyles = (0, _react2.css)({
  color: "var(--ds-text-subtlest, ".concat(_colors.N700, ")"),
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  textTransform: 'uppercase',
  padding: "var(--ds-space-050, 4px)",
  borderRadius: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    cursor: 'pointer',
    backgroundColor: "var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30A, ")")
  }
});
var modeSwitcherLabelSelectedStyles = (0, _react2.css)({
  backgroundColor: "var(--ds-background-input-pressed, ".concat(_colors.N0, ")"),
  borderRadius: "var(--ds-space-050, 4px)",
  boxShadow: "var(--ds-shadow-overflow, 0px 0px 1px rgba(9, 30, 66, 0.12), 0px 0px 8px rgba(9, 30, 66, 0.16))",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    cursor: 'pointer',
    backgroundColor: "var(--ds-background-input-pressed, ".concat(_colors.N0, ")")
  }
});
var modeSwitcherLabelDisabledStyles = (0, _react2.css)({
  color: "var(--ds-text-disabled, ".concat(_colors.N60, ")")
});
var modeSwitcherDisabledStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    cursor: 'not-allowed',
    background: 'transparent'
  }
});
var compactModeSwitcherLabelStyles = (0, _react2.css)({
  padding: "var(--ds-space-025, 2px)".concat(" ", "var(--ds-space-050, 4px)")
});
var ModeSwitcherOld = exports.ModeSwitcherOld = function ModeSwitcherOld(props) {
  var _options$;
  var isCompact = props.isCompact,
    isDisabled = props.isDisabled,
    onOptionValueChange = props.onOptionValueChange,
    options = props.options,
    _props$selectedOption = props.selectedOptionValue,
    selectedOptionValue = _props$selectedOption === void 0 ? (_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.value : _props$selectedOption;
  var handleModeChange = function handleModeChange(event) {
    onOptionValueChange(event.currentTarget.value);
  };
  return options.length > 0 ? (0, _react2.jsx)("fieldset", {
    css: [modeSwitcherStyles, isCompact && compactModeSwitcherStyles],
    "data-testid": "mode-toggle-container",
    disabled: isDisabled
  }, options.map(function (_ref) {
    var value = _ref.value,
      label = _ref.label,
      isOptionDisabled = _ref.disabled,
      tooltipText = _ref.tooltipText;
    var isSelected = value === selectedOptionValue;
    return (0, _react2.jsx)(_tooltip.default, {
      key: value,
      content: tooltipText
    }, function (tooltipProps) {
      return (0, _react2.jsx)("label", (0, _extends2.default)({}, tooltipProps, {
        key: value,
        css: [modeSwitcherLabelStyles, isCompact && compactModeSwitcherLabelStyles, isSelected && modeSwitcherLabelSelectedStyles, isDisabled && modeSwitcherDisabledStyles, isOptionDisabled && [modeSwitcherLabelDisabledStyles, modeSwitcherDisabledStyles]],
        "data-testid": "mode-toggle-".concat(value)
      }), label, (0, _react2.jsx)("input", {
        "aria-checked": isSelected,
        "aria-disabled": isOptionDisabled,
        checked: isSelected,
        css: modeInputStyles,
        disabled: isOptionDisabled,
        onChange: handleModeChange,
        type: "radio",
        value: value
      }));
    });
  })) : null;
};
var DatasourceViewModeDropDown = exports.DatasourceViewModeDropDown = function DatasourceViewModeDropDown() {
  var userInteractions = (0, _userInteractions.useUserInteractions)();
  var _useViewModeContext = (0, _useViewModeContext2.useViewModeContext)(),
    currentViewMode = _useViewModeContext.currentViewMode,
    setCurrentViewMode = _useViewModeContext.setCurrentViewMode,
    disableDisplayDropdown = _useViewModeContext.disableDisplayDropdown;
  if (disableDisplayDropdown) {
    return null;
  }
  var handleViewModeChange = function handleViewModeChange(selectedMode) {
    userInteractions.add(_types.DatasourceAction.DISPLAY_VIEW_CHANGED);
    setCurrentViewMode(selectedMode);
  };
  return (0, _react2.jsx)(_displayViewDropDown.DisplayViewDropDown, {
    onViewModeChange: handleViewModeChange,
    viewMode: currentViewMode
  });
};