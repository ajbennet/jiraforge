"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlainConfluenceSearchConfigModalOld = exports.ConfluenceSearchConfigModalOld = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _intlMessagesProvider = require("@atlaskit/intl-messages-provider");
var _modalDialog = require("@atlaskit/modal-dialog");
var _primitives = require("@atlaskit/primitives");
var _analytics = require("../../../analytics");
var _types = require("../../../analytics/types");
var _fetchMessagesForLocale = require("../../../common/utils/locale/fetch-messages-for-locale");
var _userInteractions = require("../../../contexts/user-interactions");
var _en = _interopRequireDefault(require("../../../i18n/en"));
var _useAvailableSites2 = require("../../../services/useAvailableSites");
var _state = require("../../../state");
var _accessRequired = require("../../common/error-state/access-required");
var _modalLoadingError = require("../../common/error-state/modal-loading-error");
var _noInstances = require("../../common/error-state/no-instances");
var _noResults = require("../../common/error-state/no-results");
var _initialStateView = require("../../common/initial-state-view");
var _cancelButton = require("../../common/modal/cancel-button");
var _contentContainer = require("../../common/modal/content-container");
var _countViewSmartLink = require("../../common/modal/count-view-smart-link");
var _datasourceContext = require("../../common/modal/datasource-context");
var _datasourceModal = require("../../common/modal/datasource-modal");
var _createDatasourceModal = require("../../common/modal/datasource-modal/createDatasourceModal");
var _datasourcesTableInModalPreview = _interopRequireDefault(require("../../common/modal/datasources-table-in-modal-preview"));
var _insertButton = require("../../common/modal/insert-button");
var _modeSwitcher = require("../../common/modal/mode-switcher");
var _useViewModeContext2 = require("../../common/modal/mode-switcher/useViewModeContext");
var _searchCount = _interopRequireDefault(require("../../common/modal/search-count"));
var _siteSelector = require("../../common/modal/site-selector");
var _issueLikeTable = require("../../issue-like-table");
var _confluenceSearchContainer = _interopRequireDefault(require("../confluence-search-container"));
var _confluenceSearchInitialStateSvgOld = require("./confluence-search-initial-state-svg-old");
var _messages = require("./messages");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /* eslint-disable @atlaskit/platform/ensure-feature-flag-prefix */ /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var inputContainerStyles = (0, _primitives.xcss)({
  alignItems: 'baseline',
  display: 'flex',
  minHeight: '72px'
});
var isValidParameters = function isValidParameters(parameters) {
  return !!(parameters && parameters.cloudId && Object.values(parameters).filter(function (v) {
    return v !== undefined;
  }).length > 1);
};
var PlainConfluenceSearchConfigModalOld = exports.PlainConfluenceSearchConfigModalOld = function PlainConfluenceSearchConfigModalOld(props) {
  var onCancel = props.onCancel,
    urlBeingEdited = props.url,
    overrideParameters = props.overrideParameters;
  var _useViewModeContext = (0, _useViewModeContext2.useViewModeContext)(),
    currentViewMode = _useViewModeContext.currentViewMode;
  var _useDatasourceContext = (0, _datasourceContext.useDatasourceContext)(),
    visibleColumnKeys = _useDatasourceContext.visibleColumnKeys,
    _useDatasourceContext2 = _useDatasourceContext.tableState,
    reset = _useDatasourceContext2.reset,
    status = _useDatasourceContext2.status,
    responseItems = _useDatasourceContext2.responseItems,
    _useDatasourceContext3 = _useDatasourceContext2.extensionKey,
    extensionKey = _useDatasourceContext3 === void 0 ? null : _useDatasourceContext3,
    destinationObjectTypes = _useDatasourceContext2.destinationObjectTypes,
    totalCount = _useDatasourceContext2.totalCount,
    columns = _useDatasourceContext2.columns,
    visibleColumnCount = _useDatasourceContext.visibleColumnCount,
    parameters = _useDatasourceContext.parameters,
    setParameters = _useDatasourceContext.setParameters;
  var _useAvailableSites = (0, _useAvailableSites2.useAvailableSites)('confluence', parameters === null || parameters === void 0 ? void 0 : parameters.cloudId),
    availableSites = _useAvailableSites.availableSites,
    selectedConfluenceSite = _useAvailableSites.selectedSite;

  // analytics related parameters
  var searchCount = (0, _react.useRef)(0);
  var userInteractions = (0, _userInteractions.useUserInteractions)();
  var setParametersWithOverrides = (0, _react.useCallback)(function (setStateAction) {
    if (typeof setStateAction !== 'function') {
      setParameters(_objectSpread(_objectSpread({}, setStateAction), {}, {
        cloudId: (setStateAction === null || setStateAction === void 0 ? void 0 : setStateAction.cloudId) || ''
      }, overrideParameters));
    } else {
      setParameters(function (prev) {
        return _objectSpread(_objectSpread(_objectSpread({}, prev), {}, {
          cloudId: (prev === null || prev === void 0 ? void 0 : prev.cloudId) || ''
        }, setStateAction(prev)), overrideParameters);
      });
    }
  }, [setParameters, overrideParameters]);
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var hasNoConfluenceSites = availableSites && availableSites.length === 0;
  (0, _react.useEffect)(function () {
    if (availableSites) {
      fireEvent('ui.modal.ready.datasource', {
        instancesCount: availableSites.length,
        schemasCount: null
      });
    }
  }, [fireEvent, availableSites]);

  // TODO: further refactoring in EDM-9573
  // https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/82725/overview?commentId=6828283
  (0, _react.useEffect)(function () {
    if (selectedConfluenceSite && (!(parameters !== null && parameters !== void 0 && parameters.cloudId) || (parameters === null || parameters === void 0 ? void 0 : parameters.cloudId) !== selectedConfluenceSite.cloudId)) {
      /**
       * This code is primarily to set the cloudId in the parameters when the site selector loads a default value
       * but there is no "onChange" emitted from the site picker
       */
      setParameters(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          cloudId: selectedConfluenceSite.cloudId
        });
      });
    }
  }, [parameters, setParameters, selectedConfluenceSite]);

  // TODO: further refactoring in EDM-9573
  // https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/82725/overview?commentId=6829171
  var onSiteSelection = (0, _react.useCallback)(function (site) {
    userInteractions.add(_types.DatasourceAction.INSTANCE_UPDATED);

    /**
     * Clear the state of the form filters when the site is changed
     */
    setParameters(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        searchString: undefined,
        lastModified: undefined,
        lastModifiedFrom: undefined,
        lastModifiedTo: undefined,
        contributorAccountIds: undefined,
        cloudId: site.cloudId
      });
    });
    reset({
      shouldForceRequest: true
    });
  }, [reset, setParameters, userInteractions]);
  var siteSelectorLabel = availableSites && availableSites.length > 1 ? _messages.confluenceSearchModalMessages.insertIssuesTitleManySites : _messages.confluenceSearchModalMessages.insertIssuesTitle;
  var resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  var hasConfluenceSearchParams = selectedConfluenceSite && (parameters === null || parameters === void 0 ? void 0 : parameters.searchString);
  var selectedConfluenceSiteUrl = selectedConfluenceSite === null || selectedConfluenceSite === void 0 ? void 0 : selectedConfluenceSite.url;
  var confluenceSearchUrl = (0, _react.useMemo)(function () {
    var _parameters$contribut;
    if (!selectedConfluenceSiteUrl || (parameters === null || parameters === void 0 ? void 0 : parameters.searchString) === undefined) {
      return undefined;
    }
    var params = new URLSearchParams();
    // we are appending "text" without checking searchString as we need the url to have "text" when a user does an empty search)
    params.append('text', (parameters === null || parameters === void 0 ? void 0 : parameters.searchString) || '');
    if (parameters !== null && parameters !== void 0 && (_parameters$contribut = parameters.contributorAccountIds) !== null && _parameters$contribut !== void 0 && _parameters$contribut.length) {
      params.append('contributors', parameters.contributorAccountIds.join(','));
    }
    if (parameters !== null && parameters !== void 0 && parameters.lastModified) {
      params.append('lastModified', parameters.lastModified);
    }
    if (parameters !== null && parameters !== void 0 && parameters.lastModifiedFrom) {
      params.append('from', parameters.lastModifiedFrom);
    }
    if (parameters !== null && parameters !== void 0 && parameters.lastModifiedTo) {
      params.append('to', parameters.lastModifiedTo);
    }
    return "".concat(selectedConfluenceSiteUrl, "/wiki/search?").concat(params.toString());
  }, [parameters, selectedConfluenceSiteUrl]);
  var analyticsPayload = (0, _react.useMemo)(function () {
    return {
      extensionKey: extensionKey,
      destinationObjectTypes: destinationObjectTypes,
      searchCount: searchCount.current,
      actions: userInteractions.get()
    };
  }, [destinationObjectTypes, extensionKey, userInteractions]);
  var isDataReady = (visibleColumnKeys || []).length > 0;
  var fireInlineViewedEvent = (0, _react.useCallback)(function () {
    fireEvent('ui.link.viewed.count', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchMethod: _types.DatasourceSearchMethod.DATASOURCE_SEARCH_QUERY,
      totalItemCount: totalCount || 0
    }));
  }, [analyticsPayload, fireEvent, totalCount]);
  var fireTableViewedEvent = (0, _react.useCallback)(function () {
    if (isDataReady) {
      fireEvent('ui.table.viewed.datasourceConfigModal', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
        totalItemCount: totalCount || 0,
        searchMethod: _types.DatasourceSearchMethod.DATASOURCE_SEARCH_QUERY,
        displayedColumnCount: visibleColumnCount.current
      }));
    }
  }, [isDataReady, fireEvent, analyticsPayload, totalCount, visibleColumnCount]);
  (0, _react.useEffect)(function () {
    var isResolved = status === 'resolved';
    var isTableViewMode = currentViewMode === 'table';
    var isInlineViewMode = currentViewMode === 'inline';
    if (!isResolved) {
      return;
    }
    if (isTableViewMode) {
      fireTableViewedEvent();
    } else if (isInlineViewMode) {
      fireInlineViewedEvent();
    }
  }, [currentViewMode, fireInlineViewedEvent, fireTableViewedEvent, status]);
  var renderTableModalContent = (0, _react.useCallback)(function () {
    if (status === 'rejected') {
      return (0, _react2.jsx)(_modalLoadingError.ModalLoadingError, null);
    } else if (status === 'unauthorized') {
      return (0, _react2.jsx)(_accessRequired.AccessRequired, {
        url: selectedConfluenceSiteUrl || urlBeingEdited
      });
    } else if (resolvedWithNoResults || status === 'forbidden') {
      return (0, _react2.jsx)(_noResults.NoResults, null);
    } else if (status === 'empty' || !columns.length) {
      // persist the empty state when making the initial /data request which contains the columns
      if (hasConfluenceSearchParams !== undefined) {
        return (0, _react2.jsx)(_issueLikeTable.EmptyState, {
          testId: "confluence-search-datasource-modal--empty-state"
        });
      }
      return (0, _react2.jsx)(_contentContainer.ContentContainer, null, (0, _react2.jsx)(_initialStateView.InitialStateView, {
        icon: (0, _react2.jsx)(_confluenceSearchInitialStateSvgOld.ConfluenceSearchInitialStateSVGOld, null),
        title: _messages.confluenceSearchModalMessages.initialViewSearchTitle,
        description: _messages.confluenceSearchModalMessages.initialViewSearchDescription
      }));
    }
    return (0, _react2.jsx)(_contentContainer.ContentContainer, {
      withTableBorder: true
    }, (0, _react2.jsx)(_datasourcesTableInModalPreview.default, {
      testId: "confluence-search-datasource-table"
    }));
  }, [columns.length, selectedConfluenceSiteUrl, resolvedWithNoResults, status, urlBeingEdited, hasConfluenceSearchParams]);
  var renderInlineLinkModalContent = (0, _react.useCallback)(function () {
    if (status === 'unauthorized') {
      return (0, _react2.jsx)(_accessRequired.AccessRequired, {
        url: selectedConfluenceSiteUrl || urlBeingEdited
      });
    } else if (status === 'empty' || !selectedConfluenceSiteUrl) {
      return (0, _react2.jsx)(_countViewSmartLink.SmartCardPlaceholder, {
        placeholderText: _messages.confluenceSearchModalMessages.resultsCountSmartCardPlaceholderText
      });
    } else {
      return confluenceSearchUrl && (0, _react2.jsx)(_countViewSmartLink.SmartLink, {
        url: confluenceSearchUrl
      });
    }
  }, [confluenceSearchUrl, selectedConfluenceSiteUrl, status, urlBeingEdited]);
  var shouldShowResultsCount = !!totalCount && currentViewMode === 'table';
  var onSearch = (0, _react.useCallback)(function (newSearchString, filters) {
    searchCount.current++;
    userInteractions.add(_types.DatasourceAction.QUERY_UPDATED);
    if (filters) {
      var editedOrCreatedBy = filters.editedOrCreatedBy,
        lastModifiedList = filters.lastModified;
      if (lastModifiedList) {
        var updatedDateRangeOption = lastModifiedList.find(function (range) {
          return range.value;
        });
        if ((updatedDateRangeOption === null || updatedDateRangeOption === void 0 ? void 0 : updatedDateRangeOption.optionType) === 'dateRange') {
          setParametersWithOverrides(function (prev) {
            return _objectSpread(_objectSpread({}, prev), {}, {
              lastModified: updatedDateRangeOption.value,
              lastModifiedFrom: updatedDateRangeOption.from,
              lastModifiedTo: updatedDateRangeOption.to
            });
          });
        }
      }
      if (editedOrCreatedBy) {
        var accountIds = editedOrCreatedBy.map(function (user) {
          return user.value;
        });
        setParametersWithOverrides(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            contributorAccountIds: accountIds
          });
        });
      }
    }
    setParametersWithOverrides(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        searchString: newSearchString
      });
    });
    reset({
      shouldForceRequest: true
    });
  }, [reset, userInteractions, setParametersWithOverrides]);
  var getButtonAnalyticsPayload = (0, _react.useCallback)(function () {
    return {
      extensionKey: extensionKey,
      destinationObjectTypes: destinationObjectTypes,
      searchCount: searchCount.current,
      actions: userInteractions.get()
    };
  }, [destinationObjectTypes, extensionKey, userInteractions]);
  return (0, _react2.jsx)(_intlMessagesProvider.IntlMessagesProvider, {
    defaultMessages: _en.default,
    loaderFn: _fetchMessagesForLocale.fetchMessagesForLocale
  }, (0, _react2.jsx)(_datasourceModal.DatasourceModal, {
    testId: "confluence-search-datasource-modal",
    onClose: onCancel
  }, (0, _react2.jsx)(_modalDialog.ModalHeader, null, (0, _react2.jsx)(_modalDialog.ModalTitle, null, (0, _react2.jsx)(_siteSelector.SiteSelector, {
    availableSites: availableSites,
    onSiteSelection: onSiteSelection,
    selectedSite: selectedConfluenceSite,
    testId: "confluence-search-datasource-modal--site-selector",
    label: siteSelectorLabel
  })), !hasNoConfluenceSites && (0, _react2.jsx)(_modeSwitcher.DatasourceViewModeDropDown, null)), (0, _react2.jsx)(_modalDialog.ModalBody, null, !hasNoConfluenceSites ? (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_primitives.Box, {
    xcss: inputContainerStyles
  }, (0, _react2.jsx)(_confluenceSearchContainer.default, {
    isSearching: status === 'loading',
    onSearch: onSearch,
    parameters: parameters !== null && parameters !== void 0 ? parameters : {
      cloudId: ''
    }
  })), currentViewMode === 'inline' ? renderInlineLinkModalContent() : renderTableModalContent()) : (0, _react2.jsx)(_noInstances.NoInstancesView, {
    title: _messages.confluenceSearchModalMessages.noAccessToConfluenceSitesTitle,
    description: _messages.confluenceSearchModalMessages.noAccessToConfluenceSitesDescription,
    testId: 'no-confluence-instances-content'
  })), (0, _react2.jsx)(_modalDialog.ModalFooter, null, shouldShowResultsCount && confluenceSearchUrl && (0, _react2.jsx)(_searchCount.default, {
    searchCount: totalCount,
    url: confluenceSearchUrl,
    prefixTextType: "result",
    testId: "confluence-search-datasource-modal-total-results-count"
  }), (0, _react2.jsx)(_cancelButton.CancelButton, {
    onCancel: onCancel,
    getAnalyticsPayload: getButtonAnalyticsPayload,
    testId: "confluence-search-modal--cancel-button"
  }), !hasNoConfluenceSites && (0, _react2.jsx)(_insertButton.InsertButton, {
    testId: "confluence-search-datasource-modal--insert-button",
    url: confluenceSearchUrl,
    getAnalyticsPayload: getButtonAnalyticsPayload
  }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.confluenceSearchModalMessages.insertResultsButtonText)))));
};
var ConnectedConfluenceSearchConfigModal = (0, _createDatasourceModal.createDatasourceModal)({
  isValidParameters: isValidParameters,
  dataProvider: 'confluence-search',
  component: PlainConfluenceSearchConfigModalOld
});
var ConfluenceSearchConfigModalOld = exports.ConfluenceSearchConfigModalOld = function ConfluenceSearchConfigModalOld(props) {
  return (0, _react2.jsx)(_state.StoreContainer, null, (0, _react2.jsx)(ConnectedConfluenceSearchConfigModal, (0, _extends2.default)({}, props, {
    /**
     * If the intial parameters are not valid, we will not initialise the modal state
     * with `overrideParameters`. This is to allow the modal to be opened without
     * any initial parameters and require the user to perform a search.
     */
    parameters: props.overrideParameters && isValidParameters(props.parameters) ? _objectSpread(_objectSpread({}, props.parameters), props.overrideParameters) : props.parameters
  })));
};