"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DraggableTableHeadingOld = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _reactIntlNext = require("react-intl-next");
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _dropdownMenu = _interopRequireWildcard(require("@atlaskit/dropdown-menu"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _chevronUp = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-up"));
var _closestEdge = require("@atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge");
var _box = require("@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box");
var _combine = require("@atlaskit/pragmatic-drag-and-drop/combine");
var _adapter = require("@atlaskit/pragmatic-drag-and-drop/element/adapter");
var _disableNativeDragPreview = require("@atlaskit/pragmatic-drag-and-drop/element/disable-native-drag-preview");
var _pointerOutsideOfPreview = require("@atlaskit/pragmatic-drag-and-drop/element/pointer-outside-of-preview");
var _setCustomNativeDragPreview = require("@atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview");
var _preventUnhandled = require("@atlaskit/pragmatic-drag-and-drop/prevent-unhandled");
var _analytics = require("../../analytics");
var _customIcons = require("./custom-icons");
var _messages = require("./messages");
var _styled2 = require("./styled");
var _utils = require("./utils");
var _excluded = ["triggerRef"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var DropdownParent = _styled.default.div({
  display: 'flex',
  alignItems: 'center',
  whiteSpace: 'nowrap',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '& button': {
    textAlign: 'left' /* By default button center in the middle without props to control it */,
    height: 'auto' /* By default button is not happy with tall (up to lines in our case) content */,
    paddingBlock: "var(--ds-space-0, 0px)",
    paddingLeft: "var(--ds-space-0, 0px)" /* By default button's padding left and right is 8 + 4. We control that 8, so left with 4 that we need.  */,
    paddingRight: "var(--ds-space-0, 0px)"
  }
});
var dropTargetStyles = (0, _react2.css)({
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%'
});
var noPointerEventsStyles = (0, _react2.css)({
  pointerEvents: 'none'
});
var resizerStyles = (0, _react2.css)({
  '--local-hitbox-width': "var(--ds-space-300, 24px)",
  width: 'var(--local-hitbox-width)',
  cursor: 'col-resize',
  flexGrow: '0',
  position: 'absolute',
  zIndex: 1,
  // we want this to sit on top of adjacent column headers
  right: 'calc(-1 * calc(var(--local-hitbox-width) / 2))',
  top: 0,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '::before': {
    opacity: 0,
    '--local-line-width': "var(--ds-border-width, 2px)",
    content: '""',
    position: 'absolute',
    background: "var(--ds-border-brand, #0052CC)",
    width: 'var(--local-line-width)',
    inset: 0,
    left: "calc(50% - calc(var(--local-line-width) / 2))",
    transition: 'opacity 0.2s ease'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover::before': {
    opacity: 1
  }
});
var resizingStyles = (0, _react2.css)({
  // turning off the resizing cursor as sometimes it can cause the cursor to flicker
  // while resizing. The browser controls the cursor while dragging, but the browser
  // can sometimes bug out.
  cursor: 'unset',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '::before': {
    opacity: 1
  }
});
var idleState = {
  type: 'idle'
};
var draggingState = {
  type: 'dragging'
};
var DraggableTableHeadingOld = exports.DraggableTableHeadingOld = function DraggableTableHeadingOld(_ref) {
  var children = _ref.children,
    id = _ref.id,
    index = _ref.index,
    tableId = _ref.tableId,
    dndPreviewHeight = _ref.dndPreviewHeight,
    dragPreview = _ref.dragPreview,
    width = _ref.width,
    onWidthChange = _ref.onWidthChange,
    isWrapped = _ref.isWrapped,
    onIsWrappedChange = _ref.onIsWrappedChange;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var mainHeaderCellRef = (0, _react.useRef)(null);
  var columnResizeHandleRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(idleState),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isDraggingAnyColumn = _useState4[0],
    setIsDraggingAnyColumn = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    closestEdge = _useState6[0],
    setClosestEdge = _useState6[1];
  var dropTargetRef = (0, _react.useRef)(null);
  /**
   * When width is not set (or callback is not set) we assume not resizing is needed.
   * In our case width won't be set for last cell when table container is bigger than sum of all columns
   */
  var resizeIsEnabled = !!onWidthChange && !!width;
  (0, _react.useEffect)(function () {
    var cell = mainHeaderCellRef.current;
    (0, _tinyInvariant.default)(cell);
    return (0, _combine.combine)((0, _adapter.draggable)({
      element: cell,
      getInitialData: function getInitialData() {
        return {
          type: 'table-header',
          id: id,
          index: index,
          tableId: tableId
        };
      },
      onGenerateDragPreview: function onGenerateDragPreview(_ref2) {
        var nativeSetDragImage = _ref2.nativeSetDragImage;
        (0, _setCustomNativeDragPreview.setCustomNativeDragPreview)({
          getOffset: (0, _pointerOutsideOfPreview.pointerOutsideOfPreview)({
            x: '18px',
            y: '18px'
          }),
          render: function render(_ref3) {
            var container = _ref3.container;
            // Cause a `react` re-render to create your portal synchronously
            setState({
              type: 'preview',
              container: container
            });
            // In our cleanup function: cause a `react` re-render to create remove your portal
            // Note: you can also remove the portal in `onDragStart`,
            // which is when the cleanup function is called
            return function () {
              return setState(draggingState);
            };
          },
          nativeSetDragImage: nativeSetDragImage
        });
      },
      onDragStart: function onDragStart() {
        setState(draggingState);
      },
      onDrop: function onDrop() {
        setState(idleState);
      }
    }));
  }, [id, index, tableId]);

  // Here we handle drop target, that in our case is absolutely positioned div that covers full width and height
  // of this column (has height of whole table). It sits on top of everything, but has `pointerEvents: 'none'` by default
  (0, _react.useEffect)(function () {
    var dropTarget = dropTargetRef.current;
    (0, _tinyInvariant.default)(dropTarget);
    return (0, _adapter.dropTargetForElements)({
      element: dropTarget,
      getIsSticky: function getIsSticky() {
        return true;
      },
      getData: function getData(_ref4) {
        var input = _ref4.input,
          element = _ref4.element;
        var data = {
          id: id,
          index: index
        };
        return (0, _closestEdge.attachClosestEdge)(data, {
          input: input,
          element: element,
          allowedEdges: ['left', 'right']
        });
      },
      canDrop: function canDrop(args) {
        return args.source.data.type === 'table-header' && args.source.data.tableId === tableId;
      },
      onDrag: function onDrag(args) {
        if (args.source.data.id !== id) {
          setClosestEdge((0, _closestEdge.extractClosestEdge)(args.self.data));
        }
      },
      onDragLeave: function onDragLeave() {
        setClosestEdge(null);
      },
      onDrop: function onDrop() {
        setClosestEdge(null);
      }
    });
  }, [id, index, tableId]);

  // During dragging anywhere we want to remove `pointerEvents: 'none'` from all the drop targets
  (0, _react.useEffect)(function () {
    return (0, _adapter.monitorForElements)({
      canMonitor: function canMonitor(_ref5) {
        var source = _ref5.source;
        return source.data.type === 'table-header' && source.data.tableId === tableId;
      },
      onDragStart: function onDragStart() {
        /**
         * Should cause a synchronous re-render.
         */
        setIsDraggingAnyColumn(true);
      },
      onDrop: function onDrop() {
        setIsDraggingAnyColumn(false);
      }
    });
  }, [tableId]);

  // Handling column resizing
  (0, _react.useEffect)(function () {
    if (!resizeIsEnabled) {
      return;
    }
    var resizeHandle = columnResizeHandleRef.current;
    (0, _tinyInvariant.default)(resizeHandle);
    var mainHeaderCell = mainHeaderCellRef.current;
    (0, _tinyInvariant.default)(mainHeaderCell);
    return (0, _adapter.draggable)({
      element: resizeHandle,
      getInitialData: function getInitialData() {
        // metadata related to currently dragging item (can be read by drop events etc)
        return {
          type: 'column-resize',
          id: id,
          index: index,
          tableId: tableId
        };
      },
      // Is called when dragging started
      onGenerateDragPreview: function onGenerateDragPreview(_ref6) {
        var nativeSetDragImage = _ref6.nativeSetDragImage;
        // We don't show any preview, since column separator (handle) is moving with the cursor
        (0, _disableNativeDragPreview.disableNativeDragPreview)({
          nativeSetDragImage: nativeSetDragImage
        });
        // Block drag operations outside `@atlaskit/pragmatic-drag-and-drop`
        _preventUnhandled.preventUnhandled.start();
        setState({
          type: 'resizing',
          initialWidth: width
        });
      },
      onDrag: function onDrag(_ref7) {
        var location = _ref7.location;
        var relativeDistanceX = location.current.input.clientX - location.initial.input.clientX;
        (0, _tinyInvariant.default)(state.type === 'resizing');
        var initialWidth = state.initialWidth;

        // Set the width of our header being resized
        var proposedWidth = initialWidth + relativeDistanceX;
        if (proposedWidth < (0, _utils.getColumnMinWidth)(id)) {
          proposedWidth = (0, _utils.getColumnMinWidth)(id);
        }

        // We update width css directly live
        mainHeaderCell.style.setProperty('width', "".concat(proposedWidth, "px"));
      },
      onDrop: function onDrop() {
        _preventUnhandled.preventUnhandled.stop();
        setState(idleState);
        if (onWidthChange) {
          var cssWidth = +mainHeaderCell.style.getPropertyValue('width').slice(0, -2);
          onWidthChange(cssWidth);
        }
      }
    });
  }, [id, index, onWidthChange, resizeIsEnabled, state, tableId, width]);
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    buttonHovered = _useState8[0],
    setButtonHovered = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isDropdownOpen = _useState10[0],
    setIsDropdownOpen = _useState10[1];
  // Width is not set when it is a last cell in a wide table.
  // We make assumption thus that there is enough width for chevron.
  var isWideEnoughToHaveChevron = !width || width > 76;
  var shouldShowTriggerIcon = (buttonHovered || isDropdownOpen) && isWideEnoughToHaveChevron;
  var triggerIcon = (0, _react.useMemo)(function () {
    return shouldShowTriggerIcon ? isDropdownOpen ? _chevronUp.default : _chevronDown.default : isWideEnoughToHaveChevron ? _customIcons.GlyphPlaceholder : undefined;
  }, [shouldShowTriggerIcon, isDropdownOpen, isWideEnoughToHaveChevron]);
  var getTriggerButton = (0, _react.useCallback)(function (_ref8) {
    var triggerRef = _ref8.triggerRef,
      props = (0, _objectWithoutProperties2.default)(_ref8, _excluded);
    return (0, _react2.jsx)(_new.default, (0, _extends2.default)({}, props, {
      testId: "".concat(id, "-column-dropdown"),
      shouldFitContainer: true,
      iconAfter: triggerIcon,
      ref: triggerRef,
      appearance: "subtle",
      spacing: "compact",
      onMouseEnter: function onMouseEnter() {
        return setButtonHovered(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setButtonHovered(false);
      }
    }), children);
  }, [children, id, triggerIcon]);
  var onDropdownOpenChange = (0, _react.useCallback)(function (_ref9) {
    var isOpen = _ref9.isOpen;
    return setIsDropdownOpen(isOpen);
  }, []);
  var toggleWrap = (0, _react.useCallback)(function () {
    if (!onIsWrappedChange) {
      return;
    }
    var nextIsWrap = !(isWrapped || false);
    if (nextIsWrap) {
      fireEvent('ui.button.clicked.wrap', {});
    } else {
      fireEvent('ui.button.clicked.unwrap', {});
    }
    onIsWrappedChange(nextIsWrap);
  }, [fireEvent, isWrapped, onIsWrappedChange]);
  return (0, _react2.jsx)(_styled2.TableHeading, {
    ref: mainHeaderCellRef,
    "data-testid": "".concat(id, "-column-heading"),
    style: _objectSpread({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      cursor: 'grab'
    }, (0, _utils.getWidthCss)({
      shouldUseWidth: resizeIsEnabled,
      width: width
    }))
  }, resizeIsEnabled ? (0, _react2.jsx)("div", {
    ref: columnResizeHandleRef,
    css: [resizerStyles, state.type === 'resizing' && resizingStyles],
    style: {
      height: "".concat(dndPreviewHeight, "px")
    },
    "data-testid": "column-resize-handle"
  }) : null, onIsWrappedChange ? (0, _react2.jsx)(DropdownParent, null, (0, _react2.jsx)(_dropdownMenu.default, {
    trigger: getTriggerButton,
    onOpenChange: onDropdownOpenChange,
    placement: 'bottom'
  }, (0, _react2.jsx)(_dropdownMenu.DropdownItem, {
    elemBefore: isWrapped ? (0, _react2.jsx)(_customIcons.UnwrapTextIcon, null) : (0, _react2.jsx)(_customIcons.WrapTextIcon, null),
    testId: "".concat(id, "-column-dropdown-item-toggle-wrapping"),
    onClick: toggleWrap
  }, isWrapped ? (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.issueLikeTableMessages.unwrapText) : (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _messages.issueLikeTableMessages.wrapText)))) : children, (0, _react2.jsx)("div", {
    ref: dropTargetRef,
    css: [dropTargetStyles, isDraggingAnyColumn ? null : noPointerEventsStyles],
    style: {
      height: "".concat(dndPreviewHeight, "px")
    },
    "data-testid": 'column-drop-target'
  }, closestEdge && (0, _react2.jsx)(_box.DropIndicator, {
    edge: closestEdge
  })), state.type === 'preview' ? /*#__PURE__*/_reactDom.default.createPortal(dragPreview, state.container) : null);
};