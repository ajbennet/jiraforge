"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("@emotion/react");
var _linkingCommon = require("@atlaskit/linking-common");
var _colors = require("@atlaskit/theme/colors");
var _styled = require("../styled");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var SkeletonComponent = function SkeletonComponent(_ref) {
  var width = _ref.width,
    itemName = _ref.itemName;
  return (0, _react.jsx)(_linkingCommon.Skeleton, {
    borderRadius: "var(--ds-border-radius-100, 8px)",
    testId: "".concat(itemName, "-empty-state-skeleton"),
    height: 14,
    width: width
  });
};
var tableBodyStyles = (0, _react.css)({
  borderBottom: 0
});
var tableStyles = (0, _react.css)({
  background: "var(--ds-elevation-surface-current, #FFF)"
});
var padding = "var(--ds-space-100, 8px)".concat(" ", "var(--ds-space-100, 8px)");
var cellStyles = (0, _react.css)({
  padding: padding,
  borderRight: "0.5px solid ".concat("var(--ds-border, ".concat(_colors.N40, ")")),
  borderBottom: "0.5px solid ".concat("var(--ds-border, ".concat(_colors.N40, ")")),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&:first-child': {
    paddingLeft: "var(--ds-space-100, 8px)"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&:last-child': {
    borderRight: 0,
    paddingRight: "var(--ds-space-100, 8px)"
  }
});
var baseColumns = [{
  key: 'type',
  width: 35
}, {
  key: 'issue',
  width: 50
}, {
  key: 'summary',
  width: 100
}, {
  key: 'assignee',
  width: 70
}, {
  key: 'priority',
  width: 60
}, {
  key: 'status',
  width: 60
}, {
  key: 'resolution',
  width: 55
}, {
  key: 'created',
  width: 50
}, {
  key: 'due',
  width: 50
}];
var longColumnWidths = [141, 208, 186, 212, 212, 151, 212, 182, 180, 163, 172, 211, 145, 190];
var shortColumnWidths = [75, 54, 66, 73, 52, 73, 55, 80, 67, 76, 58, 65, 56, 76];
var renderItem = function renderItem(_ref2, _ref3) {
  var key = _ref2.key,
    width = _ref2.width;
  var longWidth = _ref3.longWidth,
    shortWidth = _ref3.shortWidth;
  switch (key) {
    case 'status':
      return (0, _react.jsx)(SkeletonComponent, {
        width: shortWidth,
        itemName: key
      });
    case 'summary':
      return (0, _react.jsx)(SkeletonComponent, {
        width: longWidth,
        itemName: key
      });
    default:
      return (0, _react.jsx)(SkeletonComponent, {
        width: width,
        itemName: key
      });
  }
};
var _default = exports.default = function _default(_ref4) {
  var isCompact = _ref4.isCompact,
    testId = _ref4.testId;
  var columnsToRender = isCompact ? baseColumns.slice(0, 6) : baseColumns;
  // if it is compact (non-modal), there is room for 14 rows
  // if it is modal (not compact), there is only room for 10 rows
  var rowsNumber = isCompact ? 14 : 10;
  var rows = new Array(rowsNumber).fill(null).map(function (_, index) {
    return {
      id: index,
      longWidth: longColumnWidths[index],
      shortWidth: shortColumnWidths[index]
    };
  });
  return (0, _react.jsx)("div", {
    style: {
      // the IssueLikeDataTableView wraps the table in a container with the styling below while modal doesn't
      // this maxHeight comes from scrollableContainerHeight
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      maxHeight: _styled.ScrollableContainerHeight,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      padding: "var(--ds-space-0, 0px)",
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      boxSizing: 'border-box'
    }
  }, (0, _react.jsx)("table", {
    css: tableStyles,
    "data-testid": testId
  }, (0, _react.jsx)("thead", {
    style: {
      borderBottom: 0
    }
  }, (0, _react.jsx)("tr", null, columnsToRender.map(function (_ref5) {
    var key = _ref5.key,
      width = _ref5.width;
    return (
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      (0, _react.jsx)(_styled.TableHeading, {
        key: key,
        style: {
          width: width,
          padding: padding
        }
      }, (0, _react.jsx)(_linkingCommon.Skeleton, {
        appearance: "darkGray",
        borderRadius: 8,
        testId: "empty-state-skeleton",
        height: 12,
        width: width
      }))
    );
  }))), (0, _react.jsx)("tbody", {
    css: tableBodyStyles
  }, rows.map(function (row) {
    return (0, _react.jsx)("tr", {
      key: row.id
    }, columnsToRender.map(function (column) {
      return (0, _react.jsx)("td", {
        css: cellStyles,
        key: column.key
      }, renderItem(column, row));
    }));
  }))));
};