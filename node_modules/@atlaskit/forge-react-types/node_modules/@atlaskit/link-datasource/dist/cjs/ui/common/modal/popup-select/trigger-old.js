"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LoadingStateAnimationWrapper = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _badge = _interopRequireDefault(require("@atlaskit/badge"));
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _primitives = require("@atlaskit/primitives");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var triggerButtonLabelStyles = (0, _primitives.xcss)({
  textOverflow: 'ellipsis',
  overflow: 'hidden'
});
var badgeStyles = (0, _primitives.xcss)({
  marginLeft: 'space.050'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var LoadingStateAnimationWrapper = exports.LoadingStateAnimationWrapper = _styled.default.div({
  position: 'relative',
  animation: 'flickerAnimation 2s infinite',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '@keyframes flickerAnimation': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '0%': {
      opacity: 1
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '50%': {
      opacity: 0.5
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '100%': {
      opacity: 1
    }
  }
});
var PopupTrigger = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var isSelected = _ref.isSelected,
    isDisabled = _ref.isDisabled,
    isLoading = _ref.isLoading,
    selectedOptions = _ref.selectedOptions,
    testId = _ref.testId,
    label = _ref.label;
  var _ref2 = selectedOptions || [],
    _ref3 = (0, _slicedToArray2.default)(_ref2, 1),
    firstOption = _ref3[0];
  var hasOptions = selectedOptions && selectedOptions.length > 0;
  var showButtonLoading = !isDisabled && isLoading;
  var triggerButtonTestId = "".concat(testId, "-trigger");
  var LoadingButton = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react.default.createElement(LoadingStateAnimationWrapper, null, /*#__PURE__*/_react.default.createElement(_standardButton.default, {
      iconAfter: /*#__PURE__*/_react.default.createElement(_spinner.default, {
        size: 'xsmall'
      }),
      testId: "".concat(triggerButtonTestId, "--loading-button")
    }, label));
  }, [label, triggerButtonTestId]);
  var DefaultButton = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react.default.createElement(_standardButton.default, {
      appearance: "default",
      isSelected: isSelected || hasOptions,
      isDisabled: isDisabled,
      iconAfter: /*#__PURE__*/_react.default.createElement(_chevronDown.default, {
        label: "",
        color: "currentColor"
      }),
      testId: "".concat(triggerButtonTestId, "--button")
    }, /*#__PURE__*/_react.default.createElement(_primitives.Flex, null, /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      xcss: triggerButtonLabelStyles
    }, label, firstOption && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/_react.default.createElement(_primitives.Flex, {
      xcss: badgeStyles,
      alignItems: "center"
    }, /*#__PURE__*/_react.default.createElement(_badge.default, {
      appearance: "primary"
    }, "+", selectedOptions.length - 1))));
  }, [firstOption, hasOptions, isDisabled, isSelected, label, selectedOptions, triggerButtonTestId]);

  /**
   * We had an issue with the popup component referencing a stale DOM ref for the trigger button.
   * Hence introducing a Box to make sure ref is always the same and only content is refreshed on re-renders
   */
  return /*#__PURE__*/_react.default.createElement(_primitives.Box, {
    ref: ref,
    testId: triggerButtonTestId
  }, showButtonLoading ? /*#__PURE__*/_react.default.createElement(LoadingButton, null) : /*#__PURE__*/_react.default.createElement(DefaultButton, null));
});
var _default = exports.default = PopupTrigger;