"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitialStateViewOld = void 0;
var _react = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _lozenge = _interopRequireDefault(require("@atlaskit/lozenge"));
var _colors = require("@atlaskit/theme/colors");
var _typography = require("@atlaskit/theme/typography");
var _messages = require("./messages");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var initialStateViewContainerStyles = (0, _react.css)({
  display: 'flex',
  justifyContent: 'center',
  height: '100%'
});
var svgAndTextsWrapperStyles = (0, _react.css)({
  textAlign: 'center',
  alignSelf: 'center',
  paddingTop: "var(--ds-space-600, 48px)",
  paddingBottom: "var(--ds-space-600, 48px)"
});
var betaTagStyles = (0, _react.css)({
  display: 'flex'
});
var searchTitleStyles = (0, _react.css)({
  color: "var(--ds-text-subtlest, ".concat(_colors.N300, ")"),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  font: "var(--ds-font-heading-medium, ".concat(_typography.fontFallback.heading.medium, ")"),
  paddingTop: "var(--ds-space-200, 16px)",
  paddingBottom: "var(--ds-space-100, 8px)",
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  gap: "var(--ds-space-100, 8px)"
});
var mainTextStyles = (0, _react.css)({
  color: "var(--ds-text-subtlest, ".concat(_colors.N300, ")")
});
var learnMoreLinkStyles = (0, _react.css)({
  paddingTop: "var(--ds-space-200, 16px)",
  display: 'inline-block'
});
var InitialStateViewOld = exports.InitialStateViewOld = function InitialStateViewOld(_ref) {
  var icon = _ref.icon,
    _ref$showBeta = _ref.showBeta,
    showBeta = _ref$showBeta === void 0 ? false : _ref$showBeta,
    title = _ref.title,
    description = _ref.description,
    learnMoreLink = _ref.learnMoreLink;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  return (0, _react.jsx)("div", {
    css: initialStateViewContainerStyles,
    "data-testid": "datasource-modal--initial-state-view"
  }, (0, _react.jsx)("div", {
    css: svgAndTextsWrapperStyles
  }, icon, (0, _react.jsx)("div", {
    css: searchTitleStyles
  }, showBeta && (0, _react.jsx)("div", {
    css: betaTagStyles
  }, (0, _react.jsx)(_lozenge.default, {
    appearance: "new"
  }, (0, _react.jsx)(_reactIntlNext.FormattedMessage, _messages.initialStateViewMessages.beta))), formatMessage(title)), (0, _react.jsx)("div", {
    css: mainTextStyles
  }, formatMessage(description)), learnMoreLink && (0, _react.jsx)("a", {
    href: learnMoreLink.href,
    target: "_blank",
    css: learnMoreLinkStyles
  }, formatMessage(learnMoreLink.text))));
};