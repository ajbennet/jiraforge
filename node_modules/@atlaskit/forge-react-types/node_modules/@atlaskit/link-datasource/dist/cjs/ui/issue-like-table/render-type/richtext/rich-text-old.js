"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseRichText = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _schemaDefault = require("@atlaskit/adf-schema/schema-default");
var _model = require("@atlaskit/editor-prosemirror/model");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var rootStyles = (0, _react2.css)({
  position: 'relative'
});
var smartLinkNodeToUrl = function smartLinkNodeToUrl(node) {
  var _node$attrs$url;
  return (_node$attrs$url = node.attrs.url) !== null && _node$attrs$url !== void 0 ? _node$attrs$url : '';
};
var schemaSmartLinkOverride = new _model.Schema({
  nodes: _schemaDefault.defaultSchema.spec.nodes.update('inlineCard', _objectSpread(_objectSpread({}, _schemaDefault.defaultSchema.spec.nodes.get('inlineCard')), {}, {
    leafText: smartLinkNodeToUrl
  })).update('blockCard', _objectSpread(_objectSpread({}, _schemaDefault.defaultSchema.spec.nodes.get('blockCard')), {}, {
    leafText: smartLinkNodeToUrl
  })).update('embedCard', _objectSpread(_objectSpread({}, _schemaDefault.defaultSchema.spec.nodes.get('embedCard')), {}, {
    leafText: smartLinkNodeToUrl
  })),
  marks: _schemaDefault.defaultSchema.spec.marks
});
var parseRichText = exports.parseRichText = function parseRichText(value) {
  try {
    if (value.type === 'adf') {
      var adf = JSON.parse(value.text);
      return _model.Node.fromJSON(schemaSmartLinkOverride, _objectSpread(_objectSpread({}, adf), {}, {
        content: (0, _toConsumableArray2.default)(adf.content.slice(0, 2))
      })).textContent;
    }
    return null;
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error('error parsing adf', e);
    return null;
  }
};
var RichTextType = function RichTextType(_ref) {
  var value = _ref.value;
  var adfPlainText = (0, _react.useMemo)(function () {
    return parseRichText(value);
  }, [value]);
  if (adfPlainText) {
    return (0, _react2.jsx)("span", {
      css: rootStyles,
      "data-testid": "richtext-plaintext"
    }, adfPlainText);
  } else {
    return (0, _react2.jsx)("span", {
      "data-testid": "richtext-unsupported"
    });
  }
};
var _default = exports.default = RichTextType;