"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AqlSearchInputOld = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _button = require("@atlaskit/button");
var _form = require("@atlaskit/form");
var _crossCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/cross-circle"));
var _questionCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/question-circle"));
var _searchEditorSearch = _interopRequireDefault(require("@atlaskit/icon/core/migration/search--editor-search"));
var _successCheckCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/success--check-circle"));
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _colors = require("@atlaskit/theme/colors");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _useValidateAqlText2 = require("../../../../hooks/useValidateAqlText");
var _types = require("../../../../types/assets/types");
var _styledOld = require("../styled-old");
var _messages = require("./messages");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var buttonBaseStyles = (0, _react2.css)({
  display: 'flex',
  height: '100%',
  position: 'relative',
  alignItems: 'center',
  justifyContent: 'center',
  flexDirection: 'column',
  marginRight: "var(--ds-space-100, 0.5em)"
});
var AQLSupportDocumentLink = 'https://support.atlassian.com/jira-service-management-cloud/docs/use-assets-query-language-aql/';
var searchButtonStyles = (0, _react2.css)({
  marginRight: "var(--ds-space-075, 6px)"
});
var renderValidatorIcon = function renderValidatorIcon(lastValidationResult) {
  if (lastValidationResult.type === 'loading') {
    return (0, _react2.jsx)(_spinner.default, {
      size: "medium",
      testId: "assets-datasource-modal--aql-validating"
    });
  }
  if (lastValidationResult.type === 'invalid') {
    return (0, _react2.jsx)(_crossCircle.default, {
      label: "label",
      color: "var(--ds-icon-danger, ".concat(_colors.R400, ")"),
      LEGACY_size: "medium",
      testId: "assets-datasource-modal--aql-invalid",
      spacing: "spacious"
    });
  }
  if (lastValidationResult.type === 'valid') {
    return (0, _react2.jsx)(_successCheckCircle.default, {
      label: "label",
      color: "var(--ds-icon-success, ".concat(_colors.G300, ")"),
      LEGACY_size: "medium",
      testId: "assets-datasource-modal--aql-valid",
      spacing: "spacious"
    });
  }
  return (0, _react2.jsx)(_searchEditorSearch.default, {
    label: "label",
    LEGACY_size: "medium",
    testId: "assets-datasource-modal--aql-idle",
    color: "currentColor",
    spacing: "spacious"
  });
};
var AqlSearchInputOld = exports.AqlSearchInputOld = function AqlSearchInputOld(_ref) {
  var value = _ref.value,
    workspaceId = _ref.workspaceId,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'assets-datasource-modal--aql-search-input' : _ref$testId,
    isSearching = _ref.isSearching;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useValidateAqlText = (0, _useValidateAqlText2.useValidateAqlText)(workspaceId, value),
    debouncedValidation = _useValidateAqlText.debouncedValidation,
    lastValidationResult = _useValidateAqlText.lastValidationResult;
  return (0, _react2.jsx)(_styledOld.FieldContainer, null, (0, _react2.jsx)(_form.Field, {
    name: _types.aqlKey,
    defaultValue: value,
    validate: debouncedValidation
  }, function (_ref2) {
    var fieldProps = _ref2.fieldProps;
    return (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_textfield.default, (0, _extends2.default)({}, fieldProps, {
      elemBeforeInput: (0, _react2.jsx)("span", {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        style: {
          paddingLeft: "var(--ds-space-075, 6px)",
          width: 24,
          display: 'flex'
        }
      }, renderValidatorIcon(lastValidationResult)),
      elemAfterInput: (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_tooltip.default, {
        content: formatMessage(_messages.searchInputMessages.helpTooltipText),
        position: "bottom"
      }, (0, _react2.jsx)("a", {
        href: AQLSupportDocumentLink,
        target: "_blank",
        css: buttonBaseStyles
      }, (0, _react2.jsx)(_questionCircle.default, {
        label: "label",
        color: "var(--ds-icon, ".concat(_colors.N500, ")"),
        LEGACY_size: "medium",
        testId: "assets-datasource-modal-help",
        spacing: "spacious"
      }))), (0, _react2.jsx)(_button.LoadingButton, {
        appearance: "primary",
        css: searchButtonStyles,
        iconBefore: (0, _react2.jsx)(_searchEditorSearch.default, {
          label: formatMessage(_messages.searchInputMessages.placeholder),
          LEGACY_size: "medium",
          color: "currentColor",
          spacing: "spacious"
        }),
        isLoading: isSearching,
        spacing: "none",
        testId: "assets-datasource-modal--aql-search-button",
        type: "submit",
        isDisabled: lastValidationResult.type !== 'valid'
      })),
      placeholder: formatMessage(_messages.searchInputMessages.placeholder),
      testId: testId
    })), lastValidationResult.type === 'invalid' && lastValidationResult.error && (0, _react2.jsx)(_form.ErrorMessage, null, lastValidationResult.error));
  }));
};