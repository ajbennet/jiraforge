"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _useId = require("@atlaskit/ds-lib/use-id");
var _focusRing = _interopRequireDefault(require("@atlaskit/focus-ring"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _avatarImage = _interopRequireDefault(require("./avatar-image"));
var _constants = require("./constants");
var _context = require("./context");
var _presence = require("./presence");
var _status = require("./status");
var _utilities = require("./utilities");
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var packageName = "@atlaskit/avatar";
var packageVersion = "21.18.4";
var getTestId = function getTestId(testId, children) {
  return !children ? {
    'data-testid': "".concat(testId, "--inner")
  } : {
    testId: "".concat(testId, "--inner")
  };
};

// eslint-disable-next-line @repo/internal/react/consistent-types-definitions

var getStyles = function getStyles(css, _ref) {
  var size = _ref.size,
    radius = _ref.radius,
    appearance = _ref.appearance,
    _ref$borderColor = _ref.borderColor,
    borderColor = _ref$borderColor === void 0 ? (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? "var(--ds-surface, #FFFFFF)" : "var(--ds-surface-overlay, ".concat(_colors.N0, ")") : _ref$borderColor,
    stackIndex = _ref.stackIndex,
    isInteractive = _ref.isInteractive,
    isDisabled = _ref.isDisabled;
  return (//eslint-disable-next-line @repo/internal/react/no-css-string-literals
    css(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\t\theight: ", "px;\n\t\twidth: ", "px;\n\t\talign-items: stretch;\n\t\tbackground-color: ", ";\n\t\tborder-radius: ", ";\n\t\tbox-sizing: content-box;\n\t\tcursor: inherit;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\toutline: none;\n\t\toverflow: hidden;\n\t\tposition: static;\n\t\ttransform: translateZ(0);\n\t\ttransition:\n\t\t\ttransform 200ms,\n\t\t\topacity 200ms;\n\t\tbox-shadow: 0 0 0 ", "px ", ";\n\t\tborder: none;\n\t\tmargin: ", ";\n\t\tpadding: ", ";\n\n\t\t&::-moz-focus-inner {\n\t\t\tborder: 0;\n\t\t\tmargin: ", ";\n\t\t\tpadding: ", ";\n\t\t}\n\n\t\t&::after {\n\t\t\tbackground-color: transparent;\n\t\t\tinset: 0px;\n\n\t\t\t/* Added border-radius style to fix hover issue in safari */\n\t\t\tborder-radius: ", ";\n\t\t\tcontent: ' ';\n\t\t\topacity: 0;\n\t\t\tpointer-events: none;\n\t\t\tposition: absolute;\n\t\t\ttransition: opacity 200ms;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t:focus-visible {\n\t\t\tbox-shadow: none;\n\t\t}\n\n\t\t", "\n\n\t\t", "\n\n    ", "\n\t"])), size, size, borderColor, appearance === 'circle' ? '50%' : "".concat(radius, "px"), _constants.BORDER_WIDTH, borderColor, "var(--ds-space-025, 2px)", "var(--ds-space-0, 0px)", "var(--ds-space-0, 0px)", "var(--ds-space-0, 0px)", appearance === 'circle' ? '50%' : "".concat(radius, "px"), stackIndex && "position: relative;", isInteractive && "\n      cursor: pointer;\n\n      :hover {\n        &::after {\n          background-color: ".concat("var(--ds-interaction-hovered, ".concat(_colors.N70A, ")"), ";\n          opacity: 1;\n        }\n      }\n\n      :active {\n        &::after {\n          background-color: ", "var(--ds-interaction-pressed, ".concat(_colors.N70A, ")"), ";\n          opacity: 1;\n        }\n      }\n\n      :active {\n        transform: scale(", _constants.ACTIVE_SCALE_FACTOR, ");\n      }\n\n      @media screen and (forced-colors: active) {\n        &:focus-visible {\n          outline: 1px solid\n        }\n      }\n    "), isDisabled && "\n        cursor: not-allowed;\n\n        &::after {\n          opacity: ".concat("var(--ds-opacity-disabled, 0.7)", ";\n          pointer-events: none;\n          background-color: ", "var(--ds-surface, ".concat(_colors.N0, ")"), ";\n        }\n      "))
  );
};

/**
 * __Avatar__
 *
 * An avatar is a visual representation of a user or entity.
 *
 * - [Examples](https://atlassian.design/components/avatar/examples)
 * - [Code](https://atlassian.design/components/avatar/code)
 * - [Usage](https://atlassian.design/components/avatar/usage)
 */
var Avatar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref2, ref) {
  var _ref3;
  var analyticsContext = _ref2.analyticsContext,
    _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'circle' : _ref2$appearance,
    label = _ref2.label,
    borderColor = _ref2.borderColor,
    children = _ref2.children,
    href = _ref2.href,
    isDisabled = _ref2.isDisabled,
    name = _ref2.name,
    onClick = _ref2.onClick,
    presence = _ref2.presence,
    sizeProp = _ref2.size,
    src = _ref2.src,
    stackIndex = _ref2.stackIndex,
    status = _ref2.status,
    target = _ref2.target,
    testId = _ref2.testId,
    _ref2$as = _ref2.as,
    AvatarContainer = _ref2$as === void 0 ? 'div' : _ref2$as;
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var context = (0, _context.useAvatarContext)();
  var size = (_ref3 = sizeProp !== null && sizeProp !== void 0 ? sizeProp : context === null || context === void 0 ? void 0 : context.size) !== null && _ref3 !== void 0 ? _ref3 : 'medium';
  var customPresenceNode = /*#__PURE__*/(0, _react.isValidElement)(presence) ? presence : null;
  var customStatusNode = /*#__PURE__*/(0, _react.isValidElement)(status) ? status : null;
  var isValidIconSize = size !== 'xxlarge' && size !== 'xsmall';
  var lastAnalytics = (0, _react.useRef)(analyticsContext);
  var labelId = (0, _useId.useId)();
  (0, _react.useEffect)(function () {
    lastAnalytics.current = analyticsContext;
  }, [analyticsContext]);
  var onClickHandler = (0, _react.useCallback)(function (event) {
    if (isDisabled || typeof onClick !== 'function') {
      return;
    }
    var analyticsEvent = createAnalyticsEvent({
      action: 'clicked',
      actionSubject: 'avatar',
      attributes: {
        componentName: 'avatar',
        packageName: packageName,
        packageVersion: packageVersion
      }
    });

    /**
     * To avoid wrapping this component in AnalyticsContext we manually
     * push the parent context's meta data into the context.
     */
    var context = _objectSpread({
      componentName: 'avatar',
      packageName: packageName,
      packageVersion: packageVersion
    }, lastAnalytics.current);
    analyticsEvent.context.push(context);

    /**
     * Replicating the logic in the `withAnalyticsEvents` HOC.
     */
    var clone = analyticsEvent.clone();
    if (clone) {
      clone.fire('atlaskit');
    }
    onClick(event, analyticsEvent);
  }, [createAnalyticsEvent, isDisabled, onClick]);
  var componentProps = function componentProps() {
    if (isDisabled) {
      return {
        disabled: true
      };
    }

    // return only relevant props for either anchor or button elements
    return _objectSpread(_objectSpread({}, href && (0, _utilities.getLinkProps)(href, target)), onClick && !href ? (0, _utilities.getButtonProps)(onClickHandler) : {
      onClick: onClick
    });
  };
  var isPresence = isValidIconSize && presence && !status;
  var isStatus = isValidIconSize && status;

  // add presence or status to the label by default if presence and status are passed as a string
  // if status or presence are nodes this is not added to the label by default
  var defaultLabel = [name, isStatus && !customStatusNode && "(".concat(status, ")"), isPresence && !customPresenceNode && "(".concat(presence, ")")].filter(Boolean).join(' ');
  var isInteractive = onClick || href || isDisabled;
  var containerShouldBeImage = Boolean(!isInteractive && defaultLabel);
  return (0, _react2.jsx)(AvatarContainer, {
    "data-testid": testId,
    role: containerShouldBeImage ? 'img' : undefined,
    "aria-labelledby": containerShouldBeImage ? labelId : undefined,
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      display: 'inline-block',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      position: 'relative',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      outline: 0,
      zIndex: stackIndex
    }
  }, (0, _react2.jsx)(_react2.ClassNames, null, function (_ref4) {
    var css = _ref4.css;
    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      className: getStyles(css, {
        size: _constants.AVATAR_SIZES[size],
        radius: _constants.AVATAR_RADIUS[size],
        appearance: appearance,
        borderColor: borderColor,
        stackIndex: stackIndex,
        isInteractive: Boolean(href || onClick) && !isDisabled,
        isDisabled: isDisabled
      })
    }, componentProps()), testId && getTestId(testId, children)), (isInteractive || children) && {
      'aria-label': label || defaultLabel
    }), {}, {
      children: (0, _react2.jsx)(_avatarImage.default
      // Only pass in the name if an image is provided and the
      // container is not being used as an `img` role
      , {
        alt: !containerShouldBeImage && src ? name : undefined,
        appearance: appearance,
        size: size,
        src: src,
        testId: testId
      }),
      ref: ref
    });
    if (children) {
      return children(props);
    }
    var element = (0, _utilities.getCustomElement)(isDisabled, href, onClick);
    return element === 'a' || element === 'button' ? (0, _react2.jsx)(_focusRing.default, null, /*#__PURE__*/(0, _react.createElement)(element, props)) : ( /*#__PURE__*/(0, _react.createElement)(element, props));
  }), isPresence && (0, _react2.jsx)(_presence.PresenceWrapper, {
    appearance: appearance,
    size: size,
    presence: typeof presence === 'string' ? presence : undefined,
    testId: testId
  }, customPresenceNode), isStatus && (0, _react2.jsx)(_status.StatusWrapper, {
    appearance: appearance,
    size: size,
    borderColor: borderColor,
    status: typeof status === 'string' ? status : undefined,
    testId: testId
  }, customStatusNode), containerShouldBeImage ? (0, _react2.jsx)("span", {
    "data-testid": testId && "".concat(testId, "--label"),
    id: labelId,
    hidden: true
  }, defaultLabel) : undefined);
});
Avatar.displayName = 'Avatar';
var _default = exports.default = Avatar;