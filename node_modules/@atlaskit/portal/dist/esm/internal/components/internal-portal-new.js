import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { Suspense, useState } from 'react';
import { createPortal } from 'react-dom';
import { fg } from '@atlaskit/platform-feature-flags';
import { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect';
import { createAtlaskitPortal, createPortalParent } from '../utils/portal-dom-utils';
export default function InternalPortalNew(props) {
  var zIndex = props.zIndex,
    children = props.children;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    atlaskitPortal = _useState2[0],
    setAtlaskitPortal = _useState2[1];
  useIsomorphicLayoutEffect(function () {
    var tempPortalContainer = createAtlaskitPortal(zIndex);
    setAtlaskitPortal(tempPortalContainer);
    var portalParent = createPortalParent();
    if (!tempPortalContainer || !portalParent) {
      return;
    }
    portalParent.appendChild(tempPortalContainer);
    return function () {
      if (tempPortalContainer) {
        portalParent.removeChild(tempPortalContainer);
      }
      setAtlaskitPortal(null);
    };
  }, [zIndex]);

  /**
   * Conditionally wrap ALL portal children with Suspense behind a feature gate for safe rollout.
   *
   * This is here because in React 18 concurrent, if you suspend from _within_ a portal to a
   * suspense boundary _outside_ a portal, our portal gets in an infinite loop of re-rendering.
   */
  var conditionallySuspendedChildren = fg('platform_design_system_suspend_portal_children') ? /*#__PURE__*/React.createElement(Suspense, {
    fallback: null
  }, children) : children;
  return atlaskitPortal ? /*#__PURE__*/createPortal(conditionallySuspendedChildren, atlaskitPortal) : null;
}