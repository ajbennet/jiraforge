"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InternalPortalNew;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _useIsomorphicLayoutEffect = require("../hooks/use-isomorphic-layout-effect");
var _portalDomUtils = require("../utils/portal-dom-utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function InternalPortalNew(props) {
  var zIndex = props.zIndex,
    children = props.children;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    atlaskitPortal = _useState2[0],
    setAtlaskitPortal = _useState2[1];
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    var tempPortalContainer = (0, _portalDomUtils.createAtlaskitPortal)(zIndex);
    setAtlaskitPortal(tempPortalContainer);
    var portalParent = (0, _portalDomUtils.createPortalParent)();
    if (!tempPortalContainer || !portalParent) {
      return;
    }
    portalParent.appendChild(tempPortalContainer);
    return function () {
      if (tempPortalContainer) {
        portalParent.removeChild(tempPortalContainer);
      }
      setAtlaskitPortal(null);
    };
  }, [zIndex]);

  /**
   * Conditionally wrap ALL portal children with Suspense behind a feature gate for safe rollout.
   *
   * This is here because in React 18 concurrent, if you suspend from _within_ a portal to a
   * suspense boundary _outside_ a portal, our portal gets in an infinite loop of re-rendering.
   */
  var conditionallySuspendedChildren = (0, _platformFeatureFlags.fg)('platform_design_system_suspend_portal_children') ? /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: null
  }, children) : children;
  return atlaskitPortal ? /*#__PURE__*/(0, _reactDom.createPortal)(conditionallySuspendedChildren, atlaskitPortal) : null;
}