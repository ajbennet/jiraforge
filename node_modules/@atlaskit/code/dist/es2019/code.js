import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { forwardRef, memo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import CodeBidiWarning from './bidi-warning';
import codeBidiWarningDecorator from './bidi-warning/bidi-warning-decorator';
import { VAR_CODE_BG_COLOR } from './internal/theme/constants';
import { getCodeStyles } from './internal/theme/styles';
const styles = css({
  display: 'inline',
  padding: '2px 0.5ch',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundColor: `var(${VAR_CODE_BG_COLOR}, ${"var(--ds-background-neutral, #091E420F)"})`,
  borderRadius: "var(--ds-border-radius, 3px)",
  borderStyle: 'none',
  boxDecorationBreak: 'clone',
  color: "var(--ds-text, #172B4D)",
  font: "var(--ds-font-code, normal 400 0.875em/1 ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: 'inherit',
  overflow: 'auto',
  overflowWrap: 'break-word',
  whiteSpace: 'pre-wrap'
});

/**
 * __Code__
 *
 * Code highlights short strings of code snippets inline with body text.
 *
 * - [Examples](https://atlassian.design/components/code/examples)
 * - [Code](https://atlassian.design/components/code/code)
 * - [Usage](https://atlassian.design/components/code/usage)
 */
const Code = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Code({
  testId,
  ...props
}, ref) {
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix

  const {
    children,
    codeBidiWarnings = true,
    codeBidiWarningLabel,
    codeBidiWarningTooltipEnabled = true,
    ...otherProps
  } = props;
  const decoratedChildren = codeBidiWarnings ? jsx(RenderCodeChildrenWithBidiWarnings, {
    codeBidiWarningLabel: codeBidiWarningLabel,
    codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled
  }, children) : children;
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("code", _extends({
      ref: ref,
      "data-testid": testId,
      css: styles
    }, otherProps), decoratedChildren)
  );
}));
function RenderCodeChildrenWithBidiWarnings({
  children,
  codeBidiWarningLabel,
  codeBidiWarningTooltipEnabled
}) {
  const replacedChildren = React.Children.map(children, childNode => {
    if (typeof childNode === 'string') {
      const decorated = codeBidiWarningDecorator(childNode, ({
        bidiCharacter,
        index
      }) => jsx(CodeBidiWarning, {
        bidiCharacter: bidiCharacter,
        key: index,
        label: codeBidiWarningLabel,
        tooltipEnabled: codeBidiWarningTooltipEnabled
      }));
      return decorated;
    }
    if (isReactElement(childNode) && childNode.props.children) {
      // eslint-disable-next-line @repo/internal/react/no-clone-element
      const newChildNode = /*#__PURE__*/React.cloneElement(childNode, {
        children: jsx(RenderCodeChildrenWithBidiWarnings, {
          codeBidiWarningLabel: codeBidiWarningLabel,
          codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled
        }, childNode.props.children)
      });
      return newChildNode;
    }
    return childNode;
  });
  return jsx(React.Fragment, null, replacedChildren);
}
function isReactElement(child) {
  return !!child.type;
}
Code.displayName = 'Code';
export { getCodeStyles };
export default Code;