import { $onePlus, $or, adfNode } from '@atlaskit/adf-schema-generator';
import { unsupportedMark } from '../marks/unsupportedMark';
import { unsupportedNodeAttribute } from '../marks/unsupportedNodeAttribute';
import { blockquote } from './blockquote';
import { codeBlock } from './codeBlock';
import { decisionList } from './decisionList';
import { extension } from './extension';
import { heading } from './heading';
import { bulletList, orderedList } from './list';
import { mediaGroup } from './mediaGroup';
import { mediaSingle } from './mediaSingle';
import { panel } from './panel';
import { paragraph } from './paragraph';
import { rule } from './rule';
import { taskList } from './task';
import { unsupportedBlock } from './unsupportedBlock';
var nestedExpandContent = [paragraph.use('with_no_marks'), heading.use('with_no_marks'), mediaSingle.use('caption'), mediaSingle.use('full'), mediaGroup, codeBlock, bulletList, orderedList, taskList, decisionList, rule, panel, blockquote, unsupportedBlock];
export var nestedExpand = adfNode('nestedExpand').define({
  isolating: true,
  selectable: true,
  marks: [unsupportedMark, unsupportedNodeAttribute],
  attrs: {
    title: {
      type: 'string',
      default: '',
      optional: true
    },
    __expanded: {
      type: 'boolean',
      default: true,
      optional: true
    }
  },
  content: [$onePlus($or.apply(void 0, nestedExpandContent))],
  DANGEROUS_MANUAL_OVERRIDE: {
    'validator-spec': {
      'props.attrs.optional': {
        remove: true,
        reason: '@DSLCompatibilityException - mismatch with DSL'
      },
      'props.content': {
        value: {
          type: 'array',
          items: [['paragraph_with_no_marks', 'heading_with_no_marks', 'mediaSingle_caption', 'mediaSingle_full', 'mediaGroup', 'codeBlock', 'bulletList', 'orderedList', 'taskList', 'decisionList', 'rule', 'panel', 'blockquote', 'extension_with_marks']],
          minItems: 1,
          allowUnsupportedBlock: true
        },
        reason: '@DSLCompatibilityException - this is to loose the validator ristriction to allow extension to be nested inside nestedExpand'
      },
      required: {
        reason: '@DSLCompatibilityException - required for nestedExpand validator spec',
        value: ['content']
      }
    }
  }
}).variant('content', {
  ignore: ['pm-spec']
}).variant('with_no_marks', {
  marks: [],
  content: [],
  noMarks: true
}).variant('with_non_bodied_macros', {
  marks: [],
  content: [$onePlus($or.apply(void 0, nestedExpandContent.concat([extension.use('with_marks')])))],
  stage0: true,
  noMarks: true,
  noExtend: true
});