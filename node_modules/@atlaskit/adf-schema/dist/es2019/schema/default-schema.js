import memoizeOne from 'memoize-one';
import { extensionFrame, layoutSectionWithSingleColumn, multiBodiedExtension, expandWithNestedExpand, blockquoteWithNestedCodeblockOrMedia, listItemWithDecisionStage0, panelWithBlockquoteStage0, tableWithNestedTable, tableRowWithNestedTable, tableCellWithNestedTable, tableHeaderWithNestedTable, nestedExpandWithNonBodiedMacrosStage0 } from './nodes';
import { createSchema } from './create-schema';
const getDefaultSchemaConfig = () => {
  const defaultSchemaConfig = {
    nodes: ['doc', 'paragraph', 'text', 'bulletList', 'orderedList', 'listItem', 'heading', 'blockquote', 'codeBlock', 'panel', 'rule', 'image', 'caption', 'mention', 'media', 'mediaGroup', 'mediaSingle', 'mediaInline', 'confluenceUnsupportedBlock', 'confluenceUnsupportedInline', 'confluenceJiraIssue', 'expand', 'nestedExpand', 'extension', 'inlineExtension', 'bodiedExtension', 'hardBreak', 'emoji', 'table', 'tableCell', 'tableHeader', 'tableRow', 'decisionList', 'decisionItem', 'taskList', 'taskItem', 'unknownBlock', 'date', 'status', 'placeholder', 'layoutSection', 'layoutColumn', 'inlineCard', 'blockCard', 'embedCard', 'unsupportedBlock', 'unsupportedInline'],
    marks: ['link', 'em', 'strong', 'strike', 'subsup', 'underline', 'code', 'textColor', 'backgroundColor', 'confluenceInlineComment', 'breakout', 'alignment', 'indentation', 'annotation', 'dataConsumer', 'border', 'unsupportedMark', 'unsupportedNodeAttribute', 'typeAheadQuery',
    // https://product-fabric.atlassian.net/browse/ED-10214,
    'fragment']
  };
  return defaultSchemaConfig;
};
export const defaultSchemaConfig = getDefaultSchemaConfig();
export const getSchemaBasedOnStage = memoizeOne((stage = 'final') => {
  const defaultSchemaConfig = getDefaultSchemaConfig();
  if (stage === 'stage0') {
    defaultSchemaConfig.customNodeSpecs = {
      layoutSection: layoutSectionWithSingleColumn,
      multiBodiedExtension: multiBodiedExtension,
      extensionFrame: extensionFrame,
      expand: expandWithNestedExpand,
      blockquote: blockquoteWithNestedCodeblockOrMedia,
      listItem: listItemWithDecisionStage0,
      panel: panelWithBlockquoteStage0(true),
      table: tableWithNestedTable,
      tableRow: tableRowWithNestedTable,
      tableCell: tableCellWithNestedTable,
      tableHeader: tableHeaderWithNestedTable,
      nestedExpand: nestedExpandWithNonBodiedMacrosStage0
    };
  }
  return createSchema(defaultSchemaConfig);
});
export const defaultSchema = getSchemaBasedOnStage();