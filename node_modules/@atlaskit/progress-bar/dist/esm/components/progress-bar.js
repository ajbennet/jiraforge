/* progress-bar.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./progress-bar.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { G300, N40A, N500 } from '@atlaskit/theme/colors';
var MIN_VALUE = 0;
var MAX_VALUE = 1;
var increasingBarAnimation = null;
var decreasingBarAnimation = null;
var containerStyles = null;
var containerAppearance = {
  default: "_bfhk1vi8",
  success: "_bfhk1vi8",
  inverse: "_bfhk18ht"
};
var barAppearance = {
  default: "_bfhk1wby",
  success: "_bfhk1bh5",
  inverse: "_bfhkvuon"
};
var barStyles = null;
var determinateBarStyles = null;
var increasingBarStyles = null;
var decreasingBarStyles = null;

/**
 * __Progress bar__
 *
 * A progress bar displays the status of a given process.
 *
 * - [Examples](https://atlassian.design/components/progress-bar/examples)
 * - [Code](https://atlassian.design/components/progress-bar/code)
 * - [Usage](https://atlassian.design/components/progress-bar/usage)
 */
var ProgressBar = function ProgressBar(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    ariaLabel = _ref.ariaLabel,
    _ref$isIndeterminate = _ref.isIndeterminate,
    isIndeterminate = _ref$isIndeterminate === void 0 ? false : _ref$isIndeterminate,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'progress-bar' : _ref$testId,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? 0 : _ref$value;
  var valueParsed = isIndeterminate ? MIN_VALUE : Math.max(MIN_VALUE, Math.min(value, MAX_VALUE));
  return /*#__PURE__*/React.createElement("div", {
    role: "progressbar",
    "aria-label": ariaLabel,
    "aria-valuemin": MIN_VALUE,
    "aria-valuenow": valueParsed,
    "aria-valuemax": MAX_VALUE,
    tabIndex: 0,
    "data-testid": testId,
    className: ax(["_2rko1sit _1reo15vq _18m915vq _1bsb1osq _4t3ii2wt _kqswh2mm _bfhk1jmj", containerAppearance[appearance]]),
    style: {
      "--_1j2n3rv": ix("var(--ds-background-neutral, ".concat(N40A, ")"))
    }
  }, isIndeterminate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: ax(["_2rko1sit _1e0c1ule _4t3ii2wt _kqswstnw", barAppearance[appearance], "_y44vr5uu"]),
    style: {
      "--_1jqnm6n": ix("".concat(increasingBarAnimation, " 2s infinite"))
    }
  }), /*#__PURE__*/React.createElement("span", {
    className: ax(["_2rko1sit _1e0c1ule _4t3ii2wt _kqswstnw", barAppearance[appearance], "_y44v17o4"]),
    style: {
      "--_1i6k0rf": ix("".concat(decreasingBarAnimation, " 2s 0.5s infinite"))
    }
  })) : /*#__PURE__*/React.createElement("span", {
    style: {
      width: "".concat(Number(value) * 100, "%")
    },
    className: ax(["_2rko1sit _1e0c1ule _4t3ii2wt _kqswstnw", barAppearance[appearance], "_v564calv"])
  }));
};
export default ProgressBar;