"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menu = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@emotion/react");
var _dateFns = require("date-fns");
var _calendar = _interopRequireDefault(require("@atlaskit/calendar"));
var _layering = require("@atlaskit/layering");
var _colors = require("@atlaskit/theme/colors");
var _constants = require("@atlaskit/theme/constants");
var _fixedLayer = _interopRequireDefault(require("../internal/fixed-layer"));
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

/**
 * @param isos A series of ISO dates.
 * @returns The last valid date within the array of ISO strings.
 */
function getValidDate(isos) {
  return isos.reduce(function (acc, iso) {
    var date = (0, _dateFns.parseISO)(iso);
    return (0, _dateFns.isValid)(date) ? {
      day: date.getDate(),
      month: date.getMonth() + 1,
      year: date.getFullYear()
    } : acc;
  }, {});
}
var menuStyles = (0, _react.css)({
  zIndex: _constants.layers.dialog(),
  backgroundColor: "var(--ds-surface-overlay, ".concat(_colors.N0, ")"),
  borderRadius: "var(--ds-border-radius, 3px)",
  boxShadow: "var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(_colors.N50A, ", 0 0 1px ").concat(_colors.N60A), ")"),
  overflow: 'hidden'
});

/**
 * This is the menu used in the select of the date picker.
 */
var Menu = exports.Menu = function Menu(_ref) {
  var selectProps = _ref.selectProps,
    innerProps = _ref.innerProps;
  var calendarValue = selectProps.calendarValue,
    calendarView = selectProps.calendarView;
  var _getValidDate = getValidDate([calendarValue, calendarView]),
    day = _getValidDate.day,
    month = _getValidDate.month,
    year = _getValidDate.year;
  var onMenuMouseDown = function onMenuMouseDown(event) {
    if (event.button !== 0) {
      return;
    }
    event.stopPropagation();
    event.preventDefault();
  };
  return (0, _react.jsx)(_layering.Layering, {
    isDisabled: false
  }, (0, _react.jsx)(_fixedLayer.default, {
    inputValue: selectProps.inputValue,
    containerRef: selectProps.calendarContainerRef,
    content:
    // The mousedown event is required for a date selection to work when
    // the menu is opened via the calendar button. The reason why is
    // because there is a mousedown event on the menu inside of
    // `react-select` that will stop the calendar select event from
    // firing. This is passed in via the `innerProps`. Therefore, we must
    // pass it in *after* the `innerProps` spread.
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _react.jsx)("div", (0, _extends2.default)({
      css: menuStyles
    }, innerProps, {
      onMouseDown: onMenuMouseDown
    }), (0, _react.jsx)(_calendar.default, {
      day: day,
      month: month,
      year: year,
      disabled: selectProps.calendarDisabled,
      disabledDateFilter: selectProps.calendarDisabledDateFilter,
      minDate: selectProps.calendarMinDate,
      maxDate: selectProps.calendarMaxDate,
      nextMonthLabel: selectProps.nextMonthLabel,
      onChange: selectProps.onCalendarChange,
      onSelect: selectProps.onCalendarSelect,
      previousMonthLabel: selectProps.previousMonthLabel,
      ref: selectProps.calendarRef,
      selected: [selectProps.calendarValue],
      shouldSetFocusOnCurrentDay: selectProps.shouldSetFocusOnCurrentDay,
      locale: selectProps.calendarLocale,
      testId: selectProps.testId && "".concat(selectProps.testId, "--calendar"),
      weekStartDay: selectProps.calendarWeekStartDay
    })),
    testId: selectProps.testId
  }));
};