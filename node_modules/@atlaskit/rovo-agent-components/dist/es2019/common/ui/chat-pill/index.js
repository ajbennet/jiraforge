import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { useIntl } from 'react-intl-next';
import AgentIcon from '@atlaskit/icon/core/ai-agent';
import { Box, Inline, Pressable, xcss } from '@atlaskit/primitives';
import { ChatPillIcon } from '../chat-icon';
import messages from './messages';
const conversationStarterPillStyles = xcss({
  color: 'color.text',
  padding: 'space.100',
  border: `1px solid ${"var(--ds-border, #091E4224)"}`,
  borderRadius: 'border.radius.200',
  borderBottomRightRadius: "var(--ds-border-radius-050, 2px)",
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '16px',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  flexShrink: 1,
  background: 'none',
  width: '100%',
  ':hover': {
    backgroundColor: 'color.background.neutral.hovered'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.pressed'
  }
});
const buttonStyles = xcss({
  color: 'color.text',
  padding: 'space.100',
  borderRadius: 'border.radius.200',
  borderBottomRightRadius: "var(--ds-border-radius-050, 2px)",
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '16px',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  flexShrink: 1,
  backgroundColor: 'color.background.neutral',
  ':hover': {
    backgroundColor: 'color.background.neutral.hovered'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.pressed'
  }
});
const buttonInlineStyles = xcss({
  paddingInline: 'space.025'
});
const queryTextStyles = xcss({
  wordBreak: 'break-word',
  textAlign: 'left'
});
const whiteSpacePreWrapStyles = xcss({
  whiteSpace: 'pre-wrap'
});
export const ChatPill = /*#__PURE__*/React.forwardRef(({
  children,
  whiteSpacePreWrap = true,
  renderIcon = true,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Pressable, _extends({
  ref: ref
}, props, {
  xcss: buttonStyles
}), /*#__PURE__*/React.createElement(Inline, {
  space: "space.050",
  xcss: buttonInlineStyles
}, renderIcon ? /*#__PURE__*/React.createElement(ChatPillIcon, null) : null, /*#__PURE__*/React.createElement(Box, {
  xcss: [queryTextStyles, whiteSpacePreWrap && whiteSpacePreWrapStyles]
}, children))));
export const BrowseAgentsPill = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    formatMessage
  } = useIntl();
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    ref: ref
  }, props, {
    xcss: buttonStyles
  }), /*#__PURE__*/React.createElement(Inline, {
    space: "space.050",
    xcss: buttonInlineStyles
  }, /*#__PURE__*/React.createElement(AgentIcon, {
    color: "currentColor",
    label: ""
  }), /*#__PURE__*/React.createElement(Box, {
    xcss: queryTextStyles
  }, formatMessage(messages.browseAgentsPillLabel))));
});
export const ConversationStarterPill = /*#__PURE__*/React.forwardRef(({
  children,
  whiteSpacePreWrap = true,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Pressable, _extends({
  ref: ref
}, props, {
  xcss: conversationStarterPillStyles
}), /*#__PURE__*/React.createElement(Inline, {
  space: "space.050",
  xcss: buttonInlineStyles
}, /*#__PURE__*/React.createElement(ChatPillIcon, null), /*#__PURE__*/React.createElement(Box, {
  xcss: [queryTextStyles, whiteSpacePreWrap && whiteSpacePreWrapStyles]
}, children))));