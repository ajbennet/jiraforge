import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect, useState } from 'react';
import { useIntl } from 'react-intl-next';
import Button, { IconButton } from '@atlaskit/button/new';
import DropdownMenu, { DropdownItem, DropdownItemGroup } from '@atlaskit/dropdown-menu';
import MoreIcon from '@atlaskit/icon/core/migration/show-more-horizontal--more';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Inline, xcss } from '@atlaskit/primitives';
import { ChatPillIcon } from '../../common/ui/chat-icon';
import messages from './messages';
const chatToAgentButtonContainer = xcss({
  width: '100%'
});
const chatToAgentButtonWrapper = xcss({
  display: 'flex',
  justifyContent: 'center',
  lineHeight: '20px',
  fontWeight: 'font.weight.medium'
});
const chatPillButtonInlineStyles = xcss({
  paddingInline: 'space.025'
});
const chatPillTextStyles = xcss({
  wordBreak: 'break-word',
  textAlign: 'left',
  whiteSpace: 'pre-wrap'
});
const chatPillIconWrapper = xcss({
  minWidth: '20px',
  height: '20px'
});
export const ChatToAgentButton = ({
  onClick
}) => {
  const {
    formatMessage
  } = useIntl();
  return /*#__PURE__*/React.createElement(Box, {
    xcss: chatToAgentButtonContainer
  }, /*#__PURE__*/React.createElement(Button, {
    testId: "view-agent-modal-chat-to-agent-button",
    shouldFitContainer: true,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: chatToAgentButtonWrapper
  }, /*#__PURE__*/React.createElement(Inline, {
    space: "space.050",
    xcss: chatPillButtonInlineStyles
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: chatPillIconWrapper
  }, /*#__PURE__*/React.createElement(ChatPillIcon, null)), /*#__PURE__*/React.createElement(Box, {
    xcss: chatPillTextStyles
  }, formatMessage(messages.chatToAgentButton))))));
};
export const AgentDropdownMenu = ({
  isAgentCreatedByUser,
  isAutodevTemplateAgent,
  onEditAgent,
  onCopyAgent,
  onDuplicateAgent,
  onDeleteAgent,
  onViewAgentFullProfileClick,
  isForgeAgent,
  showViewAgentOption = false,
  onViewAgentClick,
  onDropdownTriggerClick,
  spacing,
  appearance,
  dropdownMenuTestId,
  doesAgentHaveIdentityAccountId,
  loadAgentPermissions,
  loadPermissionsOnMount,
  shouldTriggerStopPropagation
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const {
    formatMessage
  } = useIntl();
  const [hasBeenCopied, setHasBeenCopied] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [permissions, setPermissions] = useState();
  useEffect(() => {
    const fetchData = async () => {
      if (!loadAgentPermissions) {
        const canEditDelete = isAgentCreatedByUser && !isForgeAgent;
        setPermissions({
          isEditEnabled: canEditDelete,
          isDeleteEnabled: canEditDelete
        });
        return;
      }
      setIsLoading(true);
      const {
        isEditEnabled,
        isDeleteEnabled
      } = await loadAgentPermissions();
      setIsLoading(false);
      setPermissions({
        isEditEnabled,
        isDeleteEnabled
      });
    };

    // Only load once
    if (!permissions && (isOpen || loadPermissionsOnMount)) {
      fetchData();
    }
  }, [isAgentCreatedByUser, isForgeAgent, isOpen, loadAgentPermissions, loadPermissionsOnMount, permissions]);
  useEffect(() => {
    if (!isOpen) {
      setHasBeenCopied(false);
    }
  }, [isOpen]);
  const renderEditDelete = () => {
    if (!(permissions !== null && permissions !== void 0 && permissions.isEditEnabled) && !(permissions !== null && permissions !== void 0 && permissions.isDeleteEnabled)) {
      return null;
    }
    return /*#__PURE__*/React.createElement(DropdownItemGroup, {
      hasSeparator: true
    }, permissions.isEditEnabled && /*#__PURE__*/React.createElement(DropdownItem, {
      onClick: onEditAgent
    }, formatMessage(messages.editAgent)), permissions.isDeleteEnabled && /*#__PURE__*/React.createElement(DropdownItem, {
      onClick: onDeleteAgent
    }, formatMessage(messages.deleteAgent)));
  };
  return /*#__PURE__*/React.createElement(DropdownMenu, {
    isLoading: isLoading,
    isOpen: isOpen,
    testId: dropdownMenuTestId,
    trigger: ({
      triggerRef,
      ...props
    }) => /*#__PURE__*/React.createElement(IconButton, _extends({}, props, {
      icon: MoreIcon,
      label: formatMessage(messages.moreActionsLabel),
      ref: triggerRef,
      spacing: spacing,
      appearance: appearance,
      onClick: (e, analyticsEvent) => {
        var _props$onClick;
        if (onDropdownTriggerClick) {
          onDropdownTriggerClick(e, analyticsEvent);
        }
        if (shouldTriggerStopPropagation) {
          e.stopPropagation();
        }
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, e);
      }
    })),
    onOpenChange: args => {
      setIsOpen(args.isOpen);
      if (!args.isOpen) {
        setHasBeenCopied(false);
      }
    }
  }, /*#__PURE__*/React.createElement(DropdownItemGroup, null, showViewAgentOption && /*#__PURE__*/React.createElement(DropdownItem, {
    onClick: onViewAgentClick
  }, formatMessage(messages.viewAgent)), doesAgentHaveIdentityAccountId && onViewAgentFullProfileClick && /*#__PURE__*/React.createElement(DropdownItem, {
    onClick: onViewAgentFullProfileClick
  }, formatMessage(messages.viewAgentFullProfile)), !isForgeAgent && /*#__PURE__*/React.createElement(DropdownItem, {
    onClick: onDuplicateAgent
  }, isAutodevTemplateAgent && fg('rovo_chat_add_template_tab_to_modal') ? formatMessage(messages.useTemplateButton) : formatMessage(messages.duplicateAgent)), /*#__PURE__*/React.createElement(DropdownItem, {
    onClick: e => {
      e.stopPropagation();
      setHasBeenCopied(true);
      onCopyAgent === null || onCopyAgent === void 0 ? void 0 : onCopyAgent(e);
    }
  }, formatMessage(hasBeenCopied ? messages.linkedCopiedToProfile : messages.copyLinkToProfile))), renderEditDelete());
};