import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "whiteSpacePreWrap", "renderIcon"],
  _excluded2 = ["children", "whiteSpacePreWrap"];
import React from 'react';
import { useIntl } from 'react-intl-next';
import AgentIcon from '@atlaskit/icon/core/ai-agent';
import { Box, Inline, Pressable, xcss } from '@atlaskit/primitives';
import { ChatPillIcon } from '../chat-icon';
import messages from './messages';
var conversationStarterPillStyles = xcss({
  color: 'color.text',
  padding: 'space.100',
  border: "1px solid ".concat("var(--ds-border, #091E4224)"),
  borderRadius: 'border.radius.200',
  borderBottomRightRadius: "var(--ds-border-radius-050, 2px)",
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '16px',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  flexShrink: 1,
  background: 'none',
  width: '100%',
  ':hover': {
    backgroundColor: 'color.background.neutral.hovered'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.pressed'
  }
});
var buttonStyles = xcss({
  color: 'color.text',
  padding: 'space.100',
  borderRadius: 'border.radius.200',
  borderBottomRightRadius: "var(--ds-border-radius-050, 2px)",
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '16px',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  flexShrink: 1,
  backgroundColor: 'color.background.neutral',
  ':hover': {
    backgroundColor: 'color.background.neutral.hovered'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.pressed'
  }
});
var buttonInlineStyles = xcss({
  paddingInline: 'space.025'
});
var queryTextStyles = xcss({
  wordBreak: 'break-word',
  textAlign: 'left'
});
var whiteSpacePreWrapStyles = xcss({
  whiteSpace: 'pre-wrap'
});
export var ChatPill = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
    _ref$whiteSpacePreWra = _ref.whiteSpacePreWrap,
    whiteSpacePreWrap = _ref$whiteSpacePreWra === void 0 ? true : _ref$whiteSpacePreWra,
    _ref$renderIcon = _ref.renderIcon,
    renderIcon = _ref$renderIcon === void 0 ? true : _ref$renderIcon,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    ref: ref
  }, props, {
    xcss: buttonStyles
  }), /*#__PURE__*/React.createElement(Inline, {
    space: "space.050",
    xcss: buttonInlineStyles
  }, renderIcon ? /*#__PURE__*/React.createElement(ChatPillIcon, null) : null, /*#__PURE__*/React.createElement(Box, {
    xcss: [queryTextStyles, whiteSpacePreWrap && whiteSpacePreWrapStyles]
  }, children)));
});
export var BrowseAgentsPill = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    ref: ref
  }, props, {
    xcss: buttonStyles
  }), /*#__PURE__*/React.createElement(Inline, {
    space: "space.050",
    xcss: buttonInlineStyles
  }, /*#__PURE__*/React.createElement(AgentIcon, {
    color: "currentColor",
    label: ""
  }), /*#__PURE__*/React.createElement(Box, {
    xcss: queryTextStyles
  }, formatMessage(messages.browseAgentsPillLabel))));
});
export var ConversationStarterPill = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var children = _ref2.children,
    _ref2$whiteSpacePreWr = _ref2.whiteSpacePreWrap,
    whiteSpacePreWrap = _ref2$whiteSpacePreWr === void 0 ? true : _ref2$whiteSpacePreWr,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    ref: ref
  }, props, {
    xcss: conversationStarterPillStyles
  }), /*#__PURE__*/React.createElement(Inline, {
    space: "space.050",
    xcss: buttonInlineStyles
  }, /*#__PURE__*/React.createElement(ChatPillIcon, null), /*#__PURE__*/React.createElement(Box, {
    xcss: [queryTextStyles, whiteSpacePreWrap && whiteSpacePreWrapStyles]
  }, children)));
});