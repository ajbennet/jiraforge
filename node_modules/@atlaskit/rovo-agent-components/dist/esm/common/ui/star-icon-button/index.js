import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from 'react';
import { useIntl } from 'react-intl-next';
import StarIconMigration from '@atlaskit/icon/core/migration/star-starred--star-filled';
import StarUnstarredIconMigration from '@atlaskit/icon/core/migration/star-unstarred--star';
import { Pressable, xcss } from '@atlaskit/primitives';
import messages from './messages';
var pressableStarIconStyles = xcss({
  background: 'transparent',
  padding: 'space.0',
  height: '24px',
  width: '24px'
});
var hiddenStyles = xcss({
  opacity: 0
});
export var StarIconButton = function StarIconButton(_ref) {
  var isStarred = _ref.isStarred,
    handleToggle = _ref.handleToggle,
    _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? true : _ref$visible;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovered = _useState2[0],
    setIsHovered = _useState2[1];
  return /*#__PURE__*/React.createElement(Pressable, {
    xcss: [pressableStarIconStyles, !visible && hiddenStyles],
    onClick: handleToggle,
    onMouseEnter: function onMouseEnter() {
      return setIsHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setIsHovered(false);
    }
  }, isStarred || isHovered ? /*#__PURE__*/React.createElement(StarIconMigration, {
    LEGACY_size: "medium",
    spacing: "spacious",
    label: formatMessage(messages.removeFromFavouritesLabel),
    color: "var(--ds-icon-accent-orange, #E56910)"
  }) : /*#__PURE__*/React.createElement(StarUnstarredIconMigration, {
    LEGACY_size: "medium",
    spacing: "spacious",
    label: formatMessage(messages.clickToFavouriteLabel),
    color: "var(--ds-icon, #44546F)"
  }));
};