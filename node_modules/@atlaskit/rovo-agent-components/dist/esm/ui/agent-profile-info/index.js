import React from 'react';
import { useIntl } from 'react-intl-next';
import Heading from '@atlaskit/heading';
import { AtlassianIcon, RovoIcon } from '@atlaskit/logo';
import { Box, Inline, Stack, xcss } from '@atlaskit/primitives';
import Skeleton from '@atlaskit/skeleton';
import Tooltip from '@atlaskit/tooltip';
import { HiddenIcon } from '../../common/ui/hidden-icon';
import { StarIconButton } from '../../common/ui/star-icon-button';
import { messages } from './messages';
var clickableItemStyles = xcss({
  display: 'flex',
  alignItems: 'center',
  gap: 'space.050'
});
var nameStyles = xcss({
  justifyContent: 'space-between',
  alignItems: 'flex-start'
});
var descriptionStyles = xcss({
  marginTop: 'space.0',
  marginBottom: 'space.100'
});
export var AgentProfileCreator = function AgentProfileCreator(_ref) {
  var creator = _ref.creator,
    onCreatorLinkClick = _ref.onCreatorLinkClick,
    isLoading = _ref.isLoading;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var getCreatorRender = function getCreatorRender() {
    if (isLoading) {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: /*#__PURE__*/React.createElement(Skeleton, {
          testId: "agent-profile-creator-skeleton",
          isShimmering: true,
          height: 18,
          width: 100,
          borderRadius: 3
        })
      });
    }
    if (!creator) {
      return null;
    }
    if (creator.type === 'SYSTEM' || creator.type === 'OOTB') {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: /*#__PURE__*/React.createElement(Inline, {
          alignBlock: "center",
          testId: "atlassian-icon"
        }, /*#__PURE__*/React.createElement(AtlassianIcon, {
          size: "small",
          appearance: "brand"
        }), /*#__PURE__*/React.createElement(Box, null, "Atlassian"))
      });
    }
    if (creator.type === 'CUSTOMER') {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: /*#__PURE__*/React.createElement("a", {
          href: creator.profileLink,
          onClick: function onClick() {
            return onCreatorLinkClick();
          },
          target: "_blank"
        }, creator.name, ' ', creator.status === 'inactive' && formatMessage(messages.agentDeactivated))
      });
    }
    if (creator.type === 'THIRD_PARTY') {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: creator.name
      });
    }
    return null;
  };
  var creatorRender = getCreatorRender();
  return creatorRender ? /*#__PURE__*/React.createElement(Box, {
    xcss: clickableItemStyles
  }, /*#__PURE__*/React.createElement(RovoIcon, {
    appearance: "brand",
    size: "small"
  }), creatorRender) : null;
};
var wrapperStyles = xcss({
  marginBottom: 'space.100'
});
var tooltipWrapperStyles = xcss({
  display: 'inline-flex',
  marginInline: 'space.100',
  position: 'relative',
  bottom: 'space.025'
});
var headingWrapperStyles = xcss({
  position: 'relative'
});
export var AgentProfileInfo = function AgentProfileInfo(_ref2) {
  var agentName = _ref2.agentName,
    agentDescription = _ref2.agentDescription,
    creatorRender = _ref2.creatorRender,
    starCountRender = _ref2.starCountRender,
    isStarred = _ref2.isStarred,
    isHidden = _ref2.isHidden,
    onStarToggle = _ref2.onStarToggle;
  var _useIntl2 = useIntl(),
    formatMessage = _useIntl2.formatMessage;
  return /*#__PURE__*/React.createElement(Stack, {
    space: "space.100",
    xcss: wrapperStyles
  }, /*#__PURE__*/React.createElement(Inline, {
    xcss: nameStyles,
    space: "space.100",
    alignBlock: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: headingWrapperStyles
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "span",
    size: "xlarge"
  }, agentName), isHidden && /*#__PURE__*/React.createElement(Box, {
    xcss: tooltipWrapperStyles
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: formatMessage(messages.hiddenTooltip),
    position: "top"
  }, /*#__PURE__*/React.createElement(HiddenIcon, {
    label: formatMessage(messages.hiddenIcon)
  })))), /*#__PURE__*/React.createElement(StarIconButton, {
    isStarred: isStarred,
    handleToggle: onStarToggle
  })), creatorRender, !!agentDescription && /*#__PURE__*/React.createElement(Box, {
    xcss: descriptionStyles,
    as: "p"
  }, agentDescription), starCountRender);
};