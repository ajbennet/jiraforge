"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _primitives = require("@atlaskit/primitives");
var _colors = require("@atlaskit/theme/colors");
var _constants = require("@atlaskit/theme/constants");
var _constants2 = require("./constants");
var _utilities = require("./utilities");
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var avatarItemStyles = (0, _react2.css)({
  minWidth: 0,
  maxWidth: '100%',
  flex: '1 1 100%',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '1.4',
  paddingInlineStart: "var(--ds-space-100, 8px)"
});
var secondaryTextOldStyles = (0, _react2.css)({
  color: "var(--ds-text-subtlest, #626F86)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  fontSize: '0.85em'
});
var baseTextStyles = (0, _react2.css)({
  display: 'block',
  color: "var(--ds-text, #172B4D)"
});
var truncationStyles = (0, _react2.css)({
  overflowX: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var getStyles = function getStyles(css, _ref) {
  var backgroundColor = _ref.backgroundColor,
    isInteractive = _ref.isInteractive,
    isDisabled = _ref.isDisabled;
  return (// eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @repo/internal/react/no-css-string-literals
    css(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\t\talign-items: center;\n\t\tbackground-color: ", ";\n\t\tborder-radius: ", "px;\n\t\tborder: ", "px solid transparent;\n\t\tbox-sizing: border-box;\n\t\tcolor: inherit;\n\t\tdisplay: flex;\n\t\tfont-size: inherit;\n\t\tfont-style: normal;\n\t\tfont-weight: ", ";\n\t\tline-height: 1;\n\t\toutline: none;\n\t\tmargin: ", ";\n\t\tpadding: ", ";\n\t\ttext-align: left;\n\t\ttext-decoration: none;\n\t\twidth: 100%;\n\n\t\t", "\n\n\t\t", "\n\t"])), backgroundColor, (0, _constants.borderRadius)(), _constants2.BORDER_WIDTH, "var(--ds-font-weight-regular, 400)", "var(--ds-space-0, 0px)", "var(--ds-space-050, 4px)", isInteractive && "\n        :hover {\n          background-color: ".concat("var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30, ")"), ";\n          cursor: pointer;\n          text-decoration: none;\n        }\n\n        :focus {\n          outline: none;\n          border-color: ", "var(--ds-border-focused, ".concat(_colors.B200, ")"), ";\n        }\n\n        :active {\n          background-color: ", "var(--ds-background-neutral-subtle-pressed, ".concat(_colors.B50, ")"), ";\n        }\n      "), isDisabled && "\n        cursor: not-allowed;\n        opacity: ".concat("var(--ds-opacity-disabled, 0.5)", ";\n        pointer-events: none;\n      "))
  );
};

/**
 * __Avatar item__
 *
 * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-item/code)
 */
var AvatarItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref2, ref) {
  var avatar = _ref2.avatar,
    _ref2$backgroundColor = _ref2.backgroundColor,
    backgroundColor = _ref2$backgroundColor === void 0 ? 'transparent' : _ref2$backgroundColor,
    children = _ref2.children,
    isTruncationDisabled = _ref2.isTruncationDisabled,
    href = _ref2.href,
    isDisabled = _ref2.isDisabled,
    onClick = _ref2.onClick,
    primaryText = _ref2.primaryText,
    secondaryText = _ref2.secondaryText,
    target = _ref2.target,
    testId = _ref2.testId,
    label = _ref2.label;
  var getTestId = function getTestId(testId, children) {
    return !children ? {
      'data-testid': "".concat(testId, "--itemInner")
    } : {
      testId: "".concat(testId, "--itemInner")
    };
  };
  var componentProps = function componentProps() {
    if (isDisabled) {
      return {
        disabled: true
      };
    }

    // return only relevant props for either anchor or button elements
    return _objectSpread(_objectSpread({}, href && (0, _utilities.getLinkProps)(href, target)), onClick && !href ? (0, _utilities.getButtonProps)(onClick) : {
      onClick: onClick
    });
  };
  return (0, _react2.jsx)(_react2.ClassNames, null, function (_ref3) {
    var css = _ref3.css;
    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      ref: ref,
      className: getStyles(css, {
        backgroundColor: backgroundColor,
        isInteractive: Boolean(onClick || href),
        isDisabled: isDisabled
      })
    }, componentProps()), testId && getTestId(testId, children)), (onClick || href) && {
      'aria-label': label
    }), {}, {
      children: (0, _react2.jsx)(_react.Fragment, null, avatar, (0, _react2.jsx)("div", {
        css: avatarItemStyles
      }, (0, _platformFeatureFlags.fg)('platform.design-system-team.avatar-item-font-size_830x6') ? (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_primitives.Text, {
        maxLines: isTruncationDisabled ? undefined : 1
      }, primaryText), (0, _react2.jsx)(_primitives.Text, {
        color: "color.text.subtlest",
        maxLines: isTruncationDisabled ? undefined : 1,
        size: "UNSAFE_small"
      }, secondaryText)) : (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)("span", {
        css: [baseTextStyles, !isTruncationDisabled && truncationStyles]
      }, primaryText), (0, _react2.jsx)("span", {
        css: [baseTextStyles, secondaryTextOldStyles, !isTruncationDisabled && truncationStyles]
      }, secondaryText))))
    });
    return children ? children(props) : /*#__PURE__*/(0, _react.createElement)((0, _utilities.getCustomElement)(isDisabled, href, onClick), props);
  });
});
AvatarItem.displayName = 'AvatarItem';
var _default = exports.default = AvatarItem;