/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import { css, jsx } from '@emotion/react';
const modalBodyStyles = css({
  padding: `${"var(--ds-space-500, 40px)"} ${"var(--ds-space-200, 16px)"}`,
  textAlign: 'center'
});

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-array-arguments -- Ignored via go/DSP-18766
const modalHeadingStyles = css({
  color: 'inherit',
  font: "var(--ds-font-heading-medium, normal 500 20px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  marginBlockEnd: "var(--ds-space-100, 8px)"
});
const modalImageStyles = css({
  width: '100%',
  height: 'auto',
  borderStartEndRadius: "var(--ds-border-radius, 3px)",
  borderStartStartRadius: "var(--ds-border-radius, 3px)",
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  '@media (min-width: 320px) and (max-width: 480px)': {
    borderRadius: 0
  }
});
const modalActionContainerStyles = css({
  display: 'flex',
  padding: `${"var(--ds-space-0, 0px)"} ${"var(--ds-space-500, 40px)"} 36px`,
  justifyContent: 'center',
  flexDirection: 'row',
  flexFlow: 'wrap'
});
const modalActionContainerReversedStyles = css({
  flexDirection: 'row-reverse'
});
const modalActionItemStyles = css({
  margin: `${"var(--ds-space-0, 0px)"} ${"var(--ds-space-050, 4px)"} ${"var(--ds-space-050, 4px)"}`
});

/**
 * __Modal body__
 *
 * @internal
 */
export const ModalBody = ({
  children
}) => jsx("div", {
  css: modalBodyStyles
}, children);

/**
 * __Modal heading__
 *
 * @internal
 */
export const ModalHeading = ({
  children,
  id
}) => {
  return (
    // eslint-disable-next-line @atlaskit/design-system/use-heading
    jsx("h1", {
      css: modalHeadingStyles,
      id: id
    }, children)
  );
};

/**
 * __Modal image__
 *
 * @internal
 */
export const ModalImage = ({
  alt,
  src
}) => jsx("img", {
  css: modalImageStyles,
  alt: alt,
  src: src
});

/**
 * __Modal action container__
 *
 * @internal
 */
export const ModalActionContainer = ({
  children,
  shouldReverseButtonOrder
}) => jsx("div", {
  css: [modalActionContainerStyles, shouldReverseButtonOrder && modalActionContainerReversedStyles]
}, children);

/**
 * __Modal action item__
 *
 * @internal
 */
export const ModalActionItem = ({
  children
}) => jsx("div", {
  css: modalActionItemStyles
}, children);