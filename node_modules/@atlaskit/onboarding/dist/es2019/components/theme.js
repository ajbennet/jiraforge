import * as colors from '@atlaskit/theme/colors';
const spotlightTheme = {
  default: {
    background: {
      default: `var(--ds-background-inverse-subtle, ${colors.P500})`,
      hover: `var(--ds-background-inverse-subtle-hovered, ${colors.P200})`,
      active: `var(--ds-background-inverse-subtle-pressed, ${colors.P500})`,
      disabled: `var(--ds-background-disabled, ${colors.P400})`,
      selected: `var(--ds-background-inverse-subtle-pressed, ${colors.R500})`,
      focus: `var(--ds-background-inverse-subtle, ${colors.P500})`
    },
    color: {
      default: `var(--ds-text-inverse, ${colors.N0})`,
      hover: `var(--ds-text-inverse, ${colors.N0})`,
      active: `var(--ds-text-inverse, ${colors.N0})`,
      disabled: {
        light: `var(--ds-text-disabled, ${colors.N0})`,
        dark: `var(--ds-text-disabled, ${colors.DN30})`
      },
      selected: `var(--ds-text-inverse, ${colors.N0})`,
      focus: `var(--ds-text-inverse, ${colors.N0})`
    }
  },
  subtle: {
    background: {
      default: 'none',
      hover: `var(--ds-background-inverse-subtle-hovered, ${colors.P200})`,
      active: `var(--ds-background-inverse-subtle-pressed, ${colors.P500})`,
      disabled: 'none',
      selected: {
        light: `var(--ds-background-selected-hovered, ${colors.N700})`,
        dark: `var(--ds-background-selected-hovered, ${colors.DN0})`
      },
      focusSelected: {
        light: `var(--ds-background-selected-hovered, ${colors.N700})`,
        dark: `var(--ds-background-selected-hovered, ${colors.DN0})`
      }
    },
    color: {
      default: `var(--ds-text-inverse, ${colors.N0})`,
      hover: `var(--ds-text-inverse, ${colors.N0})`,
      active: `var(--ds-text-inverse, ${colors.N0})`,
      disabled: `var(--ds-text-disabled, ${colors.N0})`,
      selected: `var(--ds-text-inverse, ${colors.N0})`,
      focus: `var(--ds-text-inverse, ${colors.N0})`
    }
  },
  'subtle-link': {
    textDecoration: {
      hover: `underline ${`var(--ds-text-inverse, ${colors.P75})`}`
    },
    textDecorationLine: {
      active: 'none'
    },
    color: {
      default: `var(--ds-text-inverse, ${colors.N0})`,
      hover: `var(--ds-text-inverse, ${colors.P75})`,
      active: `var(--ds-text-inverse, ${colors.P100})`,
      disabled: `var(--ds-text-discovery, ${colors.P500})`,
      selected: `var(--ds-text-selected, ${colors.N0})`,
      focus: `var(--ds-text-inverse, ${colors.N0})`
    }
  }
};
const modalTheme = {
  primary: {
    background: {
      default: `var(--ds-background-discovery-bold, ${colors.P400})`,
      hover: `var(--ds-background-discovery-bold-hovered, ${colors.P200})`,
      active: `var(--ds-background-discovery-bold-pressed, ${colors.P500})`,
      disabled: {
        light: `var(--ds-background-disabled, ${colors.N30})`,
        dark: `var(--ds-background-disabled, ${colors.DN70})`
      },
      selected: `var(--ds-background-selected-hovered, ${colors.R500})`,
      focus: `var(--ds-background-discovery-bold-hovered, ${colors.P400})`
    },
    color: {
      default: `var(--ds-text-inverse, ${colors.N0})`,
      disabled: {
        light: `var(--ds-text-disabled, ${colors.N0})`,
        dark: `var(--ds-text-disabled, ${colors.DN30})`
      },
      selected: `var(--ds-text-selected, ${colors.N0})`,
      focus: `var(--ds-text-inverse, ${colors.N0})`
    }
  }
};
function extract(newTheme, {
  mode,
  appearance,
  state
}) {
  if (!newTheme[appearance]) {
    return undefined;
  }
  const root = newTheme[appearance];
  return Object.keys(root).reduce((acc, val) => {
    let node = root;
    [val, state, mode].forEach(item => {
      if (!node[item]) {
        return undefined;
      }
      if (typeof node[item] !== 'object') {
        acc[val] = node[item];
        return undefined;
      }
      node = node[item];
      return undefined;
    });
    return acc;
  }, {});
}

/**
 * @deprecated
 * Custom button themes are deprecated and will be removed in the future.
 */
export const spotlightButtonTheme = (current, themeProps) => {
  const {
    buttonStyles,
    ...rest
  } = current(themeProps);
  return {
    buttonStyles: {
      ...buttonStyles,
      ...extract(spotlightTheme, themeProps)
    },
    ...rest
  };
};

/**
 * @deprecated
 * Custom button themes are deprecated and will be removed in the future.
 */
export const modalButtonTheme = (current, themeProps) => {
  const {
    buttonStyles,
    ...rest
  } = current(themeProps);
  return {
    buttonStyles: {
      ...buttonStyles,
      ...extract(modalTheme, themeProps)
    },
    ...rest
  };
};