import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Component } from 'react';
import { jsx } from '@emotion/react';
import Button, { Theme as ButtonTheme } from '@atlaskit/button/custom-theme-button';
import Modal, { ModalBody, useModal } from '@atlaskit/modal-dialog';
import { ModalBody as Body, ModalHeading as Heading, ModalActionContainer, ModalActionItem, ModalImage } from '../styled/modal';
import { modalButtonTheme } from './theme';

// TODO: DSP-1250 - use a composable API consistent with normal modal dialog

/**
 * __Benefits modal__
 *
 * A benefits modal explains the benefits of a significant new feature or experience change.
 *
 * - [Examples](https://atlassian.design/components/onboarding/benefits-modal/examples)
 * - [Code](https://atlassian.design/components/onboarding/benefits-modal/code)
 * - [Usage](https://atlassian.design/components/onboarding/benefits-modal/usage)
 */
// eslint-disable-next-line @repo/internal/react/no-class-components
export default class BenefitsModal extends Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "headerComponent", props => {
      const {
        header: HeaderElement,
        image: src
      } = props;
      const ImageElement = () => jsx(ModalImage, {
        src: src,
        alt: ""
      });
      return HeaderElement || ImageElement;
    });
    _defineProperty(this, "footerComponent", props => {
      const {
        footer: FooterElement,
        actions: actionList,
        experimental_shouldShowPrimaryButtonOnRight = false
      } = props;
      const ActionsElement = () => actionList ? jsx(ButtonTheme.Provider, {
        value: modalButtonTheme
      }, jsx(ModalActionContainer, {
        shouldReverseButtonOrder: experimental_shouldShowPrimaryButtonOnRight
      }, actionList.map(({
        text,
        key,
        ...rest
      }, idx) => {
        const variant = idx ? 'subtle-link' : 'primary';
        return jsx(ModalActionItem, {
          key: key || (typeof text === 'string' ? text : `${idx}`)
        }, jsx(Button, _extends({
          appearance: variant,
          autoFocus: !idx
        }, rest), text));
      }))) : null;
      return FooterElement || ActionsElement;
    });
  }
  render() {
    const {
      actions,
      children,
      heading,
      // All of the following props except `...rest` are unused but were being
      // spread into the Modal, which it does not accept.
      experimental_shouldShowPrimaryButtonOnRight,
      footer,
      header,
      image,
      ...rest
    } = this.props;
    const Header = this.headerComponent(this.props);
    const Footer = this.footerComponent(this.props);
    const CustomHeader = () => {
      const {
        titleId
      } = useModal();
      return jsx(Heading, {
        id: titleId
      }, heading);
    };
    return jsx(Modal, _extends({
      autoFocus: true,
      shouldCloseOnEscapePress: false,
      shouldCloseOnOverlayClick: false,
      shouldScrollInViewport: true
      // @ts-ignore All of the following props were in the rest props, so I'm
      // making them explicit here even though the Modal doesn't accept them.
      ,
      experimental_shouldShowPrimaryButtonOnRight: experimental_shouldShowPrimaryButtonOnRight,
      footer: footer,
      header: header,
      heading: heading,
      image: image
    }, rest), jsx(Header, null), jsx(ModalBody, null, jsx(Body, null, heading && jsx(CustomHeader, null), children)), jsx(Footer, null));
  }
}