/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef } from 'react';
import { css, jsx } from '@emotion/react';
import Button, { Theme as ButtonTheme } from '@atlaskit/button/custom-theme-button';
import Heading from '@atlaskit/heading';
import { useLayering } from '@atlaskit/layering';
import { Box, Text, xcss } from '@atlaskit/primitives';
import { DialogActionItem, DialogActionItemContainer } from '../styled/dialog';
import { spotlightButtonTheme } from './theme';
const bodyStyles = css({
  display: 'flex',
  padding: `${"var(--ds-space-200, 16px)"} ${"var(--ds-space-250, 20px)"}`,
  flexDirection: 'column'
});
const imageStyles = css({
  display: 'block'
});
const defaultHeaderStyles = css({
  display: 'flex',
  alignItems: 'baseline',
  justifyContent: 'space-between',
  paddingBlockEnd: "var(--ds-space-100, 8px)"
});
const DefaultHeader = ({
  children
}) => jsx("div", {
  css: defaultHeaderStyles
}, children);
const defaultFooterStyles = css({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  paddingBlockStart: "var(--ds-space-100, 8px)"
});
const DefaultFooter = ({
  children
}) => jsx("div", {
  css: defaultFooterStyles
}, children);
const containerStyles = xcss({
  height: 'fit-content',
  zIndex: 'spotlight',
  borderRadius: 'border.radius',
  color: 'color.text.inverse',
  overflow: 'auto',
  minWidth: '160px',
  maxWidth: '600px'
});
const containerShadowStyles = xcss({
  boxShadow: 'elevation.shadow.raised'
});
/**
 * __Spotlight card__
 *
 * A spotlight card is for onboarding messages that need a more flexible layout, or don't require a dialog.
 *
 * - [Examples](https://atlassian.design/components/onboarding/spotlight-card/examples)
 * - [Code](https://atlassian.design/components/onboarding/spotlight-card/code)
 * - [Usage](https://atlassian.design/components/onboarding/spotlight-card/usage)
 */
const SpotlightCard = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    actions = [],
    actionsBeforeElement,
    children,
    components = {},
    heading,
    headingLevel = 4,
    headingAfterElement,
    image,
    innerRef,
    isFlat,
    testId,
    width = 400,
    headingId
  } = props;
  const {
    Header = DefaultHeader,
    Footer = DefaultFooter
  } = components;
  const {
    currentLevel
  } = useLayering();
  return jsx(ButtonTheme.Provider, {
    value: spotlightButtonTheme
  }, jsx(Box, {
    backgroundColor: "color.background.discovery.bold",
    xcss: [containerStyles, !isFlat && containerShadowStyles],
    style: {
      width
    },
    ref: ref || innerRef,
    testId: testId,
    "data-ds--level": currentLevel
    // temporarily use this data attribute to prevent clicking outside won't close spotlight correctly issue
    ,
    "data-ds--close--type": "single"
  }, typeof image === 'string' ? jsx("img", {
    css: imageStyles,
    src: image,
    alt: ""
  }) : image, jsx("div", {
    css: bodyStyles
  }, heading || headingAfterElement ? jsx(Header, null, jsx(Heading, {
    id: headingId,
    size: "medium",
    as: `h${headingLevel}`,
    color: "color.text.inverse"
  }, heading), headingAfterElement) : null, jsx(Text, null, children), actions.length > 0 || actionsBeforeElement ? jsx(Footer, null, actionsBeforeElement || jsx("span", null), jsx(DialogActionItemContainer, null, actions.map(({
    text,
    key,
    ...rest
  }, idx) => {
    return jsx(DialogActionItem, {
      key: key || (typeof text === 'string' ? text : `${idx}`)
    }, jsx(Button, rest, text));
  }))) : null)));
});
SpotlightCard.displayName = 'SpotlightCard';
export default SpotlightCard;