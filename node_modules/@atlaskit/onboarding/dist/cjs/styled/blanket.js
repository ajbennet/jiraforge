"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("@emotion/react");
var _colors = require("@atlaskit/theme/colors");
var _constants = require("@atlaskit/theme/constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */
// IE11 and Edge: z-index needed because fixed position calculates z-index relative
// to body instead of nearest stacking context (Portal in our case).
var blanketStyles = (0, _react.css)({
  position: 'fixed',
  zIndex: _constants.layers.spotlight(),
  inset: 0,
  transition: 'opacity 220ms'
});
/**
 * __Blanket__
 *
 * A replacement for `@atlaskit/blanket`.
 *
 * We use this for spotlights instead of `@atlaskit/blanket`
 * because spotlights must sit on top of other layered elements,
 * such as modals, which have their own blankets.
 *
 * @internal
 */
var Blanket = function Blanket(_ref) {
  var isTinted = _ref.isTinted,
    onBlanketClicked = _ref.onBlanketClicked,
    style = _ref.style;
  return (0, _react.jsx)("div", {
    role: "presentation",
    css: blanketStyles,
    style: _objectSpread(_objectSpread({}, style), {}, {
      backgroundColor: isTinted ? "var(--ds-blanket, ".concat(_colors.N100A, ")") : 'transparent'
    }),
    onClick: onBlanketClicked
  });
};
var _default = exports.default = Blanket;