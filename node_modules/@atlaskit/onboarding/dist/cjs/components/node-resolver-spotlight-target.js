"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactNodeResolver = _interopRequireDefault(require("react-node-resolver"));
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

var spanStyles = (0, _react2.css)({
  display: 'contents'
});
/**
 * A wrapper component that conditionally applies a NodeResolver to its children.
 *
 * Note: NodeResolver should not be used in React 18 concurrent mode. This component
 * is intended to be removed once the feature flag  is removed.
 * @param {boolean} props.hasNodeResolver - Determines whether to apply the NodeResolver.
 * @param {ReactElement} props.children - The child elements to be wrapped.
 * @param {string} props.name - The name to reference from Spotlight.
 * @param {ReactElement} props.getTargetRef - Setting up Target Node in Spotlight Manager.
 * @returns {ReactElement} The children wrapped with NodeResolver if hasNodeResolver is true, wrape the children in a div setting innerRef with ref to the div.
 */
var NodeResolverSpotlightTarget = function NodeResolverSpotlightTarget(_ref) {
  var hasNodeResolver = _ref.hasNodeResolver,
    children = _ref.children,
    getTargetRef = _ref.getTargetRef,
    name = _ref.name;
  var divRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var targetRef = getTargetRef(name);
    if (!hasNodeResolver) {
      var _divRef$current;
      targetRef((_divRef$current = divRef.current) === null || _divRef$current === void 0 ? void 0 : _divRef$current.firstElementChild);
    }
    return function () {
      !hasNodeResolver && targetRef(undefined);
    };
  }, [hasNodeResolver, name, getTargetRef]);
  if (hasNodeResolver) {
    return (0, _react2.jsx)(_reactNodeResolver.default, {
      innerRef: getTargetRef(name)
    }, children);
  }
  return (0, _react2.jsx)("span", {
    ref: divRef,
    css: spanStyles
  }, children);
};
var _default = exports.default = NodeResolverSpotlightTarget;