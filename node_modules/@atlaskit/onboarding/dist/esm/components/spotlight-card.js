import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["text", "key"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef } from 'react';
import { css, jsx } from '@emotion/react';
import Button, { Theme as ButtonTheme } from '@atlaskit/button/custom-theme-button';
import Heading from '@atlaskit/heading';
import { useLayering } from '@atlaskit/layering';
import { Box, Text, xcss } from '@atlaskit/primitives';
import { DialogActionItem, DialogActionItemContainer } from '../styled/dialog';
import { spotlightButtonTheme } from './theme';
var bodyStyles = css({
  display: 'flex',
  padding: "var(--ds-space-200, 16px)".concat(" ", "var(--ds-space-250, 20px)"),
  flexDirection: 'column'
});
var imageStyles = css({
  display: 'block'
});
var defaultHeaderStyles = css({
  display: 'flex',
  alignItems: 'baseline',
  justifyContent: 'space-between',
  paddingBlockEnd: "var(--ds-space-100, 8px)"
});
var DefaultHeader = function DefaultHeader(_ref) {
  var children = _ref.children;
  return jsx("div", {
    css: defaultHeaderStyles
  }, children);
};
var defaultFooterStyles = css({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  paddingBlockStart: "var(--ds-space-100, 8px)"
});
var DefaultFooter = function DefaultFooter(_ref2) {
  var children = _ref2.children;
  return jsx("div", {
    css: defaultFooterStyles
  }, children);
};
var containerStyles = xcss({
  height: 'fit-content',
  zIndex: 'spotlight',
  borderRadius: 'border.radius',
  color: 'color.text.inverse',
  overflow: 'auto',
  minWidth: '160px',
  maxWidth: '600px'
});
var containerShadowStyles = xcss({
  boxShadow: 'elevation.shadow.raised'
});
/**
 * __Spotlight card__
 *
 * A spotlight card is for onboarding messages that need a more flexible layout, or don't require a dialog.
 *
 * - [Examples](https://atlassian.design/components/onboarding/spotlight-card/examples)
 * - [Code](https://atlassian.design/components/onboarding/spotlight-card/code)
 * - [Usage](https://atlassian.design/components/onboarding/spotlight-card/usage)
 */
var SpotlightCard = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$actions = props.actions,
    actions = _props$actions === void 0 ? [] : _props$actions,
    actionsBeforeElement = props.actionsBeforeElement,
    children = props.children,
    _props$components = props.components,
    components = _props$components === void 0 ? {} : _props$components,
    heading = props.heading,
    _props$headingLevel = props.headingLevel,
    headingLevel = _props$headingLevel === void 0 ? 4 : _props$headingLevel,
    headingAfterElement = props.headingAfterElement,
    image = props.image,
    innerRef = props.innerRef,
    isFlat = props.isFlat,
    testId = props.testId,
    _props$width = props.width,
    width = _props$width === void 0 ? 400 : _props$width,
    headingId = props.headingId;
  var _components$Header = components.Header,
    Header = _components$Header === void 0 ? DefaultHeader : _components$Header,
    _components$Footer = components.Footer,
    Footer = _components$Footer === void 0 ? DefaultFooter : _components$Footer;
  var _useLayering = useLayering(),
    currentLevel = _useLayering.currentLevel;
  return jsx(ButtonTheme.Provider, {
    value: spotlightButtonTheme
  }, jsx(Box, {
    backgroundColor: "color.background.discovery.bold",
    xcss: [containerStyles, !isFlat && containerShadowStyles],
    style: {
      width: width
    },
    ref: ref || innerRef,
    testId: testId,
    "data-ds--level": currentLevel
    // temporarily use this data attribute to prevent clicking outside won't close spotlight correctly issue
    ,
    "data-ds--close--type": "single"
  }, typeof image === 'string' ? jsx("img", {
    css: imageStyles,
    src: image,
    alt: ""
  }) : image, jsx("div", {
    css: bodyStyles
  }, heading || headingAfterElement ? jsx(Header, null, jsx(Heading, {
    id: headingId,
    size: "medium",
    as: "h".concat(headingLevel),
    color: "color.text.inverse"
  }, heading), headingAfterElement) : null, jsx(Text, null, children), actions.length > 0 || actionsBeforeElement ? jsx(Footer, null, actionsBeforeElement || jsx("span", null), jsx(DialogActionItemContainer, null, actions.map(function (_ref3, idx) {
    var text = _ref3.text,
      key = _ref3.key,
      rest = _objectWithoutProperties(_ref3, _excluded);
    return jsx(DialogActionItem, {
      key: key || (typeof text === 'string' ? text : "".concat(idx))
    }, jsx(Button, rest, text));
  }))) : null)));
});
SpotlightCard.displayName = 'SpotlightCard';
export default SpotlightCard;