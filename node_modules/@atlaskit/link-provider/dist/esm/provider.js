import React, { useContext, useMemo } from 'react';
import { createStore } from 'redux';
import { getUrl } from '@atlaskit/linking-common';
import { extractPreview } from '@atlaskit/link-extractors';
import { cardReducer } from './reducers';
import { SmartCardContext } from './state/context';
import CardClient from './client';
export function SmartCardProvider(_ref) {
  var storeOptions = _ref.storeOptions,
    customClient = _ref.client,
    customAuthFlow = _ref.authFlow,
    children = _ref.children,
    renderers = _ref.renderers,
    featureFlags = _ref.featureFlags,
    isAdminHubAIEnabled = _ref.isAdminHubAIEnabled,
    product = _ref.product;
  var parentContext = useContext(SmartCardContext);
  var defaultInitialState = useMemo(function () {
    return {};
  }, []);
  var _ref2 = storeOptions || {
      initialState: defaultInitialState
    },
    initialState = _ref2.initialState;
  var store = useMemo(function () {
    return createStore(cardReducer, initialState);
  }, [initialState]);
  var providerValue = useMemo(function () {
    var client = customClient || new CardClient();

    // If product is passed into provider, set it on the client if setProduct is supported
    if (product && client.setProduct) {
      client.setProduct(product);
    }
    var authFlow = customAuthFlow || 'oauth2';
    var getPreview = function getPreview(url, platform) {
      var cardState = getUrl(store, url);
      return cardState.details ? extractPreview(cardState.details.data, platform) : undefined;
    };
    return {
      renderers: renderers,
      store: store,
      prefetchStore: {},
      connections: {
        client: client
      },
      config: {
        authFlow: authFlow
      },
      extractors: {
        getPreview: getPreview
      },
      featureFlags: featureFlags,
      isAdminHubAIEnabled: isAdminHubAIEnabled,
      product: product
    };
  }, [customClient, customAuthFlow, isAdminHubAIEnabled, product, renderers, featureFlags, store]);
  return /*#__PURE__*/React.createElement(SmartCardContext.Provider, {
    value: parentContext || providerValue
  }, children);
}
export default SmartCardProvider;