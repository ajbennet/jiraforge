import React, { useContext, createContext, useMemo } from 'react';
import { SmartCardProvider } from '../../provider';
export const SmartCardContext = /*#__PURE__*/createContext(undefined);
export function useSmartLinkContext() {
  const context = useContext(SmartCardContext);
  if (!context) {
    throw Error('useSmartCard() must be wrapped in <SmartCardProvider>');
  }
  return context;
}
export const useSmartCardContext = () => useContextMemoized(SmartCardContext);
export const EditorSmartCardProviderValueGuard = ({
  children
}) => {
  const cardContext = useSmartCardContext();
  if (!(cardContext !== null && cardContext !== void 0 && cardContext.value)) {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, children);
};
function useContextMemoized(reactContext) {
  const value = useContext(reactContext);
  const context = useMemo(() => ({
    Provider: reactContext.Provider,
    Consumer: reactContext.Consumer,
    value
  }), [value, reactContext]);
  return context;
}
export const EditorSmartCardProvider = ({
  children
}) => {
  const cardContext = useSmartCardContext();
  const Provider = cardContext.Provider;
  return /*#__PURE__*/React.createElement(Provider, {
    value: cardContext.value
  }, children);
};
export { SmartCardProvider };
export default SmartCardContext;