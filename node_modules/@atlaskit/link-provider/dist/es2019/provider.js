import React, { useContext, useMemo } from 'react';
import { createStore } from 'redux';
import { getUrl } from '@atlaskit/linking-common';
import { extractPreview } from '@atlaskit/link-extractors';
import { cardReducer } from './reducers';
import { SmartCardContext } from './state/context';
import CardClient from './client';
export function SmartCardProvider({
  storeOptions,
  client: customClient,
  authFlow: customAuthFlow,
  children,
  renderers,
  featureFlags,
  isAdminHubAIEnabled,
  product
}) {
  const parentContext = useContext(SmartCardContext);
  const defaultInitialState = useMemo(() => {
    return {};
  }, []);
  const {
    initialState
  } = storeOptions || {
    initialState: defaultInitialState
  };
  const store = useMemo(() => {
    return createStore(cardReducer, initialState);
  }, [initialState]);
  const providerValue = useMemo(() => {
    const client = customClient || new CardClient();

    // If product is passed into provider, set it on the client if setProduct is supported
    if (product && client.setProduct) {
      client.setProduct(product);
    }
    const authFlow = customAuthFlow || 'oauth2';
    const getPreview = (url, platform) => {
      const cardState = getUrl(store, url);
      return cardState.details ? extractPreview(cardState.details.data, platform) : undefined;
    };
    return {
      renderers,
      store,
      prefetchStore: {},
      connections: {
        client
      },
      config: {
        authFlow
      },
      extractors: {
        getPreview
      },
      featureFlags,
      isAdminHubAIEnabled,
      product
    };
  }, [customClient, customAuthFlow, isAdminHubAIEnabled, product, renderers, featureFlags, store]);
  return /*#__PURE__*/React.createElement(SmartCardContext.Provider, {
    value: parentContext || providerValue
  }, children);
}
export default SmartCardProvider;