import { type JsonLd } from 'json-ld-types';
import { type InvokePayload, type InvocationSearchPayload, type EnvironmentsKeys, type ProductType } from '@atlaskit/linking-common';
import { type CardClient as CardClientInterface } from './types';
import { type BatchResponse, type SuccessResponse, type ErrorResponse } from './types/responses';
import { type InvokeRequest } from './types/requests';
import { LRUMap } from 'lru_map';
export declare const urlResponsePromiseCache: LRUMap<string, Promise<SuccessResponse | ErrorResponse>>;
export default class CardClient implements CardClientInterface {
    private resolverUrl;
    readonly envKey?: string;
    readonly baseUrlOverride?: string;
    private loadersByDomain;
    private retryConfig;
    private resolvedCache;
    private product?;
    constructor(envKey?: EnvironmentsKeys, baseUrlOverride?: string);
    setProduct(product: ProductType): void;
    private postBatchResolve;
    private batchResolve;
    private batchResolveAris;
    private createLoader;
    private getLoader;
    private resolveUrl;
    prefetchData(url: string): Promise<JsonLd.Response | undefined>;
    private isRateLimitError;
    fetchData(url: string, force?: boolean): Promise<JsonLd.Response>;
    /**
     * Fetch data for multiple ARIs (batch) in one operation
     * @param aris Array of ARIs to fetch data for
     */
    fetchDataAris(aris: string[]): Promise<BatchResponse>;
    postData(data: InvokePayload<InvokeRequest>): Promise<JsonLd.Response>;
    /**
     * Make request to the Search endpoint See `InvocationRequest` in ORS openapi.yaml for backend
     * spec.
     * @param data Payload including the search provider key and query. An empty search query string
     * results in recent results being returned (pre-query).
     * @returns JsonLd collection of search results.
     */
    search(data: InvokePayload<InvocationSearchPayload>): Promise<JsonLd.Collection>;
    fetchAvailableSearchProviders(): Promise<import("./types/responses").SearchProviderInfo[]>;
    private mapErrorResponse;
    /**
     * This method will strigify both enumerable and  non enumerable properties of an object
     * @param err
     * @returns object serialized to JSON with both enumerable and non enumerable objects
     */
    private stringifyError;
}
