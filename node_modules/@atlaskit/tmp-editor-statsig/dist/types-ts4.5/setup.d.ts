import { editorExperimentsConfig } from './experiments-config';
export type EditorExperimentOverrides = Partial<{
    [ExperimentName in keyof typeof editorExperimentsConfig]: (typeof editorExperimentsConfig)[ExperimentName]['defaultValue'];
}>;
export type EditorExperimentParamOverrides = {
    [experimentName: string]: {
        [paramName: string]: any;
    };
};
export declare let _overrides: Partial<{
    platform_editor_reduce_noisy_steps_ncs: boolean;
    'example-boolean': boolean;
    'example-multivariate': "one" | "two" | "three";
    'test-new-experiments-package': boolean;
    support_table_in_comment: boolean;
    platform_editor_exp_lazy_node_views: boolean;
    platform_renderer_table_sticky_scrollbar: boolean;
    platform_editor_controls_performance_fixes: boolean;
    platform_editor_prevent_toolbar_layout_shifts: boolean;
    comment_on_bodied_extensions: boolean;
    advanced_layouts: boolean;
    single_column_layouts: boolean;
    support_table_in_comment_jira: boolean;
    'platform_editor_ai-prompts-placeholder': "test" | "control";
    'nested-tables-in-tables': boolean;
    platform_editor_ai_unsplash_page_header: boolean;
    platform_editor_blockquote_in_text_formatting_menu: boolean;
    platform_editor_advanced_code_blocks: boolean;
    platform_editor_element_drag_and_drop_multiselect: boolean;
    platform_editor_ai_edit_response_in_preview: boolean;
    platform_editor_controls: "control" | "variant1";
    platform_editor_insertion: "control" | "variant1";
    platform_editor_vanilla_dom: boolean;
    editor_text_highlight_orange_to_yellow: "test" | "control";
    platform_editor_ai_proactive_ai_nudge_parameters: "control" | "variant1";
    platform_editor_offline_editing_web: boolean;
    editor_ai_inline_suggestion_date_v2: "test" | "control";
    platform_editor_tables_drag_and_drop: boolean;
    platform_editor_tables_table_selector: boolean;
    platform_editor_usesharedpluginstateselector: boolean;
    platform_renderer_fix_analytics_memo_callback: boolean;
    editor_ai_contextual_selection_toolbar_button: "test" | "control";
    editor_ai_converge_free_gen_on_rovo: boolean;
    editor_ai_cmd_palette_remove_retry: boolean;
    platform_editor_stop_width_reflows: boolean;
    platform_editor_core_static_emotion: boolean;
    editor_ai_comment_freegen_rovo: boolean;
    confluence_p2m_style_recalc_and_expand_joint_exp: boolean;
    platform_editor_nodevisibility: boolean;
    platform_editor_breakout_resizing: boolean;
    platform_editor_exp_disable_lnv: boolean;
    platform_editor_ai_quickstart_command: boolean;
    editor_ai_in_editor_streaming: boolean;
    platform_editor_hide_floating_toolbar_in_ssr: boolean;
    platform_editor_smart_card_open_overlay_perf: boolean;
    platform_editor_toolbar_rerender_optimization_exp: boolean;
    platform_editor_controls_toolbar_pinning_exp: boolean;
}>;
export declare let _paramOverrides: EditorExperimentParamOverrides;
export declare let _product: 'confluence' | 'jira' | 'test' | undefined;
/**
 * This function is used to set up the editor experiments for testing purposes.
 * It should be called before running code that depends on editor experiments.
 *
 * @example
 * ```ts
 * setupEditorExperiments('confluence', {
 *  'experiment-name': 'value',
 * });
 * ```
 */
export declare function setupEditorExperiments(product: 'confluence' | 'jira' | 'test', 
/**
 * Overrides are used to set the group of an experiment for testing purposes.
 * This is useful when you want to test a specific experiment group.
 */
groupOverrides?: EditorExperimentOverrides, 
/**
 * Param overrides are used to set the experiment parameters for testing purposes.
 * This is useful when you want to tweak the experiment parameters for testing.
 */
paramOverrides?: EditorExperimentParamOverrides): void;
