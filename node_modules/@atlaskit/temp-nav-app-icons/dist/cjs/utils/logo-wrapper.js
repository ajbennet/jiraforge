/* logo-wrapper.tsx generated by @compiled/babel-plugin v0.36.1 */
/* eslint-disable @atlaskit/ui-styling-standard/no-imported-style-values */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogoWrapper = LogoWrapper;
require("./logo-wrapper.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _tokens = require("@atlaskit/tokens");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  root: "_1e0c1o8l _vwz4idpf"
};

// These styles set the `color` property so that the child SVG can inherit the correct text color using "currentColor"
var logoTextColorMap = {
  light: "_syazqlpt",
  dark: "_syazz6c6"
};
var sizeMap = {
  xxsmall: "_4t3i7vkz",
  xsmall: "_4t3igktf",
  small: "_4t3i1tcg",
  medium: "_4t3izwfg",
  large: "_4t3i1ylp",
  xlarge: "_4t3ickbl"
};

/* eslint-disable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */
var appearanceMap = {
  brand: "_1b3i18uv _9aea18uv _1wyc1fxt",
  neutral: "_1b3i15cr _9aea1fxt _1wyc1fxt",
  inverse: "_1b3i1fxt _9aea15cr _1wyc15cr",
  legacy: "_1b3iu67f _9aeadoyu _1wycu67f"
};
/* eslint-enable @atlaskit/ui-styling-standard/no-imported-style-values */
/* eslint-enable @atlaskit/ui-styling-standard/no-unsafe-values */

function LogoWrapper(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'brand' : _ref$appearance,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'small' : _ref$size,
    svg = _ref.svg,
    customThemeSvg = _ref.customThemeSvg,
    label = _ref.label,
    userDefinedTestId = _ref.testId,
    customIconColor = _ref.iconColor,
    customTextColor = _ref.textColor;
  var _useThemeObserver = (0, _tokens.useThemeObserver)(),
    colorMode = _useThemeObserver.colorMode;
  var testId = userDefinedTestId && "".concat(userDefinedTestId, "--wrapper");
  var isCustomThemed = customThemeSvg && (customIconColor || customTextColor);
  return /*#__PURE__*/React.createElement("span", {
    style: {
      // Nav v3 passes in "inherit" incorrectly for iconColor, so we fall back to textColor when this happens.
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      '--themed-icon-color': customIconColor === 'inherit' ? customTextColor : customIconColor,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      '--themed-text-color': customTextColor || 'inherit'
    },
    "data-testid": testId
    // For logos, the label will always be present and will never be an empty string, so we can always set these aria attributes.
    ,
    "aria-label": label,
    role: label ? 'img' : undefined,
    "aria-hidden": label === '' ? true : undefined
    // We are using dangerouslySetInnerHTML here to tell React not to track changes to the SVG elements.
    // This is because the SVG elements are static and will not change, so we get a little performance benefit by
    // bypassing React.
    ,
    dangerouslySetInnerHTML: {
      __html: isCustomThemed ? customThemeSvg : svg
    },
    className: (0, _runtime.ax)([styles.root,
    // Setting the color so that the SVG can inherit the correct text color using "currentColor"
    logoTextColorMap[colorMode !== null && colorMode !== void 0 ? colorMode : 'light'], sizeMap[size], appearanceMap[appearance]])
  });
}