"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioOption = exports.CheckboxOption = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _deviceCheck = require("@atlaskit/ds-lib/device-check");
var _checkbox = _interopRequireDefault(require("@atlaskit/icon/glyph/checkbox"));
var _radio = _interopRequireDefault(require("@atlaskit/icon/glyph/radio"));
var _svg = _interopRequireDefault(require("@atlaskit/icon/svg"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _visuallyHidden = _interopRequireDefault(require("@atlaskit/visually-hidden"));
var _excluded = ["getStyles", "Icon", "children", "innerProps", "innerRef"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var getPrimitiveStyles = function getPrimitiveStyles(props) {
  var cx = props.cx,
    className = props.className,
    getStyles = props.getStyles,
    isDisabled = props.isDisabled,
    isFocused = props.isFocused,
    isSelected = props.isSelected;
  var baseStyles = {
    alignItems: 'center',
    backgroundColor: isFocused ? "var(--ds-background-neutral-subtle-hovered, #091E420F)" : 'transparent',
    color: isDisabled ? "var(--ds-text-disabled, inherit)" : 'inherit',
    display: 'flex ',
    paddingBottom: "var(--ds-space-050, 4px)",
    paddingLeft: "var(--ds-space-200, 16px)",
    paddingTop: "var(--ds-space-050, 4px)",
    // This 'none' needs to be present to ensure that style is not applied when
    // the option is selected but not focused.
    boxShadow: isFocused ? "inset 2px 0px 0px ".concat("var(--ds-border-focused, #388BFF)") : 'none',
    ':active': {
      backgroundColor: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
    },
    '@media screen and (-ms-high-contrast: active)': {
      borderLeft: isFocused ? '2px solid transparent' : ''
    }
  };
  var augmentedStyles = (0, _react2.css)(_objectSpread(_objectSpread({}, getStyles('option', props)), baseStyles));
  var bemClasses = {
    option: true,
    'option--is-disabled': isDisabled,
    'option--is-focused': isFocused,
    'option--is-selected': isSelected
  };

  // maintain react-select API
  return {
    styles: augmentedStyles,
    classes: cx(bemClasses, className)
  };
};

// state of the parent option

// the primary color represents the outer or background element
var getPrimaryColor = function getPrimaryColor(_ref) {
  var isActive = _ref.isActive,
    isDisabled = _ref.isDisabled,
    isFocused = _ref.isFocused,
    isSelected = _ref.isSelected;
  if (isDisabled) {
    return "var(--ds-background-disabled, #091E4208)";
  } else if (isSelected && isActive) {
    return "var(--ds-background-selected-bold-pressed, #09326C)";
  } else if (isActive) {
    return "var(--ds-background-selected-pressed, #85B8FF)";
  } else if (isFocused && isSelected) {
    return "var(--ds-background-selected-bold-hovered, #0055CC)";
  } else if (isFocused) {
    return "var(--ds-surface, #FFFFFF)";
  } else if (isSelected) {
    return "var(--ds-background-selected-bold, #0C66E4)";
  }
  return "var(--ds-background-neutral, #091E420F)";
};

// the secondary color represents the radio dot or checkmark
var getSecondaryColor = function getSecondaryColor(_ref2) {
  var isActive = _ref2.isActive,
    isDisabled = _ref2.isDisabled,
    isSelected = _ref2.isSelected;
  if (isDisabled && isSelected) {
    return "var(--ds-text-disabled, #091E424F)";
  } else if (isActive && isSelected && !isDisabled) {
    return "var(--ds-surface, #FFFFFF)";
  } else if (!isSelected) {
    return 'transparent';
  }
  return "var(--ds-surface, #FFFFFF)";
};

// the border color surrounds the checkbox/radio
var getBorderColor = function getBorderColor(_ref3) {
  var isActive = _ref3.isActive,
    isDisabled = _ref3.isDisabled,
    isSelected = _ref3.isSelected;
  if (isSelected || isActive || isDisabled) {
    return 'currentColor';
  }
  return "var(--ds-border-input, #8590A2)";
};
var baseIconStyles = (0, _react2.css)({
  display: 'flex ',
  alignItems: 'center',
  flexShrink: 0,
  paddingInlineEnd: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-unsafe-selectors
  '& svg rect, & svg circle:first-of-type': {
    strokeLinejoin: 'round',
    strokeWidth: "var(--ds-border-width, 1px)"
  }
});
var baseOptionStyles = (0, _react2.css)({
  flexGrow: 1,
  overflowX: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});

// eslint-disable-next-line @repo/internal/react/no-class-components
var ControlOption = function ControlOption(props) {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isActive = _useState2[0],
    setIsActive = _useState2[1];
  var onMouseDown = (0, _react.useCallback)(function () {
    return setIsActive(true);
  }, []);
  var onMouseUp = (0, _react.useCallback)(function () {
    return setIsActive(false);
  }, []);
  var getStyles = props.getStyles,
    Icon = props.Icon,
    children = props.children,
    innerProps = props.innerProps,
    innerRef = props.innerRef,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var isDisabled = props.isDisabled,
    isSelected = props.isSelected,
    isFocused = props.isFocused;

  // prop assignment
  var newProps = _objectSpread(_objectSpread({}, innerProps), {}, {
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    onMouseLeave: onMouseUp
  });
  var _getPrimitiveStyles = getPrimitiveStyles(_objectSpread({
      getStyles: getStyles
    }, rest)),
    styles = _getPrimitiveStyles.styles,
    classes = _getPrimitiveStyles.classes;
  var isVoiceOver = (0, _deviceCheck.isAppleDevice)() &&
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  (0, _platformFeatureFlags.fg)('design_system_select-a11y-improvement');
  return (
    // These need to remain this way because `react-select` passes props with
    // styles inside, and that must be done dynamically.
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", (0, _extends2.default)({
      css: styles,
      className: classes,
      ref: innerRef
    }, newProps), (0, _react2.jsx)("div", {
      css: [baseIconStyles,
      // Here we are adding a border to the Checkbox and Radio SVG icons
      // This is an a11y fix for Select only for now but it may be rolled
      // into the `@atlaskit/icon` package's Checkbox and Radio SVGs later
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      {
        // This can eventually be changed to static styles that are
        // applied conditionally (e.g. `isActive && activeBorderStyles`),
        // but considering there are multiple instances of `react-select`
        // requiring styles to be generated dynamically, it seemed like a
        // low priority.
        // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
        '& svg rect, & svg circle:first-of-type': {
          stroke: getBorderColor({
            isActive: isActive,
            isDisabled: isDisabled,
            isSelected: isSelected
          })
        }
      }]
    }, !!Icon ? (0, _react2.jsx)(Icon, {
      label: "",
      primaryColor: getPrimaryColor({
        isDisabled: isDisabled,
        isSelected: isSelected,
        isFocused: isFocused,
        isActive: isActive
      }),
      secondaryColor: getSecondaryColor({
        isDisabled: isDisabled,
        isSelected: isSelected,
        isActive: isActive
      }),
      isFacadeDisabled: true
    }) : null), (0, _react2.jsx)("div", {
      css: baseOptionStyles
    }, children, isVoiceOver && (isSelected || isDisabled) && (0, _react2.jsx)(_visuallyHidden.default, null, "".concat(isSelected ? ',selected' : '').concat(isDisabled ? ',dimmed' : ''))))
  );
};
var NewCheckboxIcon = function NewCheckboxIcon(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    (0, _react2.jsx)(_svg.default, props, (0, _react2.jsx)("g", {
      fillRule: "evenodd"
    }, (0, _react2.jsx)("rect", {
      x: "5.5",
      y: "5.5",
      width: "13",
      height: "13",
      rx: "1.5",
      fill: "currentColor"
    }), (0, _react2.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
      fill: "inherit"
    })))
  );
};
var NewRadioIcon = function NewRadioIcon(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    (0, _react2.jsx)(_svg.default, props, (0, _react2.jsx)("g", {
      fillRule: "evenodd"
    }, (0, _react2.jsx)("circle", {
      cx: "12",
      cy: "12",
      r: "6.75",
      fill: "currentColor",
      strokeWidth: "1.5"
    }), (0, _react2.jsx)("circle", {
      cx: "12",
      cy: "12",
      r: "3",
      fill: "inherit"
    })))
  );
};

/**
 * __Checkbox option__
 */
var CheckboxOption = exports.CheckboxOption = function CheckboxOption(props
// ): JSX.Element => <ControlOption<OptionT, true> Icon={CheckboxIcon} {...props} />;
) {
  return (0, _react2.jsx)(ControlOption, (0, _extends2.default)({
    Icon:
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix, @atlaskit/platform/no-preconditioning
    (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') && (0, _platformFeatureFlags.fg)('platform-icon-control-migration') ? NewCheckboxIcon :
    // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
    _checkbox.default
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};

/**
 * __Radio option__
 */
var RadioOption = exports.RadioOption = function RadioOption(props) {
  return (
    // TODO https://product-fabric.atlassian.net/browse/DSP-20769
    // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons, @repo/internal/react/no-unsafe-spread-props
    (0, _react2.jsx)(ControlOption, (0, _extends2.default)({
      Icon:
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix, @atlaskit/platform/no-preconditioning
      (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') && (0, _platformFeatureFlags.fg)('platform-icon-control-migration') ? NewRadioIcon :
      // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
      _radio.default
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props))
  );
};