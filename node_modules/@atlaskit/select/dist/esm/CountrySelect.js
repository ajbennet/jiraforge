import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @repo/internal/fs/filename-pattern-match */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { css, jsx } from '@emotion/react';
import { fg } from '@atlaskit/platform-feature-flags';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

import { groupedCountries } from './data/countries';
import Select from './Select';
import { isCountryOptionsGrouped, onCountryOptionFocus } from './utils/country-groups-announcement';
// custom option renderer
var labelStyles = css({
  display: 'flex',
  alignItems: 'center',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: 1.2
});
var flagStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  fontSize: '1.125rem',
  // emoji size
  marginInlineEnd: "var(--ds-space-100, 8px)"
});
var Opt = function Opt(_ref) {
  var children = _ref.children,
    icon = _ref.icon;
  return jsx("div", {
    css: labelStyles
  }, jsx("span", {
    "aria-hidden": "true",
    css: flagStyles
  }, icon), children);
};

// return the country name; used for searching
var getOptionLabel = function getOptionLabel(_ref2) {
  var abbr = _ref2.abbr,
    code = _ref2.code,
    name = _ref2.name;
  return "".concat(name, " (").concat(abbr.toUpperCase(), ") +").concat(code);
};

// set the country's abbreviation for the option value, (also searchable)
var getOptionValue = function getOptionValue(opt) {
  return opt.abbr;
};

// the text node of the control
var controlLabel = function controlLabel(opt) {
  return jsx(Opt, {
    icon: opt.icon
  }, opt.abbr.toUpperCase());
};
// the text node for an option
var optionLabel = function optionLabel(_ref3) {
  var abbr = _ref3.abbr,
    code = _ref3.code,
    icon = _ref3.icon,
    name = _ref3.name;
  return jsx(Opt, {
    icon: icon
  }, getOptionLabel({
    abbr: abbr,
    code: code,
    name: name
  }));
};

// switch formatters based on render context (menu | value)
var formatOptionLabel = function formatOptionLabel(opt, _ref4) {
  var context = _ref4.context;
  return context === 'value' ? controlLabel(opt) : optionLabel(opt);
};

// put it all together
var CountrySelect = function CountrySelect(props) {
  var ariaLiveMessages = props.ariaLiveMessages,
    options = props.options;
  var countryOptions = options || groupedCountries;
  return jsx(Select, _extends({
    isClearable: false,
    formatOptionLabel: formatOptionLabel,
    getOptionLabel: getOptionLabel,
    getOptionValue: getOptionValue,
    isMulti: false,
    options: countryOptions,
    ariaLiveMessages:
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg('design_system_select-a11y-improvement') ? undefined : isCountryOptionsGrouped(countryOptions) ? _objectSpread({
      onFocus: function onFocus(data) {
        return onCountryOptionFocus(data, countryOptions);
      }
    }, ariaLiveMessages) : _objectSpread({}, ariaLiveMessages)
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default CountrySelect;