import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["innerRef", "innerProps"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import { components } from '@atlaskit/react-select';
import { N40A } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
import VisuallyHidden from '@atlaskit/visually-hidden';

// ==============================
// Styled Components
// ==============================

var menuDialogStyles = css({
  zIndex: layers.modal(),
  backgroundColor: "var(--ds-surface-overlay, white)",
  borderRadius: "var(--ds-border-radius-100, 4px)",
  boxShadow: "var(--ds-shadow-overlay, ".concat("0 0 0 1px ".concat(N40A, ", 0 4px 11px ").concat(N40A), ")")
});

/**
 * __Menu dialog__
 * Wrapper for PopupSelect component.
 *
 */
export var MenuDialog = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var maxWidth = _ref.maxWidth,
    minWidth = _ref.minWidth,
    children = _ref.children,
    id = _ref.id,
    style = _ref.style,
    testId = _ref.testId;
  return jsx("div", {
    ref: ref,
    css: [menuDialogStyles,
    // There is not a limited amount of values for the widths, so they need
    // to remain dynamic.
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    {
      maxWidth: maxWidth,
      minWidth: minWidth
    }]
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style,
    id: id,
    "data-testid": testId && "".concat(testId, "--menu")
  }, children);
});

// ==============================
// Custom Components
// ==============================

var dropdownStyles = css({
  width: 32,
  marginInlineEnd: "var(--ds-space-025, 2px)",
  textAlign: 'center'
});
var DropdownIndicator = function DropdownIndicator() {
  return jsx("div", {
    css: dropdownStyles
  }, jsx(SearchIcon, {
    color: "currentColor",
    label: ""
  }));
};
var controlStyles = css({
  padding: "var(--ds-space-100, 8px)".concat(" ", "var(--ds-space-100, 8px)", " ", "var(--ds-space-050, 4px)")
});
var Control = function Control(_ref2) {
  var innerRef = _ref2.innerRef,
    innerProps = _ref2.innerProps,
    props = _objectWithoutProperties(_ref2, _excluded);
  return jsx("div", {
    ref: innerRef,
    css: controlStyles
  }, jsx(components.Control, _extends({}, props, {
    innerProps: innerProps
  })));
};

/**
 * __Dummy control__
 * Overrides the default DummyControl component in Select.
 */
export var DummyControl = function DummyControl(props) {
  return jsx(VisuallyHidden, null, jsx(components.Control, props));
};

// NOTE `props` intentionally omitted from `Fragment`
var Menu = function Menu(_ref3) {
  var children = _ref3.children,
    innerProps = _ref3.innerProps;
  return jsx("div", innerProps, children);
};
var ClearIndicator = function ClearIndicator(props) {
  return jsx(components.ClearIndicator, props);
};
var MultiValueRemove = function MultiValueRemove(props) {
  return jsx(components.MultiValueRemove, props);
};
export var defaultComponents = {
  Control: Control,
  DropdownIndicator: DropdownIndicator,
  Menu: Menu,
  ClearIndicator: ClearIndicator,
  MultiValueRemove: MultiValueRemove
};