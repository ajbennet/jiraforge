import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import { components } from '@atlaskit/react-select';
import { N40A } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
import VisuallyHidden from '@atlaskit/visually-hidden';

// ==============================
// Styled Components
// ==============================

const menuDialogStyles = css({
  zIndex: layers.modal(),
  backgroundColor: "var(--ds-surface-overlay, white)",
  borderRadius: "var(--ds-border-radius-100, 4px)",
  boxShadow: `var(--ds-shadow-overlay, ${`0 0 0 1px ${N40A}, 0 4px 11px ${N40A}`})`
});

/**
 * __Menu dialog__
 * Wrapper for PopupSelect component.
 *
 */
export const MenuDialog = /*#__PURE__*/forwardRef(({
  maxWidth,
  minWidth,
  children,
  id,
  style,
  testId
}, ref) => jsx("div", {
  ref: ref,
  css: [menuDialogStyles,
  // There is not a limited amount of values for the widths, so they need
  // to remain dynamic.
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
  {
    maxWidth,
    minWidth
  }]
  // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
  ,
  style: style,
  id: id,
  "data-testid": testId && `${testId}--menu`
}, children));

// ==============================
// Custom Components
// ==============================

const dropdownStyles = css({
  width: 32,
  marginInlineEnd: "var(--ds-space-025, 2px)",
  textAlign: 'center'
});
const DropdownIndicator = () => jsx("div", {
  css: dropdownStyles
}, jsx(SearchIcon, {
  color: "currentColor",
  label: ""
}));
const controlStyles = css({
  padding: `${"var(--ds-space-100, 8px)"} ${"var(--ds-space-100, 8px)"} ${"var(--ds-space-050, 4px)"}`
});
const Control = ({
  innerRef,
  innerProps,
  ...props
}) => jsx("div", {
  ref: innerRef,
  css: controlStyles
}, jsx(components.Control, _extends({}, props, {
  innerProps: innerProps
})));

/**
 * __Dummy control__
 * Overrides the default DummyControl component in Select.
 */
export const DummyControl = props => jsx(VisuallyHidden, null, jsx(components.Control, props));

// NOTE `props` intentionally omitted from `Fragment`
const Menu = ({
  children,
  innerProps
}) => jsx("div", innerProps, children);
const ClearIndicator = props => jsx(components.ClearIndicator, props);
const MultiValueRemove = props => jsx(components.MultiValueRemove, props);
export const defaultComponents = {
  Control,
  DropdownIndicator,
  Menu,
  ClearIndicator,
  MultiValueRemove
};