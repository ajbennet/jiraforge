import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { useCallback, useState } from 'react';
import { css, jsx } from '@emotion/react';
import { isAppleDevice } from '@atlaskit/ds-lib/device-check';
import CheckboxIcon from '@atlaskit/icon/glyph/checkbox';
import RadioIcon from '@atlaskit/icon/glyph/radio';
import PrimitiveSVGIcon from '@atlaskit/icon/svg';
import { fg } from '@atlaskit/platform-feature-flags';
import VisuallyHidden from '@atlaskit/visually-hidden';
const getPrimitiveStyles = props => {
  const {
    cx,
    className,
    getStyles,
    isDisabled,
    isFocused,
    isSelected
  } = props;
  const baseStyles = {
    alignItems: 'center',
    backgroundColor: isFocused ? "var(--ds-background-neutral-subtle-hovered, #091E420F)" : 'transparent',
    color: isDisabled ? "var(--ds-text-disabled, inherit)" : 'inherit',
    display: 'flex ',
    paddingBottom: "var(--ds-space-050, 4px)",
    paddingLeft: "var(--ds-space-200, 16px)",
    paddingTop: "var(--ds-space-050, 4px)",
    // This 'none' needs to be present to ensure that style is not applied when
    // the option is selected but not focused.
    boxShadow: isFocused ? `inset 2px 0px 0px ${"var(--ds-border-focused, #388BFF)"}` : 'none',
    ':active': {
      backgroundColor: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
    },
    '@media screen and (-ms-high-contrast: active)': {
      borderLeft: isFocused ? '2px solid transparent' : ''
    }
  };
  const augmentedStyles = css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    ...getStyles('option', props),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    ...baseStyles
  });
  const bemClasses = {
    option: true,
    'option--is-disabled': isDisabled,
    'option--is-focused': isFocused,
    'option--is-selected': isSelected
  };

  // maintain react-select API
  return {
    styles: augmentedStyles,
    classes: cx(bemClasses, className)
  };
};

// state of the parent option

// the primary color represents the outer or background element
const getPrimaryColor = ({
  isActive,
  isDisabled,
  isFocused,
  isSelected
}) => {
  if (isDisabled) {
    return "var(--ds-background-disabled, #091E4208)";
  } else if (isSelected && isActive) {
    return "var(--ds-background-selected-bold-pressed, #09326C)";
  } else if (isActive) {
    return "var(--ds-background-selected-pressed, #85B8FF)";
  } else if (isFocused && isSelected) {
    return "var(--ds-background-selected-bold-hovered, #0055CC)";
  } else if (isFocused) {
    return "var(--ds-surface, #FFFFFF)";
  } else if (isSelected) {
    return "var(--ds-background-selected-bold, #0C66E4)";
  }
  return "var(--ds-background-neutral, #091E420F)";
};

// the secondary color represents the radio dot or checkmark
const getSecondaryColor = ({
  isActive,
  isDisabled,
  isSelected
}) => {
  if (isDisabled && isSelected) {
    return "var(--ds-text-disabled, #091E424F)";
  } else if (isActive && isSelected && !isDisabled) {
    return "var(--ds-surface, #FFFFFF)";
  } else if (!isSelected) {
    return 'transparent';
  }
  return "var(--ds-surface, #FFFFFF)";
};

// the border color surrounds the checkbox/radio
const getBorderColor = ({
  isActive,
  isDisabled,
  isSelected
}) => {
  if (isSelected || isActive || isDisabled) {
    return 'currentColor';
  }
  return "var(--ds-border-input, #8590A2)";
};
const baseIconStyles = css({
  display: 'flex ',
  alignItems: 'center',
  flexShrink: 0,
  paddingInlineEnd: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-unsafe-selectors
  '& svg rect, & svg circle:first-of-type': {
    strokeLinejoin: 'round',
    strokeWidth: "var(--ds-border-width, 1px)"
  }
});
const baseOptionStyles = css({
  flexGrow: 1,
  overflowX: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});

// eslint-disable-next-line @repo/internal/react/no-class-components
const ControlOption = props => {
  const [isActive, setIsActive] = useState(false);
  const onMouseDown = useCallback(() => setIsActive(true), []);
  const onMouseUp = useCallback(() => setIsActive(false), []);
  const {
    getStyles,
    Icon,
    children,
    innerProps,
    innerRef,
    ...rest
  } = props;
  const {
    isDisabled,
    isSelected,
    isFocused
  } = props;

  // prop assignment
  const newProps = {
    ...innerProps,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    onMouseLeave: onMouseUp
  };
  const {
    styles,
    classes
  } = getPrimitiveStyles({
    getStyles,
    ...rest
  });
  const isVoiceOver = isAppleDevice() &&
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  fg('design_system_select-a11y-improvement');
  return (
    // These need to remain this way because `react-select` passes props with
    // styles inside, and that must be done dynamically.
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    jsx("div", _extends({
      css: styles,
      className: classes,
      ref: innerRef
    }, newProps), jsx("div", {
      css: [baseIconStyles,
      // Here we are adding a border to the Checkbox and Radio SVG icons
      // This is an a11y fix for Select only for now but it may be rolled
      // into the `@atlaskit/icon` package's Checkbox and Radio SVGs later
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      {
        // This can eventually be changed to static styles that are
        // applied conditionally (e.g. `isActive && activeBorderStyles`),
        // but considering there are multiple instances of `react-select`
        // requiring styles to be generated dynamically, it seemed like a
        // low priority.
        // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
        '& svg rect, & svg circle:first-of-type': {
          stroke: getBorderColor({
            isActive,
            isDisabled,
            isSelected
          })
        }
      }]
    }, !!Icon ? jsx(Icon, {
      label: "",
      primaryColor: getPrimaryColor({
        isDisabled,
        isSelected,
        isFocused,
        isActive
      }),
      secondaryColor: getSecondaryColor({
        isDisabled,
        isSelected,
        isActive
      }),
      isFacadeDisabled: true
    }) : null), jsx("div", {
      css: baseOptionStyles
    }, children, isVoiceOver && (isSelected || isDisabled) && jsx(VisuallyHidden, null, `${isSelected ? ',selected' : ''}${isDisabled ? ',dimmed' : ''}`)))
  );
};
const NewCheckboxIcon = props =>
// eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
jsx(PrimitiveSVGIcon, props, jsx("g", {
  fillRule: "evenodd"
}, jsx("rect", {
  x: "5.5",
  y: "5.5",
  width: "13",
  height: "13",
  rx: "1.5",
  fill: "currentColor"
}), jsx("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
  fill: "inherit"
})));
const NewRadioIcon = props =>
// eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
jsx(PrimitiveSVGIcon, props, jsx("g", {
  fillRule: "evenodd"
}, jsx("circle", {
  cx: "12",
  cy: "12",
  r: "6.75",
  fill: "currentColor",
  strokeWidth: "1.5"
}), jsx("circle", {
  cx: "12",
  cy: "12",
  r: "3",
  fill: "inherit"
})));

/**
 * __Checkbox option__
 */
export const CheckboxOption = (props
// ): JSX.Element => <ControlOption<OptionT, true> Icon={CheckboxIcon} {...props} />;
) => jsx(ControlOption, _extends({
  Icon:
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix, @atlaskit/platform/no-preconditioning
  fg('platform-visual-refresh-icons') && fg('platform-icon-control-migration') ? NewCheckboxIcon :
  // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
  CheckboxIcon
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));

/**
 * __Radio option__
 */
export const RadioOption = props =>
// TODO https://product-fabric.atlassian.net/browse/DSP-20769
// eslint-disable-next-line @atlaskit/design-system/no-legacy-icons, @repo/internal/react/no-unsafe-spread-props
jsx(ControlOption, _extends({
  Icon:
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix, @atlaskit/platform/no-preconditioning
  fg('platform-visual-refresh-icons') && fg('platform-icon-control-migration') ? NewRadioIcon :
  // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
  RadioIcon
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));