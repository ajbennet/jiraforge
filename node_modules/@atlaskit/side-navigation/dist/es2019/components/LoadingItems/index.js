import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { ExitingPersistence, FadeIn } from '@atlaskit/motion';
import { useShouldNestedElementRender } from '../NestableNavigationContent/context';
const baseMotionStyles = css({
  position: 'absolute',
  zIndex: 1,
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/design-system/no-physical-properties
  top: 0,
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/design-system/no-physical-properties
  right: 0,
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/design-system/no-physical-properties
  left: 0
});
const enteringStyles = css({
  position: 'static',
  zIndex: 2
});

/**
 * __Loading items__
 *
 * Loading items conditionally render based on the useShouldNestedElementRender() hook.
 */
const LoadingItems = ({
  children,
  isLoading,
  fallback,
  testId
}) => {
  const {
    shouldRender
  } = useShouldNestedElementRender();
  if (!shouldRender) {
    return children;
  }
  return jsx(ExitingPersistence, null, jsx(FadeIn, {
    key: `loading-section-${isLoading}`,
    duration: "medium"
  }, (motion, state) => jsx("span", _extends({}, motion, {
    "data-testid": testId && `${testId}--${state}`,
    css: [baseMotionStyles, state === 'entering' && enteringStyles]
  }), isLoading ? fallback : children)));
};
export default LoadingItems;