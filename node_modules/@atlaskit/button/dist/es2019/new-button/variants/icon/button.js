import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import Pressable from '@atlaskit/primitives/pressable';
import Tooltip from '@atlaskit/tooltip';
import useIconButton from './use-icon-button';
/**
 * __Icon Button__
 *
 * Renders an icon-only button lets people take a common and recognizable action where space is limited.
 *
 * - [Examples](https://atlassian.design/components/button/icon-button/examples)
 * - [Code](https://atlassian.design/components/button/icon-button/code)
 * - [Usage](https://atlassian.design/components/button/icon-button/usage)
 */
const IconButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Button({
  // Prevent duplicate labels being added.
  'aria-label': preventedAriaLabel,
  'aria-labelledby': ariaLabelledBy,
  analyticsContext,
  appearance,
  autoFocus,
  icon,
  interactionName,
  isDisabled,
  isLoading,
  isSelected,
  isTooltipDisabled = true,
  label,
  onClick,
  onClickCapture,
  onKeyDownCapture,
  onKeyUpCapture,
  onMouseDownCapture,
  onMouseUpCapture,
  onPointerDownCapture,
  onPointerUpCapture,
  onTouchEndCapture,
  onTouchStartCapture,
  shape,
  spacing,
  testId,
  tooltip,
  type = 'button',
  ...unsafeRest
}, ref) {
  // @ts-expect-error
  const {
    className: _className,
    css: _css,
    as: _as,
    style: _style,
    ...saferRest
  } = unsafeRest;

  /**
   * TODO: At some stage I'll look into re-using more logic across 'default' and 'icon'
   * buttons. It's currently duplicated and mostly the same.
   */
  const baseProps = useIconButton({
    analyticsContext,
    appearance,
    ariaLabelledBy,
    autoFocus,
    buttonType: 'button',
    icon,
    interactionName,
    isDisabled,
    isLoading,
    isSelected,
    label,
    onClick,
    onClickCapture,
    onKeyDownCapture,
    onKeyUpCapture,
    onMouseDownCapture,
    onMouseUpCapture,
    onPointerDownCapture,
    onPointerUpCapture,
    onTouchEndCapture,
    onTouchStartCapture,
    ref,
    shape,
    spacing,
    testId
  });
  if (!isTooltipDisabled) {
    var _tooltip$content;
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: (_tooltip$content = tooltip === null || tooltip === void 0 ? void 0 : tooltip.content) !== null && _tooltip$content !== void 0 ? _tooltip$content : label,
      testId: tooltip === null || tooltip === void 0 ? void 0 : tooltip.testId,
      position: tooltip === null || tooltip === void 0 ? void 0 : tooltip.position,
      delay: tooltip === null || tooltip === void 0 ? void 0 : tooltip.delay,
      onShow: tooltip === null || tooltip === void 0 ? void 0 : tooltip.onShow,
      onHide: tooltip === null || tooltip === void 0 ? void 0 : tooltip.onHide,
      mousePosition: tooltip === null || tooltip === void 0 ? void 0 : tooltip.mousePosition,
      analyticsContext: tooltip === null || tooltip === void 0 ? void 0 : tooltip.analyticsContext,
      strategy: tooltip === null || tooltip === void 0 ? void 0 : tooltip.strategy,
      tag: tooltip === null || tooltip === void 0 ? void 0 : tooltip.tag,
      truncate: tooltip === null || tooltip === void 0 ? void 0 : tooltip.truncate,
      component: tooltip === null || tooltip === void 0 ? void 0 : tooltip.component,
      hideTooltipOnClick: tooltip === null || tooltip === void 0 ? void 0 : tooltip.hideTooltipOnClick,
      hideTooltipOnMouseDown: tooltip === null || tooltip === void 0 ? void 0 : tooltip.hideTooltipOnMouseDown,
      ignoreTooltipPointerEvents: tooltip === null || tooltip === void 0 ? void 0 : tooltip.ignoreTooltipPointerEvents
    }, triggerProps => /*#__PURE__*/React.createElement(Pressable, _extends({}, saferRest, {
      // Top level props
      "aria-labelledby": baseProps['aria-labelledby'],
      type: type,
      testId: testId,
      componentName: "IconButton",
      analyticsContext: analyticsContext,
      interactionName: interactionName
      // Shared between tooltip and native props
      ,
      onMouseOver: e => {
        var _triggerProps$onMouse, _saferRest$onMouseOve;
        (_triggerProps$onMouse = triggerProps.onMouseOver) === null || _triggerProps$onMouse === void 0 ? void 0 : _triggerProps$onMouse.call(triggerProps, e);
        (_saferRest$onMouseOve = saferRest.onMouseOver) === null || _saferRest$onMouseOve === void 0 ? void 0 : _saferRest$onMouseOve.call(saferRest, e);
      },
      onMouseOut: e => {
        var _triggerProps$onMouse2, _saferRest$onMouseOut;
        (_triggerProps$onMouse2 = triggerProps.onMouseOut) === null || _triggerProps$onMouse2 === void 0 ? void 0 : _triggerProps$onMouse2.call(triggerProps, e);
        (_saferRest$onMouseOut = saferRest.onMouseOut) === null || _saferRest$onMouseOut === void 0 ? void 0 : _saferRest$onMouseOut.call(saferRest, e);
      },
      onMouseMove: e => {
        var _triggerProps$onMouse3, _saferRest$onMouseMov;
        (_triggerProps$onMouse3 = triggerProps.onMouseMove) === null || _triggerProps$onMouse3 === void 0 ? void 0 : _triggerProps$onMouse3.call(triggerProps, e);
        (_saferRest$onMouseMov = saferRest.onMouseMove) === null || _saferRest$onMouseMov === void 0 ? void 0 : _saferRest$onMouseMov.call(saferRest, e);
      },
      onMouseDown: e => {
        var _triggerProps$onMouse4, _saferRest$onMouseDow;
        (_triggerProps$onMouse4 = triggerProps.onMouseDown) === null || _triggerProps$onMouse4 === void 0 ? void 0 : _triggerProps$onMouse4.call(triggerProps, e);
        (_saferRest$onMouseDow = saferRest.onMouseDown) === null || _saferRest$onMouseDow === void 0 ? void 0 : _saferRest$onMouseDow.call(saferRest, e);
      },
      onFocus: e => {
        var _triggerProps$onFocus, _saferRest$onFocus;
        (_triggerProps$onFocus = triggerProps.onFocus) === null || _triggerProps$onFocus === void 0 ? void 0 : _triggerProps$onFocus.call(triggerProps, e);
        (_saferRest$onFocus = saferRest.onFocus) === null || _saferRest$onFocus === void 0 ? void 0 : _saferRest$onFocus.call(saferRest, e);
      },
      onBlur: e => {
        var _triggerProps$onBlur, _saferRest$onBlur;
        (_triggerProps$onBlur = triggerProps.onBlur) === null || _triggerProps$onBlur === void 0 ? void 0 : _triggerProps$onBlur.call(triggerProps, e);
        (_saferRest$onBlur = saferRest.onBlur) === null || _saferRest$onBlur === void 0 ? void 0 : _saferRest$onBlur.call(saferRest, e);
      }
      // Shared between tooltip and base props
      ,
      onClick: (event, analyticsEvent) => {
        var _baseProps$onClick, _triggerProps$onClick;
        baseProps === null || baseProps === void 0 ? void 0 : (_baseProps$onClick = baseProps.onClick) === null || _baseProps$onClick === void 0 ? void 0 : _baseProps$onClick.call(baseProps, event, analyticsEvent);
        triggerProps === null || triggerProps === void 0 ? void 0 : (_triggerProps$onClick = triggerProps.onClick) === null || _triggerProps$onClick === void 0 ? void 0 : _triggerProps$onClick.call(triggerProps, event);
      },
      ref: ref => {
        var _triggerProps$ref;
        baseProps.ref(ref);
        triggerProps === null || triggerProps === void 0 ? void 0 : (_triggerProps$ref = triggerProps.ref) === null || _triggerProps$ref === void 0 ? void 0 : _triggerProps$ref.call(triggerProps, ref);
      }
      // Base props only
      ,
      xcss: baseProps.xcss,
      isDisabled: baseProps.isDisabled,
      onMouseDownCapture: baseProps.onMouseDownCapture,
      onMouseUpCapture: baseProps.onMouseUpCapture,
      onKeyDownCapture: baseProps.onKeyDownCapture,
      onKeyUpCapture: baseProps.onKeyUpCapture,
      onTouchStartCapture: baseProps.onTouchStartCapture,
      onTouchEndCapture: baseProps.onTouchEndCapture,
      onPointerDownCapture: baseProps.onPointerDownCapture,
      onPointerUpCapture: baseProps.onPointerUpCapture,
      onClickCapture: baseProps.onClickCapture
    }), baseProps.children));
  }
  return /*#__PURE__*/React.createElement(Pressable, _extends({}, saferRest, {
    "aria-labelledby": baseProps['aria-labelledby'],
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    isDisabled: baseProps.isDisabled,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    type: type,
    testId: testId,
    componentName: "IconButton",
    analyticsContext: analyticsContext,
    interactionName: interactionName
  }), baseProps.children);
}));
IconButton.displayName = 'IconButton';
export default IconButton;