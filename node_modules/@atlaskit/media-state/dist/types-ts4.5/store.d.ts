import { type FileState } from './file-state';
export interface Store {
    files: Record<string, FileState>;
}
declare const mediaStoreWithoutDevtools: Omit<Omit<import("zustand/vanilla").StoreApi<Store>, "subscribe"> & {
    subscribe: {
        (listener: (selectedState: Store, previousSelectedState: Store) => void): () => void;
        <U>(selector: (state: Store) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
            equalityFn?: ((a: U, b: U) => boolean) | undefined;
            fireImmediately?: boolean | undefined;
        } | undefined): () => void;
    };
}, "setState"> & {
    setState(nextStateOrUpdater: Store | Partial<Store> | ((state: import("immer/dist/internal").WritableDraft<Store>) => void), shouldReplace?: boolean | undefined): void;
};
export type MediaStore = typeof mediaStoreWithoutDevtools;
export declare const mediaStore: Omit<Omit<import("zustand/vanilla").StoreApi<Store>, "subscribe"> & {
    subscribe: {
        (listener: (selectedState: Store, previousSelectedState: Store) => void): () => void;
        <U>(selector: (state: Store) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
            equalityFn?: ((a: U, b: U) => boolean) | undefined;
            fireImmediately?: boolean | undefined;
        } | undefined): () => void;
    };
}, "setState"> & {
    setState(nextStateOrUpdater: Store | Partial<Store> | ((state: import("immer/dist/internal").WritableDraft<Store>) => void), shouldReplace?: boolean | undefined): void;
};
export declare const createMediaStore: (initialStore?: Store) => Omit<Omit<import("zustand/vanilla").StoreApi<Store>, "subscribe"> & {
    subscribe: {
        (listener: (selectedState: Store, previousSelectedState: Store) => void): () => void;
        <U>(selector: (state: Store) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
            equalityFn?: ((a: U, b: U) => boolean) | undefined;
            fireImmediately?: boolean | undefined;
        } | undefined): () => void;
    };
}, "setState"> & {
    setState(nextStateOrUpdater: Store | Partial<Store> | ((state: import("immer/dist/internal").WritableDraft<Store>) => void), shouldReplace?: boolean | undefined): void;
};
export {};
