import React from 'react';
import { type AnalyticsEventPayload } from '@atlaskit/analytics-next';
import { type TriggerProps } from '@atlaskit/popup/types';
import type { AnalyticsFromDuration, AnalyticsProps, ProfileCardAction, Team, TeamProfileCardTriggerProps, TeamProfileCardTriggerState } from '../../types';
export declare class TeamProfileCardTriggerInternal extends React.PureComponent<TeamProfileCardTriggerProps & AnalyticsProps, TeamProfileCardTriggerState> {
    static defaultProps: Partial<TeamProfileCardTriggerProps>;
    _isMounted: boolean;
    showTimer: number;
    hideTimer: number;
    openedByHover: boolean;
    openTime: number;
    fireAnalytics: (payload: AnalyticsEventPayload) => void;
    fireAnalyticsWithDuration: (generator: AnalyticsFromDuration) => void;
    hideProfilecard: (delay?: number) => void;
    showProfilecard: (delay?: number) => void;
    onClick: (event: React.MouseEvent<HTMLElement>) => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    onClose: () => void;
    openKudosDrawer: () => void;
    closeKudosDrawer: () => void;
    kudosUrl: () => string;
    stopPropagation: (event: React.MouseEvent<HTMLElement>) => void;
    triggerListeners: {
        onClick: (event: React.MouseEvent<HTMLElement>) => void;
        onMouseEnter: () => void;
        onMouseLeave: () => void;
    };
    cardListeners: {
        onClick: (event: React.MouseEvent<HTMLElement>) => void;
        onMouseEnter: () => void;
        onMouseLeave: () => void;
    };
    state: TeamProfileCardTriggerState;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TeamProfileCardTriggerProps): void;
    componentWillUnmount(): void;
    clientFetchProfile: () => void;
    onErrorBoundary: () => void;
    handleClientSuccess(team: Team, shouldShowGiveKudos: boolean, teamCentralBaseUrl: string | undefined): void;
    handleClientError(err: any): void;
    filterActions(): ProfileCardAction[];
    renderProfileCard: () => React.JSX.Element;
    renderKudosLauncher: () => false | React.JSX.Element | undefined;
    renderTrigger: (triggerProps: TriggerProps) => React.JSX.Element;
    renderPopup(): string | number | boolean | Iterable<React.ReactNode> | React.JSX.Element | null | undefined;
    render(): string | number | boolean | Iterable<React.ReactNode> | React.JSX.Element | null | undefined;
}
declare const _default: React.ForwardRefExoticComponent<Pick<Omit<TeamProfileCardTriggerProps & AnalyticsProps, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, never> & {
    cloudId?: string | undefined;
    orgId?: string | undefined;
    teamId?: string | undefined;
    resourceClient?: import("../../types").ProfileClient | undefined;
    actions?: ProfileCardAction[] | undefined;
    position?: import("../../types").ProfilecardTriggerPosition | undefined;
    trigger?: "hover" | "click" | "hover-click" | undefined;
    children?: React.ReactNode;
    addFlag?: ((flag: any) => void) | undefined;
    viewingUserId?: string | undefined;
    generateUserLink?: ((userId: string) => string) | undefined;
    onUserClick?: ((userId: string, event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    viewProfileLink?: string | undefined;
    viewProfileOnClick?: ((event?: React.MouseEvent<Element, MouseEvent> | undefined) => void) | undefined;
    shouldRenderToParent?: boolean | undefined;
    triggerLinkType?: "link" | "none" | "clickable-link" | undefined;
} & {} & React.RefAttributes<any>>;
export default _default;
