/* stage.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./stage.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { createRef, PureComponent } from 'react';
import { CSSTransition } from 'react-transition-group';
import { Box } from '@atlaskit/primitives/compiled';
import { B300, N70 } from '@atlaskit/theme/colors';
import ProgressBar from './bar';
import ProgressMarker from './marker';
const styles = {
  listItemContent: "_1bsb1osq _kqswh2mm"
};
const textColor = {
  unvisited: "_syaz131l",
  current: "_syaz1e6v",
  visited: "_syaz1fxt",
  disabled: "_syaz1lh4"
};
const fontWeight = {
  unvisited: "_k48pi7a9",
  current: "_k48pmoej",
  visited: "_k48pmoej",
  disabled: "_k48pmoej"
};
const getMarkerColor = ({
  status,
  percentageCompleted
}) => {
  switch (status) {
    case 'unvisited':
      return `var(--ds-icon-subtle, ${N70})`;
    case 'current':
    case 'visited':
      return `var(--ds-icon-brand, ${B300})`;
    case 'disabled':
      if (percentageCompleted === 0) {
        return `var(--ds-icon-disabled, ${N70})`;
      }
      // If the percentage completed is greater than 0, we show the brand colour, so that the marker (circle) blends in with the progress bar.
      // Otherwise, the grey marker would be visible within the progress bar.
      return `var(--ds-icon-brand, ${B300})`;
    default:
      return;
  }
};
const listItemStyles = null;
const titleStyles = null;
export default class ProgressTrackerStage extends PureComponent {
  constructor(props) {
    super(props);
    _defineProperty(this, "nodeRefMarker", /*#__PURE__*/createRef());
    _defineProperty(this, "nodeRefBar", /*#__PURE__*/createRef());
    _defineProperty(this, "nodeRefTitle", /*#__PURE__*/createRef());
    _defineProperty(this, "onEntered", () => {
      this.setState({
        transitioning: false,
        oldMarkerColor: getMarkerColor({
          status: this.props.item.status,
          percentageCompleted: this.props.item.percentageComplete
        }),
        oldPercentageComplete: this.props.item.percentageComplete
      });
    });
    this.state = {
      transitioning: false,
      oldMarkerColor: getMarkerColor({
        status: this.props.item.status,
        percentageCompleted: this.props.item.percentageComplete
      }),
      oldPercentageComplete: 0
    };
  }
  UNSAFE_componentWillMount() {
    this.setState({
      ...this.state,
      transitioning: true
    });
  }
  UNSAFE_componentWillReceiveProps() {
    this.setState({
      ...this.state,
      transitioning: true
    });
  }
  shouldShowLink() {
    return this.props.item.status === 'visited' &&
    // TODO: `noLink` is unnecessary as we should just be detecting if the `href` is set...
    !this.props.item.noLink;
  }
  render() {
    const {
      item,
      render,
      transitionDelay,
      transitionSpeed,
      transitionEasing,
      testId
    } = this.props;
    const ariaCurrent = item.status === 'current' ? 'step' : 'false';
    const listInlineStyles = {
      ['--ds--pt--ts']: `${transitionSpeed}ms`,
      ['--ds--pt--td']: `${transitionDelay}ms`,
      ['--ds--pt--te']: transitionEasing,
      ['--ds--pt--mc']: this.state.oldMarkerColor,
      ['--ds--pt--bg']: getMarkerColor({
        status: item.status,
        percentageCompleted: item.percentageComplete
      }),
      listStyleType: 'none'
    };
    return /*#__PURE__*/React.createElement("li", {
      "data-testid": testId
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: listInlineStyles,
      "aria-current": ariaCurrent,
      className: ax(["_6rthze3t _1pfhze3t _12l2ze3t _ahbqze3t _1i4q1hna"])
    }, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.listItemContent
    }, /*#__PURE__*/React.createElement(CSSTransition, {
      appear: true,
      in: this.state.transitioning,
      onEntered: this.onEntered,
      timeout: transitionDelay + transitionSpeed,
      classNames: "fade",
      nodeRef: this.nodeRefMarker
    }, /*#__PURE__*/React.createElement(ProgressMarker, {
      testId: testId && `${testId}-marker`
    })), /*#__PURE__*/React.createElement(CSSTransition, {
      appear: true,
      in: this.state.transitioning,
      onEntered: this.onEntered,
      timeout: transitionDelay + transitionSpeed,
      classNames: "fade",
      nodeRef: this.nodeRefBar
    }, /*#__PURE__*/React.createElement(ProgressBar, {
      testId: testId && `${testId}-bar`,
      percentageComplete: item.percentageComplete
    })), /*#__PURE__*/React.createElement(CSSTransition, {
      appear: true,
      in: this.state.transitioning,
      onEntered: this.onEntered,
      timeout: transitionDelay + transitionSpeed,
      classNames: "fade",
      nodeRef: this.nodeRefTitle
    }, /*#__PURE__*/React.createElement("div", {
      "data-testid": testId && `${testId}-title`,
      className: ax(["_11c81oud _v564ph28 _1pfhv47k _y3gn1h6o _1t9yph28 _1ez2kb7n _1uuw17dr", textColor[item.status], fontWeight[item.status]])
    }, this.shouldShowLink() ? render.link({
      item
    }) : item.label))));
  }
}