/* stage.tsx generated by @compiled/babel-plugin v0.36.1 */
import _readOnlyError from "@babel/runtime/helpers/readOnlyError";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./stage.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { createRef, PureComponent } from 'react';
import { CSSTransition } from 'react-transition-group';
import { Box } from '@atlaskit/primitives/compiled';
import { B300, N70 } from '@atlaskit/theme/colors';
import ProgressBar from './bar';
import ProgressMarker from './marker';
var styles = {
  listItemContent: "_1bsb1osq _kqswh2mm"
};
var textColor = {
  unvisited: "_syaz131l",
  current: "_syaz1e6v",
  visited: "_syaz1fxt",
  disabled: "_syaz1lh4"
};
var fontWeight = {
  unvisited: "_k48pi7a9",
  current: "_k48pmoej",
  visited: "_k48pmoej",
  disabled: "_k48pmoej"
};
var getMarkerColor = function getMarkerColor(_ref) {
  var status = _ref.status,
    percentageCompleted = _ref.percentageCompleted;
  switch (status) {
    case 'unvisited':
      return "var(--ds-icon-subtle, ".concat(N70, ")");
    case 'current':
    case 'visited':
      return "var(--ds-icon-brand, ".concat(B300, ")");
    case 'disabled':
      if (percentageCompleted === 0) {
        return "var(--ds-icon-disabled, ".concat(N70, ")");
      }
      // If the percentage completed is greater than 0, we show the brand colour, so that the marker (circle) blends in with the progress bar.
      // Otherwise, the grey marker would be visible within the progress bar.
      return "var(--ds-icon-brand, ".concat(B300, ")");
    default:
      return;
  }
};
var listItemStyles = null;
var titleStyles = null;
var ProgressTrackerStage = /*#__PURE__*/function (_PureComponent) {
  function ProgressTrackerStage(props) {
    var _this;
    _classCallCheck(this, ProgressTrackerStage);
    _this = _callSuper(this, ProgressTrackerStage, [props]);
    _defineProperty(_this, "nodeRefMarker", /*#__PURE__*/createRef());
    _defineProperty(_this, "nodeRefBar", /*#__PURE__*/createRef());
    _defineProperty(_this, "nodeRefTitle", /*#__PURE__*/createRef());
    _defineProperty(_this, "onEntered", function () {
      _this.setState({
        transitioning: false,
        oldMarkerColor: getMarkerColor({
          status: _this.props.item.status,
          percentageCompleted: _this.props.item.percentageComplete
        }),
        oldPercentageComplete: _this.props.item.percentageComplete
      });
    });
    _this.state = {
      transitioning: false,
      oldMarkerColor: getMarkerColor({
        status: _this.props.item.status,
        percentageCompleted: _this.props.item.percentageComplete
      }),
      oldPercentageComplete: 0
    };
    return _this;
  }
  _inherits(ProgressTrackerStage, _PureComponent);
  return _createClass(ProgressTrackerStage, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {
        transitioning: true
      }));
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps() {
      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {
        transitioning: true
      }));
    }
  }, {
    key: "shouldShowLink",
    value: function shouldShowLink() {
      return this.props.item.status === 'visited' &&
      // TODO: `noLink` is unnecessary as we should just be detecting if the `href` is set...
      !this.props.item.noLink;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        item = _this$props.item,
        render = _this$props.render,
        transitionDelay = _this$props.transitionDelay,
        transitionSpeed = _this$props.transitionSpeed,
        transitionEasing = _this$props.transitionEasing,
        testId = _this$props.testId;
      var ariaCurrent = item.status === 'current' ? 'step' : 'false';
      var listInlineStyles = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, '--ds--pt--ts', "".concat(transitionSpeed, "ms")), '--ds--pt--td', "".concat(transitionDelay, "ms")), '--ds--pt--te', transitionEasing), '--ds--pt--mc', this.state.oldMarkerColor), '--ds--pt--bg', getMarkerColor({
        status: item.status,
        percentageCompleted: item.percentageComplete
      })), "listStyleType", 'none');
      return /*#__PURE__*/React.createElement("li", {
        "data-testid": testId
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        ,
        style: listInlineStyles,
        "aria-current": ariaCurrent,
        className: ax(["_6rthze3t _1pfhze3t _12l2ze3t _ahbqze3t _1i4q1hna"])
      }, /*#__PURE__*/React.createElement(Box, {
        xcss: styles.listItemContent
      }, /*#__PURE__*/React.createElement(CSSTransition, {
        appear: true,
        in: this.state.transitioning,
        onEntered: this.onEntered,
        timeout: transitionDelay + transitionSpeed,
        classNames: "fade",
        nodeRef: this.nodeRefMarker
      }, /*#__PURE__*/React.createElement(ProgressMarker, {
        testId: testId && "".concat(testId, "-marker")
      })), /*#__PURE__*/React.createElement(CSSTransition, {
        appear: true,
        in: this.state.transitioning,
        onEntered: this.onEntered,
        timeout: transitionDelay + transitionSpeed,
        classNames: "fade",
        nodeRef: this.nodeRefBar
      }, /*#__PURE__*/React.createElement(ProgressBar, {
        testId: testId && "".concat(testId, "-bar"),
        percentageComplete: item.percentageComplete
      })), /*#__PURE__*/React.createElement(CSSTransition, {
        appear: true,
        in: this.state.transitioning,
        onEntered: this.onEntered,
        timeout: transitionDelay + transitionSpeed,
        classNames: "fade",
        nodeRef: this.nodeRefTitle
      }, /*#__PURE__*/React.createElement("div", {
        "data-testid": testId && "".concat(testId, "-title"),
        className: ax(["_11c81oud _v564ph28 _1pfhv47k _y3gn1h6o _1t9yph28 _1ez2kb7n _1uuw17dr", textColor[item.status], fontWeight[item.status]])
      }, this.shouldShowLink() ? render.link({
        item: item
      }) : item.label))));
    }
  }]);
}(PureComponent);
export { ProgressTrackerStage as default };