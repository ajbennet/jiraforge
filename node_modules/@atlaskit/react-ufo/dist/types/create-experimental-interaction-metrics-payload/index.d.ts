import type { InteractionMetrics } from '../common';
import type { VCObserverOptions } from '../vc/types';
import { VCObserver } from '../vc/vc-observer';
type InteractionMetricsHandler = (interactionId: string, interaction: InteractionMetrics) => void | Promise<void>;
export declare function installInteractionSink(handler: InteractionMetricsHandler): void;
export declare function sinkExperimentalHandler(sinkFn: (interactionId: string, interaction: InteractionMetrics) => void | Promise<void>): void;
export declare function onExperimentalInteractionComplete(interactionId: string, data: InteractionMetrics, endTime?: number): void;
export declare class ExperimentalVCMetrics {
    vcObserver: VCObserver | null;
    initialize(options: VCObserverOptions): this;
    start({ startTime }: {
        startTime: number;
    }): void;
}
export declare const experimentalVC: ExperimentalVCMetrics;
export declare function getExperimentalVCMetrics(interaction: InteractionMetrics): Promise<import("../common/vc/types").VCResult | null>;
export {};
