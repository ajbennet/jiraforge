import { fg } from '@atlaskit/platform-feature-flags';
import { startLighthouseObserver } from '../additional-payload';
import { setUFOConfig } from '../config';
import { experimentalVC, sinkExperimentalHandler } from '../create-experimental-interaction-metrics-payload';
import { setupHiddenTimingCapture } from '../hidden-timing';
import { postInteractionLog, sinkInteractionHandler, sinkPostInteractionLogHandler } from '../interaction-metrics';
import { getPerformanceObserver } from '../interactions-performance-observer';
import { initialisePressureObserver } from '../machine-utilisation';
import { getVCObserver } from '../vc';
import scheduleIdleCallback from './schedule-idle-callback';
let initialized = false;
function sinkInteraction(instance, payloadPackage) {
  function sinkFn(interactionId, interaction) {
    function onIdle() {
      payloadPackage.createPayloads(interactionId, interaction).then(payloads => {
        // NOTE: This API is used by the UFO DevTool Chrome Extension and Criterion
        const devToolObserver = globalThis.__ufo_devtool_onUfoPayload;
        payloads === null || payloads === void 0 ? void 0 : payloads.forEach(payload => {
          if (typeof devToolObserver === 'function') {
            devToolObserver === null || devToolObserver === void 0 ? void 0 : devToolObserver(payload);
          }
          instance.sendOperationalEvent(payload);
        });
      }).catch(error => {
        throw error;
      });
    }
    scheduleIdleCallback(onIdle);
  }
  sinkInteractionHandler(sinkFn);
}
function sinkExperimentalInteractionMetrics(instance, payloadPackage) {
  function experimentalMetricsSinkFn(interactionId, interaction) {
    function experimentalMetricsOnIdle() {
      const payloadPromise = payloadPackage.createExperimentalMetricsPayload(interactionId, interaction);
      payloadPromise.then(payload => {
        if (payload) {
          // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
          if (fg('enable_ufo_devtools_api_for_extra_events')) {
            // NOTE: This API is used by the UFO DevTool Chrome Extension and Criterion
            const devToolObserver = globalThis.__ufo_devtool_onUfoPayload;
            if (typeof devToolObserver === 'function') {
              devToolObserver === null || devToolObserver === void 0 ? void 0 : devToolObserver(payload);
            }
          }
          instance.sendOperationalEvent(payload);
        }
      });
    }
    scheduleIdleCallback(experimentalMetricsOnIdle);
  }
  sinkExperimentalHandler(experimentalMetricsSinkFn);
}
function sinkPostInteractionLog(instance, createPostInteractionLogPayload) {
  sinkPostInteractionLogHandler(logOutput => {
    scheduleIdleCallback(() => {
      const payload = createPostInteractionLogPayload(logOutput);
      if (payload) {
        // NOTE: This API is used by the UFO DevTool Chrome Extension and also by Criterion
        // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
        if (fg('enable_ufo_devtools_api_for_extra_events')) {
          const devToolObserver = globalThis.__ufo_devtool_onUfoPayload;
          if (typeof devToolObserver === 'function') {
            devToolObserver === null || devToolObserver === void 0 ? void 0 : devToolObserver(payload);
          }
        }
        instance.sendOperationalEvent(payload);
      }
    });
  });
}
export function init(analyticsWebClientAsync, config) {
  var _config$vc;
  if (initialized) {
    return;
  }
  if (fg('platform_ufo_report_cpu_usage')) {
    initialisePressureObserver();
  }
  setUFOConfig(config);
  if ((_config$vc = config.vc) !== null && _config$vc !== void 0 && _config$vc.enabled) {
    var _config$experimentalI;
    const vcOptions = {
      heatmapSize: config.vc.heatmapSize,
      oldDomUpdates: config.vc.oldDomUpdates,
      devToolsEnabled: config.vc.devToolsEnabled,
      selectorConfig: config.vc.selectorConfig,
      ssrEnablePageLayoutPlaceholder: config.vc.ssrEnablePageLayoutPlaceholder
    };
    getVCObserver(vcOptions).start({
      startTime: 0
    });
    postInteractionLog.initializeVCObserver(vcOptions);
    postInteractionLog.startVCObserver({
      startTime: 0
    });
    if (config !== null && config !== void 0 && (_config$experimentalI = config.experimentalInteractionMetrics) !== null && _config$experimentalI !== void 0 && _config$experimentalI.enabled) {
      experimentalVC.initialize(vcOptions).start({
        startTime: 0
      });
    }
  }
  setupHiddenTimingCapture();
  startLighthouseObserver();
  initialized = true;
  if (fg('platform_ufo_enable_events_observer')) {
    if (typeof PerformanceObserver !== 'undefined') {
      const observer = getPerformanceObserver();
      observer.observe({
        type: 'event',
        buffered: true,
        durationThreshold: 16
      });
    }
  }
  Promise.all([analyticsWebClientAsync, import( /* webpackChunkName: "create-payloads" */'../create-payload'), import( /* webpackChunkName: "create-post-interaction-log-payload" */'../create-post-interaction-log-payload')]).then(([awc, payloadPackage, createPostInteractionLogPayloadPackage]) => {
    if (awc.getAnalyticsWebClientPromise) {
      awc.getAnalyticsWebClientPromise().then(client => {
        var _config$experimentalI2, _config$postInteracti;
        const instance = client.getInstance();
        sinkInteraction(instance, payloadPackage);
        if (config !== null && config !== void 0 && (_config$experimentalI2 = config.experimentalInteractionMetrics) !== null && _config$experimentalI2 !== void 0 && _config$experimentalI2.enabled) {
          sinkExperimentalInteractionMetrics(instance, payloadPackage);
        }
        if ((_config$postInteracti = config.postInteractionLog) !== null && _config$postInteracti !== void 0 && _config$postInteracti.enabled) {
          sinkPostInteractionLog(instance, createPostInteractionLogPayloadPackage.default);
        }
      });
    } else if (awc.sendOperationalEvent) {
      var _config$experimentalI3, _config$postInteracti2;
      sinkInteraction(awc, payloadPackage);
      if (config !== null && config !== void 0 && (_config$experimentalI3 = config.experimentalInteractionMetrics) !== null && _config$experimentalI3 !== void 0 && _config$experimentalI3.enabled) {
        sinkExperimentalInteractionMetrics(awc, payloadPackage);
      }
      if ((_config$postInteracti2 = config.postInteractionLog) !== null && _config$postInteracti2 !== void 0 && _config$postInteracti2.enabled) {
        sinkPostInteractionLog(awc, createPostInteractionLogPayloadPackage.default);
      }
    }
  });
}