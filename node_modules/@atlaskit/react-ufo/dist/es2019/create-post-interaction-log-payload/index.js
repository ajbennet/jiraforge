import coinflip from '../coinflip';
import { getConfig, getPostInteractionRate } from '../config';
import { isSegmentLabel, sanitizeUfoName } from '../create-payload/common/utils';
import { getReactUFOPayloadVersion } from '../create-payload/utils/get-react-ufo-payload-version';
import { getPageVisibilityState } from '../hidden-timing';
import getLateMutations from './get-late-mutations';
function getParentStack(labelStack) {
  if (!labelStack || labelStack.length <= 1) {
    return null;
  }
  return labelStack.slice(0, labelStack.length - 1);
}
function getSegmentId(labelStack) {
  if (!labelStack) {
    return null;
  }
  const leafLabelStack = labelStack[labelStack.length - 1];
  if (isSegmentLabel(leafLabelStack)) {
    return leafLabelStack.segmentId;
  }
  const parentStack = getParentStack(labelStack);
  if (!parentStack) {
    return null;
  }
  return getSegmentId(parentStack);
}
function getParentSegmentId(labelStack) {
  return getSegmentId(getParentStack(labelStack));
}

/**
 * Whenever a render happen, all parent segment have timing reported
 * This method tries to reduce that noise
 */
function removeCascadingParentTimingReport(reactProfilerTimings) {
  const timingIndex = new Map();
  reactProfilerTimings.forEach(timing => {
    const segmentId = getSegmentId(timing.labelStack);
    if (segmentId) {
      var _timingIndex$get;
      const timingArray = (_timingIndex$get = timingIndex.get(segmentId)) !== null && _timingIndex$get !== void 0 ? _timingIndex$get : [];
      timingIndex.set(segmentId, timingArray);
      timingArray.push(timing);
    }
  });
  reactProfilerTimings.forEach(timing => {
    const parentSegmentId = getParentSegmentId(timing.labelStack);
    if (parentSegmentId) {
      const parentTimings = timingIndex.get(parentSegmentId);
      const filteredParentTimings = parentTimings === null || parentTimings === void 0 ? void 0 : parentTimings.filter(parentTiming => {
        return !(parentTiming.startTime === timing.startTime && parentTiming.actualDuration === timing.actualDuration);
      });
      if (filteredParentTimings) {
        timingIndex.set(parentSegmentId, filteredParentTimings);
      } else {
        timingIndex.delete(parentSegmentId);
      }
    }
  });
  return [...timingIndex.values()].flatMap(v => v);
}
function transformReactProfilerTimings(reactProfilerTimings) {
  const filtered = removeCascadingParentTimingReport(reactProfilerTimings !== null && reactProfilerTimings !== void 0 ? reactProfilerTimings : []);
  const reactProfilerTimingsMap = filtered.reduce((result, {
    labelStack,
    startTime,
    commitTime,
    actualDuration,
    type
  }) => {
    if (labelStack && type !== 'nested-update') {
      const label = labelStack.map(ls => ls.name).join('/');
      const start = Math.round(startTime);
      const end = Math.round(commitTime);
      const timing = result.get(label) || {
        labelStack: label,
        startTime: start,
        endTime: end,
        mountCount: 0,
        rerenderCount: 1,
        renderDuration: 0
      };
      if (start < timing.startTime) {
        timing.startTime = Math.round(start);
      }
      if (end > timing.endTime) {
        timing.endTime = Math.round(end);
      }
      if (type === 'mount') {
        timing.mountCount += 1;
      }
      if (type === 'update') {
        timing.rerenderCount += 1;
      }
      timing.renderDuration += Math.round(actualDuration);
      result.set(label, timing);
    }
    return result;
  }, new Map());
  return [...reactProfilerTimingsMap.values()];
}
function createPostInteractionLogPayload({
  lastInteractionFinish,
  reactProfilerTimings,
  lastInteractionFinishVCResult,
  postInteractionFinishVCResult
}) {
  var _window$location;
  const config = getConfig();
  if (!config) {
    throw Error('UFO Configuration not provided');
  }
  const ufoName = sanitizeUfoName(lastInteractionFinish.ufoName);
  const rate = getPostInteractionRate(ufoName, lastInteractionFinish.type);
  if (!coinflip(rate)) {
    return null;
  }
  const pageVisibilityState = getPageVisibilityState(lastInteractionFinish.start, lastInteractionFinish.end);
  if (pageVisibilityState !== 'visible') {
    return null;
  }

  // Align post-interaction-logs closer to UFO event behaviour,
  // e.g. also check for aborted or failed events

  if (lastInteractionFinish.abortReason) {
    return null;
  }
  if (lastInteractionFinish.errors.length > 0) {
    return null;
  }
  const maxEndTimeFromProfiler = reactProfilerTimings ? Math.max(...reactProfilerTimings.map(t => t.commitTime)) : lastInteractionFinish.end;
  const revisedEndTime = Math.round(maxEndTimeFromProfiler);
  const revisedTtai = Math.round(maxEndTimeFromProfiler - lastInteractionFinish.start);
  const lastInteractionFinishStart = Math.round(lastInteractionFinish.start);
  const lastInteractionFinishEnd = Math.round(lastInteractionFinish.end);
  const lastInteractionFinishTTAI = Math.round(lastInteractionFinish.end - lastInteractionFinish.start);
  let lastInteractionFinishVC90 = null;
  let lastInteractionFinishVCClean = false;
  const lastInteractionFinishVCRev = lastInteractionFinishVCResult === null || lastInteractionFinishVCResult === void 0 ? void 0 : lastInteractionFinishVCResult['ufo:vc:rev'];
  const lastInteractionFinishRevision = lastInteractionFinishVCRev === null || lastInteractionFinishVCRev === void 0 ? void 0 : lastInteractionFinishVCRev.find(({
    revision
  }) => revision === 'fy25.02');
  if (lastInteractionFinishRevision !== null && lastInteractionFinishRevision !== void 0 && lastInteractionFinishRevision.clean) {
    var _lastInteractionFinis;
    lastInteractionFinishVCClean = true;
    lastInteractionFinishVC90 = (_lastInteractionFinis = lastInteractionFinishRevision['metric:vc90']) !== null && _lastInteractionFinis !== void 0 ? _lastInteractionFinis : null;
  }
  let postInteractionFinishVCRatios = {};
  let postInteractionFinishVCClean = false;
  let revisedVC90 = null;
  let lateMutations = [];
  const postInteractionFinishVCRev = postInteractionFinishVCResult === null || postInteractionFinishVCResult === void 0 ? void 0 : postInteractionFinishVCResult['ufo:vc:rev'];
  const postInteractionFinishRevision = postInteractionFinishVCRev === null || postInteractionFinishVCRev === void 0 ? void 0 : postInteractionFinishVCRev.find(({
    revision
  }) => revision === 'fy25.02');
  if (postInteractionFinishRevision !== null && postInteractionFinishRevision !== void 0 && postInteractionFinishRevision.clean) {
    postInteractionFinishVCClean = true;
    postInteractionFinishVCRatios = postInteractionFinishVCResult === null || postInteractionFinishVCResult === void 0 ? void 0 : postInteractionFinishVCResult['ufo:vc:ratios'];
    if (typeof lastInteractionFinishVC90 === 'number') {
      var _postInteractionFinis;
      revisedVC90 = (_postInteractionFinis = postInteractionFinishRevision['metric:vc90']) !== null && _postInteractionFinis !== void 0 ? _postInteractionFinis : null;
    }
    const vcDetails = postInteractionFinishRevision.vcDetails;
    if (vcDetails) {
      lateMutations = getLateMutations(vcDetails, lastInteractionFinish, postInteractionFinishVCRatios);
    }
  }
  return {
    actionSubject: 'experience',
    action: 'measured',
    eventType: 'operational',
    source: 'measured',
    tags: ['observability'],
    attributes: {
      properties: {
        // basic
        'event:hostname': ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || 'unknown',
        'event:product': config.product,
        'event:schema': '1.0.0',
        'event:source': {
          name: 'react-ufo/web',
          version: getReactUFOPayloadVersion(lastInteractionFinish.type, true) // always 1.0.1 as `reactProfileTimings` has `labelStack` as an array
        },
        'event:region': config.region || 'unknown',
        'experience:key': 'custom.post-interaction-logs',
        postInteractionLog: {
          lastInteractionFinish: {
            ...lastInteractionFinish,
            ufoName,
            start: lastInteractionFinishStart,
            end: lastInteractionFinishEnd,
            ttai: lastInteractionFinishTTAI,
            vc90: lastInteractionFinishVC90,
            vcClean: lastInteractionFinishVCClean
          },
          revisedEndTime,
          revisedTtai,
          revisedVC90,
          vcClean: postInteractionFinishVCClean,
          lateMutations,
          reactProfilerTimings: transformReactProfilerTimings(reactProfilerTimings)
        }
      }
    }
  };
}
export default createPostInteractionLogPayload;