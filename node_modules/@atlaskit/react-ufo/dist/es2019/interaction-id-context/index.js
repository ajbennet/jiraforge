import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createContext } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';

// Same structure as react's useRef.
// This allows modals to use a ref to scope their value
// const id = useRef(null);
// <InteractionIDContext.Provider value={id}>...<

// Subscription system for interaction ID changes

const listeners = new Set();

// Observable interaction ID implementation
class ObservableInteractionID {
  constructor() {
    _defineProperty(this, "_current", null);
  }
  get current() {
    return this._current;
  }
  set current(newId) {
    const oldId = this._current;
    this._current = newId;

    // Notify all listeners if the ID actually changed and feature flag is enabled
    if (oldId !== newId && fg('platform_ufo_hold_cross_interaction')) {
      listeners.forEach(listener => listener(newId));
    }
  }
}

// Type declaration for globalThis extension

// Ensures a single DefaultInteractionID instance exists across the entire application,
// even when the module is loaded multiple times in different contexts
const initializeGlobalDefaultInteractionID = () => {
  // Return existing instance if already initialized
  if (globalThis.__UFO_DEFAULT_INTERACTION_ID__) {
    return globalThis.__UFO_DEFAULT_INTERACTION_ID__;
  }

  // Create and store new instance globally
  const instance = new ObservableInteractionID();
  globalThis.__UFO_DEFAULT_INTERACTION_ID__ = instance;
  return instance;
};

// The default InteractionID object is a global singleton stored in globalThis.
// It holds the root value used in routing and is updated when new interactions start.
export const DefaultInteractionID = initializeGlobalDefaultInteractionID();

// Subscription functions
export const subscribeToInteractionIdChanges = listener => {
  if (!fg('platform_ufo_hold_cross_interaction')) {
    // Return a no-op unsubscribe function when feature flag is disabled
    return () => {};
  }
  listeners.add(listener);
  return () => {
    listeners.delete(listener);
  };
};

// We use a context to allow modals to have their own lifecycle
export default /*#__PURE__*/createContext(DefaultInteractionID);
export const getInteractionId = () => DefaultInteractionID;
export const useInteractionId = () => DefaultInteractionID;