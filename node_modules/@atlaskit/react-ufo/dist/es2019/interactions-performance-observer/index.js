import { getActiveInteraction } from '../interaction-metrics';
let performanceEventObserver;
export const getPerformanceObserver = () => {
  performanceEventObserver = performanceEventObserver || new PerformanceObserver(entries => {
    const list = entries.getEntries();
    for (let entry of list) {
      if (entry.name === 'click') {
        setInteractionPerformanceEvent(entry);
      }
    }
  });
  return performanceEventObserver;
};
export const setInteractionPerformanceEvent = entry => {
  const interaction = getActiveInteraction();
  if ((interaction === null || interaction === void 0 ? void 0 : interaction.type) === 'press') {
    var _interaction$responsi, _interaction$responsi2;
    // if happens there is another event interaction that has started after
    // the initial one, we don't want to replace the values if they have already been set up
    interaction.responsiveness = {
      ...interaction.responsiveness,
      experimentalInputToNextPaint: ((_interaction$responsi = interaction.responsiveness) === null || _interaction$responsi === void 0 ? void 0 : _interaction$responsi.experimentalInputToNextPaint) || entry.duration,
      inputDelay: ((_interaction$responsi2 = interaction.responsiveness) === null || _interaction$responsi2 === void 0 ? void 0 : _interaction$responsi2.inputDelay) || entry.processingStart - entry.startTime
    };
    // if the entry start time is lower than the one in the interaction
    // it means the interaction start time is not accurate, we assign
    // this value which will match the timestamp in the event
    interaction.start = Math.min(interaction.start, entry.startTime);
  }
};