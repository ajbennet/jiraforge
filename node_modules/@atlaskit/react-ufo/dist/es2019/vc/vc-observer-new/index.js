import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { fg } from '@atlaskit/platform-feature-flags';
import EntriesTimeline from './entries-timeline';
import getElementName from './get-element-name';
import VCCalculator_FY25_03 from './metric-calculator/fy25_03';
import ViewportObserver from './viewport-observer';
import WindowEventObserver from './window-event-observer';
const DEFAULT_SELECTOR_CONFIG = {
  id: false,
  testId: true,
  role: false,
  className: false,
  dataVC: true
};
export default class VCObserverNew {
  constructor(config) {
    var _config$isPostInterac, _config$selectorConfi;
    _defineProperty(this, "viewportObserver", null);
    _defineProperty(this, "windowEventObserver", null);
    this.entriesTimeline = new EntriesTimeline();
    this.isPostInteraction = (_config$isPostInterac = config.isPostInteraction) !== null && _config$isPostInterac !== void 0 ? _config$isPostInterac : false;
    this.selectorConfig = (_config$selectorConfi = config.selectorConfig) !== null && _config$selectorConfi !== void 0 ? _config$selectorConfi : DEFAULT_SELECTOR_CONFIG;
    this.viewportObserver = new ViewportObserver({
      onChange: onChangeArg => {
        const {
          time,
          type,
          elementRef,
          visible,
          rect,
          previousRect,
          mutationData
        } = onChangeArg;
        let elementName = 'unknown';
        const element = elementRef.deref();
        if (element) {
          elementName = this.getElementName(element);
        }
        this.entriesTimeline.push({
          time,
          data: {
            type,
            elementName,
            rect,
            previousRect,
            visible,
            attributeName: mutationData === null || mutationData === void 0 ? void 0 : mutationData.attributeName,
            oldValue: mutationData === null || mutationData === void 0 ? void 0 : mutationData.oldValue,
            newValue: mutationData === null || mutationData === void 0 ? void 0 : mutationData.newValue
          }
        });
      }
    });
    this.windowEventObserver = new WindowEventObserver({
      onEvent: ({
        time,
        type
      }) => {
        this.entriesTimeline.push({
          time,
          data: {
            type: 'window:event',
            eventType: type
          }
        });
      }
    });
  }
  start({
    startTime
  }) {
    var _this$viewportObserve, _window, _this$windowEventObse;
    (_this$viewportObserve = this.viewportObserver) === null || _this$viewportObserve === void 0 ? void 0 : _this$viewportObserve.start();
    if ((_window = window) !== null && _window !== void 0 && _window.__SSR_ABORT_LISTENERS__ && fg('platform_ufo_vc_observer_new_ssr_abort_listener')) {
      const abortListeners = window.__SSR_ABORT_LISTENERS__;
      const aborts = abortListeners.aborts;
      if (aborts && typeof aborts === 'object') {
        Object.entries(aborts).forEach(([key, time]) => {
          if (typeof time === 'number') {
            this.entriesTimeline.push({
              time,
              data: {
                type: 'window:event',
                eventType: key
              }
            });
          }
        });
      }
    }
    (_this$windowEventObse = this.windowEventObserver) === null || _this$windowEventObse === void 0 ? void 0 : _this$windowEventObse.start();
    this.entriesTimeline.clear();
  }
  stop() {
    var _this$viewportObserve2, _this$windowEventObse2;
    (_this$viewportObserve2 = this.viewportObserver) === null || _this$viewportObserve2 === void 0 ? void 0 : _this$viewportObserve2.stop();
    (_this$windowEventObse2 = this.windowEventObserver) === null || _this$windowEventObse2 === void 0 ? void 0 : _this$windowEventObse2.stop();
  }
  async getVCResult(param) {
    const {
      start,
      stop,
      interactionId
    } = param;
    const results = [];
    if (fg('platform_ufo_v3_add_start_entry')) {
      this.addStartEntry(start);
    }
    const calculator_fy25_03 = new VCCalculator_FY25_03();
    const orderedEntries = this.entriesTimeline.getOrderedEntries({
      start,
      stop
    });
    const fy25_03 = await calculator_fy25_03.calculate({
      orderedEntries,
      startTime: start,
      stopTime: stop,
      interactionId,
      isPostInteraction: this.isPostInteraction
    });
    if (fy25_03) {
      results.push(fy25_03);
    }
    return results;
  }
  addStartEntry(startTime) {
    this.entriesTimeline.push({
      time: startTime,
      data: {
        type: 'mutation:element',
        elementName: 'START',
        visible: true,
        rect: {
          x: 0,
          y: 0,
          width: window.innerWidth,
          height: window.innerHeight,
          top: 0,
          left: 0,
          bottom: window.innerHeight,
          right: window.innerWidth,
          toJSON: function () {
            return {
              x: this.x,
              y: this.y,
              width: this.width,
              height: this.height,
              top: this.top,
              left: this.left,
              bottom: this.bottom,
              right: this.right
            };
          }
        }
      }
    });
  }
  getElementName(element) {
    return getElementName(this.selectorConfig, element);
  }
}