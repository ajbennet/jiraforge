import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { bind } from 'bind-event-listener';
export default class WindowEventObserver {
  constructor(opts) {
    _defineProperty(this, "unbindFns", []);
    this.onEvent = opts.onEvent;
  }
  bindEvent(type) {
    const unbindCallback = bind(window, {
      type,
      listener: event => {
        if (!event.isTrusted) {
          return;
        }
        this.onEvent({
          time: event.timeStamp,
          type,
          event
        });
      },
      options: {
        passive: true,
        once: true
      }
    });
    this.unbindFns.push(unbindCallback);
  }
  start() {
    this.bindEvent('wheel');
    this.bindEvent('scroll');
    this.bindEvent('keydown');
    this.bindEvent('resize');
  }
  stop() {
    this.unbindFns.forEach(cb => {
      cb();
    });
    this.unbindFns = [];
  }
}