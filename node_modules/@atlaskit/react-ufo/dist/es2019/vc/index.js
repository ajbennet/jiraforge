var _process, _process$env;
import { isVCRevisionEnabled } from '../config';
import { VCObserverNOOP } from './no-op-vc-observer';
import { VCObserver } from './vc-observer';
import VCObserverNew from './vc-observer-new';
export class VCObserverWrapper {
  constructor(opts = {}) {
    this.newVCObserver = null;
    this.oldVCObserver = null;
    if (isVCRevisionEnabled('fy25.03')) {
      this.newVCObserver = new VCObserverNew({
        selectorConfig: opts.selectorConfig
      });
    }
    if (isVCRevisionEnabled('fy25.01') || isVCRevisionEnabled('fy25.02')) {
      this.oldVCObserver = new VCObserver(opts);
    }
  }

  // Helper method to process SSR abort listeners
  processSsrAbortListeners() {
    var _window;
    // Process any SSR abort listeners that remain
    if ((_window = window) !== null && _window !== void 0 && _window.__SSR_ABORT_LISTENERS__) {
      // Clean up any event listeners that may have been registered during SSR
      // This is centralized here so only the wrapper handles unbinding, not individual observers
      if (window.__SSR_ABORT_LISTENERS__.unbinds && Array.isArray(window.__SSR_ABORT_LISTENERS__.unbinds)) {
        window.__SSR_ABORT_LISTENERS__.unbinds.forEach(unbind => {
          if (typeof unbind === 'function') {
            unbind();
          }
        });
      }

      // After all observers had a chance to process abort events,
      // we can safely delete the SSR_ABORT_LISTENERS object
      delete window.__SSR_ABORT_LISTENERS__;
    }
  }
  start({
    startTime,
    experienceKey
  }) {
    if (isVCRevisionEnabled('fy25.01', experienceKey) || isVCRevisionEnabled('fy25.02', experienceKey)) {
      var _this$oldVCObserver;
      (_this$oldVCObserver = this.oldVCObserver) === null || _this$oldVCObserver === void 0 ? void 0 : _this$oldVCObserver.start({
        startTime
      });
    }
    if (isVCRevisionEnabled('fy25.03', experienceKey)) {
      var _this$newVCObserver;
      (_this$newVCObserver = this.newVCObserver) === null || _this$newVCObserver === void 0 ? void 0 : _this$newVCObserver.start({
        startTime
      });
    }

    // Clean up any remaining SSR abort listeners after all observers have been started
    this.processSsrAbortListeners();
  }
  stop(experienceKey) {
    if (isVCRevisionEnabled('fy25.01', experienceKey) || isVCRevisionEnabled('fy25.02', experienceKey)) {
      var _this$oldVCObserver2;
      (_this$oldVCObserver2 = this.oldVCObserver) === null || _this$oldVCObserver2 === void 0 ? void 0 : _this$oldVCObserver2.stop();
    }
    if (isVCRevisionEnabled('fy25.03', experienceKey)) {
      var _this$newVCObserver2;
      (_this$newVCObserver2 = this.newVCObserver) === null || _this$newVCObserver2 === void 0 ? void 0 : _this$newVCObserver2.stop();
    }
  }
  getVCRawData() {
    var _this$oldVCObserver$g, _this$oldVCObserver3;
    return (_this$oldVCObserver$g = (_this$oldVCObserver3 = this.oldVCObserver) === null || _this$oldVCObserver3 === void 0 ? void 0 : _this$oldVCObserver3.getVCRawData()) !== null && _this$oldVCObserver$g !== void 0 ? _this$oldVCObserver$g : null;
  }
  async getVCResult(param) {
    var _this$oldVCObserver4, _this$newVCObserver3, _ref;
    const {
      experienceKey
    } = param;
    const v1v2Result = isVCRevisionEnabled('fy25.01', experienceKey) || isVCRevisionEnabled('fy25.02', experienceKey) ? await ((_this$oldVCObserver4 = this.oldVCObserver) === null || _this$oldVCObserver4 === void 0 ? void 0 : _this$oldVCObserver4.getVCResult(param)) : {};
    const v3Result = isVCRevisionEnabled('fy25.03', experienceKey) ? await ((_this$newVCObserver3 = this.newVCObserver) === null || _this$newVCObserver3 === void 0 ? void 0 : _this$newVCObserver3.getVCResult({
      start: param.start,
      stop: param.stop,
      interactionId: param.interactionId
    })) : [];
    if (!v3Result) {
      return v1v2Result !== null && v1v2Result !== void 0 ? v1v2Result : {};
    }
    return {
      ...v1v2Result,
      'ufo:vc:rev': [...((_ref = v1v2Result === null || v1v2Result === void 0 ? void 0 : v1v2Result['ufo:vc:rev']) !== null && _ref !== void 0 ? _ref : []), ...(v3Result !== null && v3Result !== void 0 ? v3Result : [])]
    };
  }
  setSSRElement(element) {
    var _this$oldVCObserver5;
    (_this$oldVCObserver5 = this.oldVCObserver) === null || _this$oldVCObserver5 === void 0 ? void 0 : _this$oldVCObserver5.setSSRElement(element);
  }
  setReactRootRenderStart(startTime) {
    var _this$oldVCObserver6;
    (_this$oldVCObserver6 = this.oldVCObserver) === null || _this$oldVCObserver6 === void 0 ? void 0 : _this$oldVCObserver6.setReactRootRenderStart(startTime || performance.now());
  }
  setReactRootRenderStop(stopTime) {
    var _this$oldVCObserver7;
    (_this$oldVCObserver7 = this.oldVCObserver) === null || _this$oldVCObserver7 === void 0 ? void 0 : _this$oldVCObserver7.setReactRootRenderStop(stopTime || performance.now());
  }
}

// Some products set this variable to indicate it is running in SSR
let isServer = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__SERVER__);
// Other products set this other variable to indicate it is running in SSR
let isReactSSR = typeof process !== 'undefined' && Boolean(((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.REACT_SSR) || false);
export function isEnvironmentSupported() {
  // SSR environment aren't supported
  if (isReactSSR || isServer) {
    return false;
  }

  // Legacy browsers that doesn't support WeakRef
  // aren't valid
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.WeakRef) !== 'function') {
    return false;
  }
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.MutationObserver) !== 'function' || typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.IntersectionObserver) !== 'function' || typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.PerformanceObserver) !== 'function') {
    return false;
  }
  return true;
}
export function getVCObserver(opts = {}) {
  if (!globalThis.__vcObserver) {
    const shouldMockVCObserver = !isEnvironmentSupported();
    globalThis.__vcObserver = shouldMockVCObserver ? new VCObserverNOOP() : new VCObserverWrapper(opts);
  }
  return globalThis.__vcObserver;
}