import { isVCRevisionEnabled } from '../../config';
import { getPageVisibilityState } from '../../hidden-timing';
const VCParts = ['25', '50', '75', '80', '85', '90', '95', '98', '99'];
const READONLY_EMPTY_ARRAY = Array.from({
  length: 0
});

// Helper function to create vcDetails object to avoid code duplication
function createVCDetails(calculatedVC, shouldHaveVCmetric) {
  if (!shouldHaveVCmetric || !calculatedVC || !calculatedVC.VC || !calculatedVC.VCBox) {
    return {};
  }
  const details = {};
  const {
    VC,
    VCBox
  } = calculatedVC; // Destructure once to avoid repeated property access

  for (const key of VCParts) {
    details[key] = {
      t: VC[key] || -1,
      e: VCBox[key] || READONLY_EMPTY_ARRAY
    };
  }
  return details;
}

// Optimized implementation (current one)
export function getVCRevisionsData({
  fullPrefix,
  interaction,
  isVCClean,
  isEventAborted,
  calculatedVC,
  calculatedVCNext,
  experienceKey
}) {
  const pageVisibilityUpToTTAI = getPageVisibilityState(interaction.start, interaction.end);
  const isVisiblePageVisibleUpToTTAI = pageVisibilityUpToTTAI === 'visible';
  const shouldHaveVCmetric = isVCClean && !isEventAborted && isVisiblePageVisibleUpToTTAI;
  const availableVCRevisionPayloads = [];
  if (isVCRevisionEnabled('fy25.01', experienceKey)) {
    availableVCRevisionPayloads.push({
      revision: 'fy25.01',
      clean: isVCClean,
      'metric:vc90': shouldHaveVCmetric ? calculatedVC.VC['90'] : null,
      vcDetails: createVCDetails(calculatedVC, shouldHaveVCmetric)
    });
  }
  if (isVCRevisionEnabled('fy25.02', experienceKey)) {
    availableVCRevisionPayloads.push({
      revision: 'fy25.02',
      clean: isVCClean,
      'metric:vc90': shouldHaveVCmetric ? calculatedVCNext.VC['90'] : null,
      vcDetails: createVCDetails(calculatedVCNext, shouldHaveVCmetric)
    });
  }
  return {
    [`${fullPrefix}vc:rev`]: availableVCRevisionPayloads
  };
}