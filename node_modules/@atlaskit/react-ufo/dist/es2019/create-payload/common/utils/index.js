export function sanitizeUfoName(name) {
  return name.replace(/_/g, '-');
}
export function isSegmentLabel(obj) {
  return obj && typeof obj.name === 'string' && typeof obj.segmentId === 'string';
}
export function buildSegmentTree(labelStacks) {
  const r = {
    n: 'segment-tree-root',
    c: {}
  };
  labelStacks.forEach(labelStack => {
    let currentNode = r;
    labelStack.forEach(label => {
      const name = label.name;
      const id = isSegmentLabel(label) ? label.segmentId : undefined;
      const key = id !== undefined ? id : name;
      if (!currentNode.c) {
        currentNode.c = {};
      }
      if (!currentNode.c[key]) {
        currentNode.c[key] = {
          n: name
        };
      }
      currentNode = currentNode.c[key];
    });
  });
  return {
    r
  };
}
export function stringifyLabelStackFully(labelStack) {
  return labelStack.map(l => {
    if (isSegmentLabel(l)) {
      return `${l.name}:${l.segmentId}`;
    }
    return l.name;
  }).join('/');
}
function getLabelStackReference(labelStack) {
  return labelStack.map(l => isSegmentLabel(l) ? l.segmentId : l.name).join('/');
}
export function labelStackStartWith(labelStack, startWith) {
  return stringifyLabelStackFully(labelStack).startsWith(stringifyLabelStackFully(startWith));
}
export function optimizeLabelStack(labelStack, reactUFOVersion) {
  return reactUFOVersion === '2.0.0' ? getLabelStackReference(labelStack) : labelStack.map(ls => ({
    n: ls.name,
    ...(ls.segmentId ? {
      s: ls.segmentId
    } : {})
  }));
}