import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { getPageVisibilityState } from '../hidden-timing';
import { VCObserver } from '../vc/vc-observer';
const interactionBuffer = [];
let bufferInteractionData = (interactionId, data) => {
  interactionBuffer.push({
    interactionId,
    data
  });
};
function clearInteractionBuffer() {
  interactionBuffer.length = 0;
}
function appendInteractionData(interactionId, data) {
  bufferInteractionData(interactionId, data);
}
export function installInteractionSink(handler) {
  for (const {
    interactionId,
    data
  } of interactionBuffer) {
    handler(interactionId, data);
  }
  clearInteractionBuffer();
  bufferInteractionData = handler;
}
export function sinkExperimentalHandler(sinkFn) {
  installInteractionSink(sinkFn);
}
export function onExperimentalInteractionComplete(interactionId, data, endTime = performance.now()) {
  if (data.ufoName) {
    data.end = endTime;
    appendInteractionData(interactionId, data);
    clearInteractionBuffer();
  }
}
export class ExperimentalVCMetrics {
  constructor() {
    _defineProperty(this, "vcObserver", null);
  }
  initialize(options) {
    if (this.vcObserver === null) {
      this.vcObserver = new VCObserver({
        ...options,
        isPostInteraction: true
      });
    }
    return this;
  }
  start({
    startTime
  }) {
    var _this$vcObserver;
    (_this$vcObserver = this.vcObserver) === null || _this$vcObserver === void 0 ? void 0 : _this$vcObserver.start({
      startTime
    });
  }
}
export const experimentalVC = new ExperimentalVCMetrics();
export async function getExperimentalVCMetrics(interaction) {
  if (experimentalVC.vcObserver) {
    var _interaction$apdex, _interaction$apdex$;
    const prefix = 'ufo-experimental';
    const result = await experimentalVC.vcObserver.getVCResult({
      start: interaction.start,
      stop: interaction.end,
      tti: (_interaction$apdex = interaction.apdex) === null || _interaction$apdex === void 0 ? void 0 : (_interaction$apdex$ = _interaction$apdex[0]) === null || _interaction$apdex$ === void 0 ? void 0 : _interaction$apdex$.stopTime,
      isEventAborted: !!interaction.abortReason,
      prefix,
      vc: interaction.vc,
      experienceKey: interaction.ufoName,
      interactionId: interaction.id
    });
    const VC = result === null || result === void 0 ? void 0 : result['metrics:vc'];
    if (!VC || !(result !== null && result !== void 0 && result[`${prefix}:vc:clean`])) {
      return result;
    }
    const pageVisibilityUpToTTAI = getPageVisibilityState(interaction.start, interaction.end);
    if (interaction.abortReason || pageVisibilityUpToTTAI !== 'visible') {
      return result;
    }
    return {
      ...result,
      'metric:experimental:vc90': VC['90']
    };
  }
  return null;
}