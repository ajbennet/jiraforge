import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
var _process;
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { isVCRevisionEnabled } from '../config';
import { VCObserverNOOP } from './no-op-vc-observer';
import { VCObserver } from './vc-observer';
import VCObserverNew from './vc-observer-new';
export var VCObserverWrapper = /*#__PURE__*/function () {
  function VCObserverWrapper() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, VCObserverWrapper);
    this.newVCObserver = null;
    this.oldVCObserver = null;
    if (isVCRevisionEnabled('fy25.03')) {
      this.newVCObserver = new VCObserverNew({
        selectorConfig: opts.selectorConfig
      });
    }
    if (isVCRevisionEnabled('fy25.01') || isVCRevisionEnabled('fy25.02')) {
      this.oldVCObserver = new VCObserver(opts);
    }
  }

  // Helper method to process SSR abort listeners
  return _createClass(VCObserverWrapper, [{
    key: "processSsrAbortListeners",
    value: function processSsrAbortListeners() {
      var _window;
      // Process any SSR abort listeners that remain
      if ((_window = window) !== null && _window !== void 0 && _window.__SSR_ABORT_LISTENERS__) {
        // Clean up any event listeners that may have been registered during SSR
        // This is centralized here so only the wrapper handles unbinding, not individual observers
        if (window.__SSR_ABORT_LISTENERS__.unbinds && Array.isArray(window.__SSR_ABORT_LISTENERS__.unbinds)) {
          window.__SSR_ABORT_LISTENERS__.unbinds.forEach(function (unbind) {
            if (typeof unbind === 'function') {
              unbind();
            }
          });
        }

        // After all observers had a chance to process abort events,
        // we can safely delete the SSR_ABORT_LISTENERS object
        delete window.__SSR_ABORT_LISTENERS__;
      }
    }
  }, {
    key: "start",
    value: function start(_ref) {
      var startTime = _ref.startTime,
        experienceKey = _ref.experienceKey;
      if (isVCRevisionEnabled('fy25.01', experienceKey) || isVCRevisionEnabled('fy25.02', experienceKey)) {
        var _this$oldVCObserver;
        (_this$oldVCObserver = this.oldVCObserver) === null || _this$oldVCObserver === void 0 || _this$oldVCObserver.start({
          startTime: startTime
        });
      }
      if (isVCRevisionEnabled('fy25.03', experienceKey)) {
        var _this$newVCObserver;
        (_this$newVCObserver = this.newVCObserver) === null || _this$newVCObserver === void 0 || _this$newVCObserver.start({
          startTime: startTime
        });
      }

      // Clean up any remaining SSR abort listeners after all observers have been started
      this.processSsrAbortListeners();
    }
  }, {
    key: "stop",
    value: function stop(experienceKey) {
      if (isVCRevisionEnabled('fy25.01', experienceKey) || isVCRevisionEnabled('fy25.02', experienceKey)) {
        var _this$oldVCObserver2;
        (_this$oldVCObserver2 = this.oldVCObserver) === null || _this$oldVCObserver2 === void 0 || _this$oldVCObserver2.stop();
      }
      if (isVCRevisionEnabled('fy25.03', experienceKey)) {
        var _this$newVCObserver2;
        (_this$newVCObserver2 = this.newVCObserver) === null || _this$newVCObserver2 === void 0 || _this$newVCObserver2.stop();
      }
    }
  }, {
    key: "getVCRawData",
    value: function getVCRawData() {
      var _this$oldVCObserver$g, _this$oldVCObserver3;
      return (_this$oldVCObserver$g = (_this$oldVCObserver3 = this.oldVCObserver) === null || _this$oldVCObserver3 === void 0 ? void 0 : _this$oldVCObserver3.getVCRawData()) !== null && _this$oldVCObserver$g !== void 0 ? _this$oldVCObserver$g : null;
    }
  }, {
    key: "getVCResult",
    value: function () {
      var _getVCResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(param) {
        var _this$oldVCObserver4, _this$newVCObserver3, _ref2;
        var experienceKey, v1v2Result, v3Result;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              experienceKey = param.experienceKey;
              if (!(isVCRevisionEnabled('fy25.01', experienceKey) || isVCRevisionEnabled('fy25.02', experienceKey))) {
                _context.next = 7;
                break;
              }
              _context.next = 4;
              return (_this$oldVCObserver4 = this.oldVCObserver) === null || _this$oldVCObserver4 === void 0 ? void 0 : _this$oldVCObserver4.getVCResult(param);
            case 4:
              _context.t0 = _context.sent;
              _context.next = 8;
              break;
            case 7:
              _context.t0 = {};
            case 8:
              v1v2Result = _context.t0;
              if (!isVCRevisionEnabled('fy25.03', experienceKey)) {
                _context.next = 15;
                break;
              }
              _context.next = 12;
              return (_this$newVCObserver3 = this.newVCObserver) === null || _this$newVCObserver3 === void 0 ? void 0 : _this$newVCObserver3.getVCResult({
                start: param.start,
                stop: param.stop,
                interactionId: param.interactionId
              });
            case 12:
              _context.t1 = _context.sent;
              _context.next = 16;
              break;
            case 15:
              _context.t1 = [];
            case 16:
              v3Result = _context.t1;
              if (v3Result) {
                _context.next = 19;
                break;
              }
              return _context.abrupt("return", v1v2Result !== null && v1v2Result !== void 0 ? v1v2Result : {});
            case 19:
              return _context.abrupt("return", _objectSpread(_objectSpread({}, v1v2Result), {}, {
                'ufo:vc:rev': [].concat(_toConsumableArray((_ref2 = v1v2Result === null || v1v2Result === void 0 ? void 0 : v1v2Result['ufo:vc:rev']) !== null && _ref2 !== void 0 ? _ref2 : []), _toConsumableArray(v3Result !== null && v3Result !== void 0 ? v3Result : []))
              }));
            case 20:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getVCResult(_x) {
        return _getVCResult.apply(this, arguments);
      }
      return getVCResult;
    }()
  }, {
    key: "setSSRElement",
    value: function setSSRElement(element) {
      var _this$oldVCObserver5;
      (_this$oldVCObserver5 = this.oldVCObserver) === null || _this$oldVCObserver5 === void 0 || _this$oldVCObserver5.setSSRElement(element);
    }
  }, {
    key: "setReactRootRenderStart",
    value: function setReactRootRenderStart(startTime) {
      var _this$oldVCObserver6;
      (_this$oldVCObserver6 = this.oldVCObserver) === null || _this$oldVCObserver6 === void 0 || _this$oldVCObserver6.setReactRootRenderStart(startTime || performance.now());
    }
  }, {
    key: "setReactRootRenderStop",
    value: function setReactRootRenderStop(stopTime) {
      var _this$oldVCObserver7;
      (_this$oldVCObserver7 = this.oldVCObserver) === null || _this$oldVCObserver7 === void 0 || _this$oldVCObserver7.setReactRootRenderStop(stopTime || performance.now());
    }
  }]);
}();

// Some products set this variable to indicate it is running in SSR
var isServer = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__SERVER__);
// Other products set this other variable to indicate it is running in SSR
var isReactSSR = typeof process !== 'undefined' && Boolean(((_process = process) === null || _process === void 0 || (_process = _process.env) === null || _process === void 0 ? void 0 : _process.REACT_SSR) || false);
export function isEnvironmentSupported() {
  // SSR environment aren't supported
  if (isReactSSR || isServer) {
    return false;
  }

  // Legacy browsers that doesn't support WeakRef
  // aren't valid
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.WeakRef) !== 'function') {
    return false;
  }
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.MutationObserver) !== 'function' || typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.IntersectionObserver) !== 'function' || typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.PerformanceObserver) !== 'function') {
    return false;
  }
  return true;
}
export function getVCObserver() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (!globalThis.__vcObserver) {
    var shouldMockVCObserver = !isEnvironmentSupported();
    globalThis.__vcObserver = shouldMockVCObserver ? new VCObserverNOOP() : new VCObserverWrapper(opts);
  }
  return globalThis.__vcObserver;
}