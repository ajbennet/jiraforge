import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { isContainedWithinMediaWrapper } from '../../vc-observer/media-wrapper/vc-utils';
import isNonVisualStyleMutation from '../../vc-observer/observers/non-visual-styles/is-non-visual-style-mutation';
import { createIntersectionObserver } from './intersection-observer';
import createMutationObserver from './mutation-observer';
import createPerformanceObserver from './performance-observer';
function isElementVisible(element) {
  if (!(element instanceof HTMLElement)) {
    return true;
  }
  try {
    var visible = element.checkVisibility({
      // @ts-expect-error
      visibilityProperty: true,
      contentVisibilityAuto: true,
      opacityProperty: true
    });
    return visible;
  } catch (e) {
    // there is no support for checkVisibility
    return true;
  }
}
function sameRectSize(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height;
}
function sameRectDimensions(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height && a.x === b.x && a.y === b.y;
}
var createElementMutationsWatcher = function createElementMutationsWatcher(removedNodeRects) {
  return function (_ref) {
    var rect = _ref.rect;
    var wasDeleted = removedNodeRects.some(function (nr) {
      return sameRectDimensions(nr, rect);
    });
    if (wasDeleted) {
      return 'mutation:element-replacement';
    }
    return 'mutation:element';
  };
};
var ViewportObserver = /*#__PURE__*/function () {
  function ViewportObserver(_ref2) {
    var _this = this;
    var onChange = _ref2.onChange;
    _classCallCheck(this, ViewportObserver);
    _defineProperty(this, "handleIntersectionEntry", function (_ref3) {
      var target = _ref3.target,
        rect = _ref3.rect,
        time = _ref3.time,
        type = _ref3.type,
        mutationData = _ref3.mutationData;
      if (!target) {
        return;
      }
      var visible = isElementVisible(target);
      var lastElementRect = _this.mapVisibleNodeRects.get(target);
      _this.mapVisibleNodeRects.set(target, rect);
      _this.onChange({
        time: time,
        type: type,
        elementRef: new WeakRef(target),
        visible: visible,
        rect: rect,
        previousRect: lastElementRect,
        mutationData: mutationData
      });
    });
    _defineProperty(this, "handleChildListMutation", function (_ref4) {
      var addedNodes = _ref4.addedNodes,
        removedNodes = _ref4.removedNodes;
      var removedNodeRects = removedNodes.map(function (ref) {
        var n = ref.deref();
        if (!n) {
          return;
        }
        return _this.mapVisibleNodeRects.get(n);
      });
      addedNodes.forEach(function (addedNodeRef) {
        var _this$intersectionObs3;
        var addedNode = addedNodeRef.deref();
        if (!addedNode) {
          return;
        }
        var sameDeletedNode = removedNodes.find(function (ref) {
          var n = ref.deref();
          if (!n || !addedNode) {
            return false;
          }
          return n.isEqualNode(addedNode);
        });
        if (sameDeletedNode) {
          var _this$intersectionObs;
          (_this$intersectionObs = _this.intersectionObserver) === null || _this$intersectionObs === void 0 || _this$intersectionObs.watchAndTag(addedNode, 'mutation:remount');
          return;
        }
        if (isContainedWithinMediaWrapper(addedNode)) {
          var _this$intersectionObs2;
          (_this$intersectionObs2 = _this.intersectionObserver) === null || _this$intersectionObs2 === void 0 || _this$intersectionObs2.watchAndTag(addedNode, 'mutation:media');
          return;
        }
        (_this$intersectionObs3 = _this.intersectionObserver) === null || _this$intersectionObs3 === void 0 || _this$intersectionObs3.watchAndTag(addedNode, createElementMutationsWatcher(removedNodeRects));
      });
    });
    _defineProperty(this, "handleAttributeMutation", function (_ref5) {
      var _this$intersectionObs4;
      var target = _ref5.target,
        attributeName = _ref5.attributeName,
        oldValue = _ref5.oldValue,
        newValue = _ref5.newValue;
      (_this$intersectionObs4 = _this.intersectionObserver) === null || _this$intersectionObs4 === void 0 || _this$intersectionObs4.watchAndTag(target, function (_ref6) {
        var target = _ref6.target,
          rect = _ref6.rect;
        if (isContainedWithinMediaWrapper(target)) {
          return {
            type: 'mutation:media',
            mutationData: {
              attributeName: attributeName,
              oldValue: oldValue,
              newValue: newValue
            }
          };
        }
        if (isNonVisualStyleMutation({
          target: target,
          attributeName: attributeName,
          type: 'attributes'
        })) {
          return {
            type: 'mutation:attribute:non-visual-style',
            mutationData: {
              attributeName: attributeName,
              oldValue: oldValue,
              newValue: newValue
            }
          };
        }
        var lastElementRect = _this.mapVisibleNodeRects.get(target);
        if (lastElementRect && sameRectSize(rect, lastElementRect)) {
          return {
            type: 'mutation:attribute:no-layout-shift',
            mutationData: {
              attributeName: attributeName,
              oldValue: oldValue,
              newValue: newValue
            }
          };
        }
        return {
          type: 'mutation:attribute',
          mutationData: {
            attributeName: attributeName,
            oldValue: oldValue,
            newValue: newValue
          }
        };
      });
    });
    _defineProperty(this, "handleLayoutShift", function (_ref7) {
      var time = _ref7.time,
        changedRects = _ref7.changedRects;
      var _iterator = _createForOfIteratorHelper(changedRects),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var changedRect = _step.value;
          var target = changedRect.node;
          if (target) {
            _this.onChange({
              time: time,
              elementRef: new WeakRef(target),
              visible: true,
              rect: changedRect.rect,
              previousRect: changedRect.previousRect,
              type: 'layout-shift'
            });
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    this.mapVisibleNodeRects = new WeakMap();
    this.onChange = onChange;
    this.isStarted = false;
    this.intersectionObserver = null;
    this.mutationObserver = null;
    this.performanceObserver = null;
  }
  return _createClass(ViewportObserver, [{
    key: "initializeObservers",
    value: function initializeObservers() {
      if (this.isStarted) {
        return;
      }
      this.intersectionObserver = createIntersectionObserver({
        onEntry: this.handleIntersectionEntry
      });
      this.mutationObserver = createMutationObserver({
        onChildListMutation: this.handleChildListMutation,
        onAttributeMutation: this.handleAttributeMutation
      });
      this.performanceObserver = createPerformanceObserver({
        onLayoutShift: this.handleLayoutShift
      });
    }
  }, {
    key: "start",
    value: function start() {
      var _this$mutationObserve, _this$performanceObse;
      if (this.isStarted) {
        return;
      }
      this.initializeObservers();
      (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(document.body, {
        attributeOldValue: true,
        attributes: true,
        childList: true,
        subtree: true
      });
      (_this$performanceObse = this.performanceObserver) === null || _this$performanceObse === void 0 || _this$performanceObse.observe({
        type: 'layout-shift',
        buffered: true,
        // @ts-ignore-error
        durationThreshold: 30
      });
      this.isStarted = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this$mutationObserve2, _this$intersectionObs5, _this$performanceObse2;
      if (!this.isStarted) {
        return;
      }
      (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 || _this$mutationObserve2.disconnect();
      (_this$intersectionObs5 = this.intersectionObserver) === null || _this$intersectionObs5 === void 0 || _this$intersectionObs5.disconnect();
      (_this$performanceObse2 = this.performanceObserver) === null || _this$performanceObse2 === void 0 || _this$performanceObse2.disconnect();
      this.isStarted = false;
    }
  }]);
}();
export { ViewportObserver as default };