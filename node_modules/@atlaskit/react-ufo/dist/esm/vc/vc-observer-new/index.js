import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _typeof from "@babel/runtime/helpers/typeof";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { fg } from '@atlaskit/platform-feature-flags';
import EntriesTimeline from './entries-timeline';
import _getElementName from './get-element-name';
import VCCalculator_FY25_03 from './metric-calculator/fy25_03';
import ViewportObserver from './viewport-observer';
import WindowEventObserver from './window-event-observer';
var DEFAULT_SELECTOR_CONFIG = {
  id: false,
  testId: true,
  role: false,
  className: false,
  dataVC: true
};
var VCObserverNew = /*#__PURE__*/function () {
  function VCObserverNew(config) {
    var _config$isPostInterac,
      _config$selectorConfi,
      _this = this;
    _classCallCheck(this, VCObserverNew);
    _defineProperty(this, "viewportObserver", null);
    _defineProperty(this, "windowEventObserver", null);
    this.entriesTimeline = new EntriesTimeline();
    this.isPostInteraction = (_config$isPostInterac = config.isPostInteraction) !== null && _config$isPostInterac !== void 0 ? _config$isPostInterac : false;
    this.selectorConfig = (_config$selectorConfi = config.selectorConfig) !== null && _config$selectorConfi !== void 0 ? _config$selectorConfi : DEFAULT_SELECTOR_CONFIG;
    this.viewportObserver = new ViewportObserver({
      onChange: function onChange(onChangeArg) {
        var time = onChangeArg.time,
          type = onChangeArg.type,
          elementRef = onChangeArg.elementRef,
          visible = onChangeArg.visible,
          rect = onChangeArg.rect,
          previousRect = onChangeArg.previousRect,
          mutationData = onChangeArg.mutationData;
        var elementName = 'unknown';
        var element = elementRef.deref();
        if (element) {
          elementName = _this.getElementName(element);
        }
        _this.entriesTimeline.push({
          time: time,
          data: {
            type: type,
            elementName: elementName,
            rect: rect,
            previousRect: previousRect,
            visible: visible,
            attributeName: mutationData === null || mutationData === void 0 ? void 0 : mutationData.attributeName,
            oldValue: mutationData === null || mutationData === void 0 ? void 0 : mutationData.oldValue,
            newValue: mutationData === null || mutationData === void 0 ? void 0 : mutationData.newValue
          }
        });
      }
    });
    this.windowEventObserver = new WindowEventObserver({
      onEvent: function onEvent(_ref) {
        var time = _ref.time,
          type = _ref.type;
        _this.entriesTimeline.push({
          time: time,
          data: {
            type: 'window:event',
            eventType: type
          }
        });
      }
    });
  }
  return _createClass(VCObserverNew, [{
    key: "start",
    value: function start(_ref2) {
      var _this$viewportObserve,
        _window,
        _this2 = this,
        _this$windowEventObse;
      var startTime = _ref2.startTime;
      (_this$viewportObserve = this.viewportObserver) === null || _this$viewportObserve === void 0 || _this$viewportObserve.start();
      if ((_window = window) !== null && _window !== void 0 && _window.__SSR_ABORT_LISTENERS__ && fg('platform_ufo_vc_observer_new_ssr_abort_listener')) {
        var abortListeners = window.__SSR_ABORT_LISTENERS__;
        var aborts = abortListeners.aborts;
        if (aborts && _typeof(aborts) === 'object') {
          Object.entries(aborts).forEach(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
              key = _ref4[0],
              time = _ref4[1];
            if (typeof time === 'number') {
              _this2.entriesTimeline.push({
                time: time,
                data: {
                  type: 'window:event',
                  eventType: key
                }
              });
            }
          });
        }
      }
      (_this$windowEventObse = this.windowEventObserver) === null || _this$windowEventObse === void 0 || _this$windowEventObse.start();
      this.entriesTimeline.clear();
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this$viewportObserve2, _this$windowEventObse2;
      (_this$viewportObserve2 = this.viewportObserver) === null || _this$viewportObserve2 === void 0 || _this$viewportObserve2.stop();
      (_this$windowEventObse2 = this.windowEventObserver) === null || _this$windowEventObse2 === void 0 || _this$windowEventObse2.stop();
    }
  }, {
    key: "getVCResult",
    value: function () {
      var _getVCResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(param) {
        var start, stop, interactionId, results, calculator_fy25_03, orderedEntries, fy25_03;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              start = param.start, stop = param.stop, interactionId = param.interactionId;
              results = [];
              if (fg('platform_ufo_v3_add_start_entry')) {
                this.addStartEntry(start);
              }
              calculator_fy25_03 = new VCCalculator_FY25_03();
              orderedEntries = this.entriesTimeline.getOrderedEntries({
                start: start,
                stop: stop
              });
              _context.next = 7;
              return calculator_fy25_03.calculate({
                orderedEntries: orderedEntries,
                startTime: start,
                stopTime: stop,
                interactionId: interactionId,
                isPostInteraction: this.isPostInteraction
              });
            case 7:
              fy25_03 = _context.sent;
              if (fy25_03) {
                results.push(fy25_03);
              }
              return _context.abrupt("return", results);
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getVCResult(_x) {
        return _getVCResult.apply(this, arguments);
      }
      return getVCResult;
    }()
  }, {
    key: "addStartEntry",
    value: function addStartEntry(startTime) {
      this.entriesTimeline.push({
        time: startTime,
        data: {
          type: 'mutation:element',
          elementName: 'START',
          visible: true,
          rect: {
            x: 0,
            y: 0,
            width: window.innerWidth,
            height: window.innerHeight,
            top: 0,
            left: 0,
            bottom: window.innerHeight,
            right: window.innerWidth,
            toJSON: function toJSON() {
              return {
                x: this.x,
                y: this.y,
                width: this.width,
                height: this.height,
                top: this.top,
                left: this.left,
                bottom: this.bottom,
                right: this.right
              };
            }
          }
        }
      });
    }
  }, {
    key: "getElementName",
    value: function getElementName(element) {
      return _getElementName(this.selectorConfig, element);
    }
  }]);
}();
export { VCObserverNew as default };