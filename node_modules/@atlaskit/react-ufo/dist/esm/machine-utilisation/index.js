import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var BUFFER_MAX_LENGTH = 1000; // ensure we don't blow up this buffer
var pressureRecordBuffer = [];
var pressureObserver = null;
export function resetPressureRecordBuffer() {
  pressureRecordBuffer.length = 0;
}
export function removeOldBufferRecords(filter) {
  pressureRecordBuffer = pressureRecordBuffer.filter(function (_ref) {
    var time = _ref.time;
    return time > filter;
  });
}
export function createPressureStateReport(start, end) {
  try {
    // To differentiate between the API not available, vs no PressureRecords added
    if (!('PressureObserver' in globalThis)) {
      return null;
    }
    var pressureStateCount = pressureRecordBuffer.reduce(function (pressureReport, _ref2) {
      var time = _ref2.time,
        state = _ref2.state;
      if (time >= start && time <= end) {
        pressureReport[state] += 1;
      }
      return pressureReport;
    }, {
      nominal: 0,
      fair: 0,
      serious: 0,
      critical: 0
    });
    var pressureStateTotal = Object.values(pressureStateCount).reduce(function (total, count) {
      return total + count;
    }) || 1;
    removeOldBufferRecords(end);
    return {
      count: pressureStateCount,
      percentage: {
        nominal: Math.round(pressureStateCount.nominal / pressureStateTotal * 100),
        fair: Math.round(pressureStateCount.fair / pressureStateTotal * 100),
        serious: Math.round(pressureStateCount.serious / pressureStateTotal * 100),
        critical: Math.round(pressureStateCount.critical / pressureStateTotal * 100)
      }
    };
  } catch (_unused) {
    return null;
  }
}
export function initialisePressureObserver() {
  try {
    if ('PressureObserver' in globalThis) {
      var _pressureObserver$obs;
      pressureObserver = new PressureObserver(function (records) {
        if (pressureRecordBuffer.length + records.length <= BUFFER_MAX_LENGTH) {
          var _pressureRecordBuffer;
          (_pressureRecordBuffer = pressureRecordBuffer).push.apply(_pressureRecordBuffer, _toConsumableArray(records));
        }
      });
      (_pressureObserver$obs = pressureObserver.observe('cpu', {
        sampleInterval: 100
      })) === null || _pressureObserver$obs === void 0 || _pressureObserver$obs.catch();
    }
  } catch (err) {
    /* do nothing, this is a best efforts metric */
  }
}
export function disconnectPressureObserver() {
  var _pressureObserver;
  (_pressureObserver = pressureObserver) === null || _pressureObserver === void 0 || _pressureObserver.disconnect();
}