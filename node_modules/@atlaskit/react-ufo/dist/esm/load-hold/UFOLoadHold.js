import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useContext, useEffect, useLayoutEffect, useState } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import UFOInteractionContext from '../interaction-context';
import UFOInteractionIDContext, { subscribeToInteractionIdChanges } from '../interaction-id-context';
var useLayoutEffectSAFE = typeof window === 'undefined' ? useEffect : useLayoutEffect;

/**
 * Custom hook to track changes to the interaction ID.
 * Uses a subscription system when feature flag is enabled, otherwise returns the current value.
 */
function useInteractionIdValue() {
  var interactionId = useContext(UFOInteractionIDContext);
  var _useState = useState((interactionId === null || interactionId === void 0 ? void 0 : interactionId.current) || null),
    _useState2 = _slicedToArray(_useState, 2),
    currentId = _useState2[0],
    setCurrentId = _useState2[1];
  useLayoutEffectSAFE(function () {
    if (fg('platform_ufo_hold_cross_interaction')) {
      // New subscription-based approach
      setCurrentId((interactionId === null || interactionId === void 0 ? void 0 : interactionId.current) || null);
      var unsubscribe = subscribeToInteractionIdChanges(function (newId) {
        setCurrentId(newId);
      });
      return unsubscribe;
    } else {
      // Legacy behavior - just return the current value without subscription
      setCurrentId((interactionId === null || interactionId === void 0 ? void 0 : interactionId.current) || null);
    }
  }, [interactionId]);
  return currentId;
}

/**
 * Render this whenever you're loading.
 *
 * Wrap loading elements
 * ```js
 * if (isLoading){
 *   return (
 *     <UFOLoadHold name="card">
 *       <Skeleton />
 *     </UFOLoadHold>
 *   )
 * }
 * ```
 *
 * Or render it as a sibling
 * ```
 * if (isLoading){
 *   return (
 *     <>
 *       <Skeleton />
 *       <UFOLoadHold name="card" />
 *   )
 * }
 * ```
 *
 * Or wrap your content conditionally
 * ```
 * return (
 *   <UFOLoadHold name="card" hold={isLoading}>
 *     <Card />
 *   </UFOLoadHold>
 * )
 * ```
 *
 * Or render as a sibling conditionally
 * ```
 * return (
 *   <>
 *     <Card />
 *     <UFOLoadHold name="card" hold={isLoading} />
 *   </>
 * )
 * ```
 */

export default function UFOLoadHold(_ref) {
  var children = _ref.children,
    name = _ref.name,
    _ref$hold = _ref.hold,
    hold = _ref$hold === void 0 ? true : _ref$hold,
    _ref$experimental = _ref.experimental,
    experimental = _ref$experimental === void 0 ? false : _ref$experimental;
  var currentInteractionId = useInteractionIdValue();

  // react-18: useId instead
  var context = useContext(UFOInteractionContext);
  useLayoutEffectSAFE(function () {
    if (hold && context != null) {
      if (experimental && context.holdExperimental) {
        return context.holdExperimental(name);
      }
      return context.hold(name);
    }
  }, [hold, context, name, currentInteractionId]);

  // react-18: can return children directly
  return children != null ? /*#__PURE__*/React.createElement(React.Fragment, null, children) : null;
}