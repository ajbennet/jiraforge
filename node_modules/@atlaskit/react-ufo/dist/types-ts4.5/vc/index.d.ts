import type { VCRawDataType, VCResult } from '../common/vc/types';
import type { GetVCResultType, VCObserverInterface, VCObserverOptions } from './types';
declare global {
    var __vcObserver: VCObserverInterface;
}
export declare class VCObserverWrapper implements VCObserverInterface {
    private oldVCObserver;
    private newVCObserver;
    constructor(opts?: VCObserverOptions);
    private processSsrAbortListeners;
    start({ startTime, experienceKey }: {
        startTime: number;
        experienceKey: string;
    }): void;
    stop(experienceKey?: string): void;
    getVCRawData(): VCRawDataType | null;
    getVCResult(param: GetVCResultType): Promise<VCResult>;
    setSSRElement(element: HTMLElement): void;
    setReactRootRenderStart(startTime: number): void;
    setReactRootRenderStop(stopTime: number): void;
}
export declare function isEnvironmentSupported(): boolean;
export declare function getVCObserver(opts?: VCObserverOptions): VCObserverInterface;
