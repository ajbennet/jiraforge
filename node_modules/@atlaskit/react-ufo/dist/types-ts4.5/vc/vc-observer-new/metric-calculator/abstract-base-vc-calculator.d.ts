import type { RevisionPayloadEntry, VCAbortReason } from '../../../common/vc/types';
import type { VCObserverEntry } from '../types';
import type { VCCalculator, VCCalculatorParam } from './types';
export default abstract class AbstractVCCalculatorBase implements VCCalculator {
    private revisionNo;
    constructor(revisionNo: string);
    protected abstract isEntryIncluded(entry: VCObserverEntry): boolean;
    protected abstract getVCCleanStatus(filteredEntries: ReadonlyArray<VCObserverEntry>): {
        isVCClean: boolean;
        dirtyReason?: VCAbortReason;
    };
    private filterViewportEntries;
    private calculateBasic;
    private calculateWithDebugInfo;
    calculate({ startTime, stopTime, orderedEntries, interactionId, isPostInteraction, }: VCCalculatorParam): Promise<RevisionPayloadEntry | undefined>;
}
