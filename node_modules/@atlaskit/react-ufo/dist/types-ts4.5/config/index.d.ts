import type { AssetsClassification, InteractionMetrics, InteractionType } from '../common';
export interface AdditionalData {
    [key: string]: null | string | number | boolean | undefined | AdditionalData | Record<string, AdditionalData> | Array<AdditionalData>;
}
export interface SSRTiming {
    label: string;
    data: {
        startTime: number;
        duration: number;
    };
}
type Capability = 'feature_flag_access' | 'react_profiler';
type InteractionKind = 'page_load' | 'transition' | 'press' | 'typing' | 'legacy' | 'hover';
type UFONameOverride = {
    readonly [ufoName: string]: {
        readonly [metricKey: string]: string;
    };
};
type ResourceType = 'script' | 'link' | 'fetch' | 'xmlhttprequest';
type SelectorConfig = {
    id: boolean;
    testId: boolean;
    role: boolean;
    className: boolean;
    dataVC?: boolean;
};
type Rates = {
    readonly [key: string]: number;
};
type TTVCRevisions = 'fy25.01' | 'fy25.02' | 'fy25.03';
export type Config = {
    readonly enabled?: boolean;
    readonly doNotAbortActivePressInteraction?: string[];
    readonly doNotAbortActivePressInteractionOnTransition?: string[];
    readonly awaitBM3TTI?: string[];
    readonly ufoNameOverrides?: UFONameOverride;
    readonly namePrefix?: string;
    readonly segmentPrefix?: string;
    readonly rates?: Rates;
    readonly rules?: readonly {
        readonly test?: string;
        readonly rate?: number;
    }[];
    readonly killswitch?: readonly string[];
    readonly killswitchNestedSegments?: boolean;
    readonly typingMethod?: string;
    readonly capability?: Record<Capability, number>;
    readonly kind?: Record<InteractionKind, number>;
    readonly allowedResources?: Array<ResourceType>;
    readonly allowedResourcesParams?: Array<string>;
    readonly autoGeneratedRate?: number;
    readonly removePageSegmentsUFOPrefixes?: boolean;
    readonly removeInteractionsUFOPrefixes?: boolean;
    readonly product: string;
    readonly region: string;
    readonly additionalPayloadData?: (interaction: InteractionMetrics) => AdditionalData;
    readonly ssr?: {
        readonly getSSRTimings?: () => SSRTiming[];
        readonly getSSRDoneTime?: () => number | undefined;
    };
    /**
     * @private
     * @deprecated remove me with next major release
     */
    readonly assetsClassification?: AssetsClassification;
    readonly assetsConfig?: AssetsClassification;
    readonly enableBetterPageVisibilityApi?: boolean;
    readonly vc?: {
        readonly enabled?: boolean;
        readonly heatmapSize?: number;
        readonly oldDomUpdates?: boolean;
        readonly devToolsEnabled?: boolean;
        readonly selectorConfig?: SelectorConfig;
        readonly ssr?: boolean;
        readonly ssrWhitelist?: string[];
        readonly ssrEnablePageLayoutPlaceholder?: boolean;
        readonly stopVCAtInteractionFinish?: boolean;
        readonly includeSSRRatio?: boolean;
        /**
         * The revisions of TTVC that will be calculated
         * - `all` is the TTVC revisions that are used on a product level
         * - `byExperience` is the version that is used on an experience level.
         *   Note that an entry in the `byExperience` config should only be a SUBSET of the `all` config,
         *   i.e. every element for all `byExperience` entry configs should exist in the `all` config
         */
        readonly enabledVCRevisions?: {
            all: readonly TTVCRevisions[];
            byExperience?: Record<string, readonly TTVCRevisions[]>;
        };
    };
    readonly postInteractionLog?: {
        readonly enabled?: boolean;
        readonly rates?: Rates;
        readonly kind?: Record<InteractionType, number>;
    };
    readonly experimentalInteractionMetrics?: {
        readonly enabled?: boolean;
        readonly rates?: Rates;
        readonly kind?: Record<InteractionType, number>;
    };
    readonly enableSegmentHighlighting?: boolean;
    readonly enableAdditionalPerformanceMarks?: boolean;
    readonly shouldCalculateLighthouseMetricsFromTTAI?: boolean;
    readonly timeWindowForLateMutationsInMilliseconds?: number;
    readonly manuallyTrackReactProfilerMounts?: boolean;
    /**
     * @private
     * @deprecated setting this will do nothing now
     */
    readonly enableCompleteUsingDoubleRAF?: boolean;
};
export declare function setUFOConfig(newConfig: Config): void;
export declare function getConfig(): Config | undefined;
export declare function getEnabledVCRevisions(experienceKey?: string): readonly TTVCRevisions[];
export declare function isVCRevisionEnabled(revision: TTVCRevisions, experienceKey?: string): boolean;
export declare function getMostRecentVCRevision(experienceKey?: string): TTVCRevisions;
export declare function getInteractionRate(name: string, interactionKind: InteractionKind): number;
export declare function getExperimentalInteractionRate(name: string, interactionType: InteractionType): number;
export declare function getPostInteractionRate(name: string, interactionType: InteractionType): number;
export declare function getCapabilityRate(capability: Capability): number;
declare const validTypingMethods: readonly [
    "timeout",
    "timeoutNoAlloc",
    "mutationObserver"
];
type ValidTypingMethod = (typeof validTypingMethods)[number];
export declare function getTypingPerformanceTracingMethod(): ValidTypingMethod;
export declare function getAwaitBM3TTIList(): string[];
export declare function getRemovePageSegmentsUFOPrefixes(): boolean;
export declare function getRemoveInteractionsUFOPrefixes(): boolean;
export declare function getUfoNameOverrides(): UFONameOverride | undefined;
export declare function getDoNotAbortActivePressInteraction(): string[] | undefined;
export declare function getDoNotAbortActivePressInteractionOnTransition(): string[] | undefined;
export {};
