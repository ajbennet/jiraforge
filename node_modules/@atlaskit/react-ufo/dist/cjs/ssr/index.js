"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configure = configure;
exports.getSSRDoneTime = getSSRDoneTime;
exports.getSSRFeatureFlags = getSSRFeatureFlags;
exports.getSSRSuccess = getSSRSuccess;
exports.getSSRTimings = getSSRTimings;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var NESTED_METRIC_SEPARATOR = '/';
function filterEntry(entry) {
  return !(!entry || (0, _typeof2.default)(entry) !== 'object' || entry.startTime < 0 || entry.duration < 0);
}
function mapEntry(entry) {
  return {
    startTime: Math.round(entry.startTime),
    duration: Math.round(entry.duration)
  };
}
var SSR_PREFIX = 'ssr';
function mapKey(key) {
  if (key === 'total') {
    return SSR_PREFIX;
  }
  return "".concat(SSR_PREFIX).concat(NESTED_METRIC_SEPARATOR).concat(key);
}
var config;
function configure(ssrConfig) {
  config = ssrConfig;
}
function getSSRTimings() {
  var _config;
  if (!((_config = config) !== null && _config !== void 0 && _config.getTimings)) {
    return {};
  }
  var timings = config.getTimings();
  if (!timings) {
    return {};
  }
  var ssrTimings = Object.entries(timings).reduce(function (acc, entry) {
    if (filterEntry(entry[1])) {
      acc[mapKey(entry[0])] = mapEntry(entry[1]);
    }
    return acc;
  }, {});
  return ssrTimings;
}
function getSSRSuccess() {
  var _config2;
  return !!((_config2 = config) !== null && _config2 !== void 0 && _config2.getDoneMark());
}
function getSSRDoneTime() {
  var _config$getDoneMark, _config3;
  return (_config$getDoneMark = (_config3 = config) === null || _config3 === void 0 ? void 0 : _config3.getDoneMark()) !== null && _config$getDoneMark !== void 0 ? _config$getDoneMark : undefined;
}
function getSSRFeatureFlags() {
  var _config4;
  if (!((_config4 = config) !== null && _config4 !== void 0 && _config4.getFeatureFlags)) {
    return undefined;
  }
  try {
    var _config$getFeatureFla;
    return (_config$getFeatureFla = config.getFeatureFlags()) !== null && _config$getFeatureFla !== void 0 ? _config$getFeatureFla : undefined;
    // eslint-disable-next-line no-empty
  } catch (e) {}
  return undefined;
}