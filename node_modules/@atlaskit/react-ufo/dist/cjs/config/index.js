"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAwaitBM3TTIList = getAwaitBM3TTIList;
exports.getCapabilityRate = getCapabilityRate;
exports.getConfig = getConfig;
exports.getDoNotAbortActivePressInteraction = getDoNotAbortActivePressInteraction;
exports.getDoNotAbortActivePressInteractionOnTransition = getDoNotAbortActivePressInteractionOnTransition;
exports.getEnabledVCRevisions = getEnabledVCRevisions;
exports.getExperimentalInteractionRate = getExperimentalInteractionRate;
exports.getInteractionRate = getInteractionRate;
exports.getMostRecentVCRevision = getMostRecentVCRevision;
exports.getPostInteractionRate = getPostInteractionRate;
exports.getRemoveInteractionsUFOPrefixes = getRemoveInteractionsUFOPrefixes;
exports.getRemovePageSegmentsUFOPrefixes = getRemovePageSegmentsUFOPrefixes;
exports.getTypingPerformanceTracingMethod = getTypingPerformanceTracingMethod;
exports.getUfoNameOverrides = getUfoNameOverrides;
exports.isVCRevisionEnabled = isVCRevisionEnabled;
exports.setUFOConfig = setUFOConfig;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var config;
var DEFAULT_TTVC_REVISION = 'fy25.02';

// Defensively typed, since this is directly user-editable
// and they could delete empty members

function setUFOConfig(newConfig) {
  var _newConfig$vc;
  // Handle edge cases with `enabledVCRevisions`
  var _ref = (_newConfig$vc = newConfig === null || newConfig === void 0 ? void 0 : newConfig.vc) !== null && _newConfig$vc !== void 0 ? _newConfig$vc : {},
    enabledVCRevisions = _ref.enabledVCRevisions;
  if ((0, _typeof2.default)(enabledVCRevisions === null || enabledVCRevisions === void 0 ? void 0 : enabledVCRevisions.byExperience) === 'object') {
    config = _objectSpread(_objectSpread({}, newConfig), {}, {
      vc: _objectSpread(_objectSpread({}, newConfig.vc), {}, {
        enabledVCRevisions: {
          // enforce axiom about `enabledVCRevisions.all` config
          all: Array.from(new Set([DEFAULT_TTVC_REVISION].concat((0, _toConsumableArray2.default)(enabledVCRevisions === null || enabledVCRevisions === void 0 ? void 0 : enabledVCRevisions.all), (0, _toConsumableArray2.default)(Object.values(enabledVCRevisions === null || enabledVCRevisions === void 0 ? void 0 : enabledVCRevisions.byExperience).flat())))),
          byExperience: _objectSpread({}, enabledVCRevisions === null || enabledVCRevisions === void 0 ? void 0 : enabledVCRevisions.byExperience)
        }
      })
    });
  } else {
    config = newConfig;
  }
}
function getConfig() {
  return config;
}
var isValidConfigArray = function isValidConfigArray(array) {
  return Array.isArray(array) && array.length > 0;
};
function getEnabledVCRevisions() {
  var experienceKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  try {
    var _config$vc;
    if (!config) {
      return [];
    }
    if ((_config$vc = config.vc) !== null && _config$vc !== void 0 && _config$vc.enabled) {
      var _config$vc2, _enabledVCRevisions$b;
      var _ref2 = (_config$vc2 = config.vc) !== null && _config$vc2 !== void 0 ? _config$vc2 : {},
        enabledVCRevisions = _ref2.enabledVCRevisions;
      if (isValidConfigArray(enabledVCRevisions === null || enabledVCRevisions === void 0 || (_enabledVCRevisions$b = enabledVCRevisions.byExperience) === null || _enabledVCRevisions$b === void 0 ? void 0 : _enabledVCRevisions$b[experienceKey])) {
        var _enabledVCRevisions$b2;
        return (_enabledVCRevisions$b2 = enabledVCRevisions.byExperience) === null || _enabledVCRevisions$b2 === void 0 ? void 0 : _enabledVCRevisions$b2[experienceKey];
      }
      if (isValidConfigArray(enabledVCRevisions === null || enabledVCRevisions === void 0 ? void 0 : enabledVCRevisions.all)) {
        return enabledVCRevisions.all;
      }
      return [DEFAULT_TTVC_REVISION];
    }
    return [];
  } catch (_unused) {
    return [];
  }
}
function isVCRevisionEnabled(revision, experienceKey) {
  return getEnabledVCRevisions(experienceKey).includes(revision);
}
function getMostRecentVCRevision() {
  var experienceKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var enabledVCRevisions = getEnabledVCRevisions(experienceKey);
  return enabledVCRevisions[enabledVCRevisions.length - 1];
}
function getInteractionRate(name, interactionKind) {
  try {
    if (!config) {
      return 0;
    }
    var _config = config,
      killswitch = _config.killswitch,
      rates = _config.rates,
      rules = _config.rules,
      kind = _config.kind,
      autoGeneratedRate = _config.autoGeneratedRate;
    if (killswitch != null) {
      // Specifically kill certain events
      if (killswitch.includes(name)) {
        return 0;
      }
    }
    if (rates != null) {
      // Decide the rate explicitly
      if (rates[name] != null) {
        return rates[name];
      }
    }
    if (rules != null) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        var test = rule.test,
          rate = rule.rate;
        if (test != null && rate != null) {
          var regexp = new RegExp(test, 'ig');
          if (regexp.test(name)) {
            return rate;
          }
        }
      }
    }
    var isAutogenerated = name === null || name === void 0 ? void 0 : name.startsWith('auto-generated');
    if (isAutogenerated) {
      var _rate = autoGeneratedRate;
      if (_rate != null) {
        return _rate;
      }
    }
    if (kind != null) {
      var _rate2 = kind[interactionKind];
      if (_rate2 != null) {
        return _rate2;
      }
    }
    return 0;
  } catch (e) {
    // Fallback
    return 0;
  }
}
function getExperimentalInteractionRate(name, interactionType) {
  try {
    if (!config) {
      return 0;
    }
    var _config2 = config,
      experimentalInteractionMetrics = _config2.experimentalInteractionMetrics;
    if (!(experimentalInteractionMetrics !== null && experimentalInteractionMetrics !== void 0 && experimentalInteractionMetrics.enabled)) {
      return 0;
    }
    if (experimentalInteractionMetrics.rates && typeof experimentalInteractionMetrics.rates[name] === 'number') {
      return experimentalInteractionMetrics.rates[name];
    }
    if (experimentalInteractionMetrics.kind && typeof experimentalInteractionMetrics.kind[interactionType] === 'number') {
      return experimentalInteractionMetrics.kind[interactionType];
    }
    return 0;
  } catch (e) {
    return 0;
  }
}
function getPostInteractionRate(name, interactionType) {
  try {
    if (!config) {
      return 0;
    }
    var _config3 = config,
      postInteractionLog = _config3.postInteractionLog;
    if (!(postInteractionLog !== null && postInteractionLog !== void 0 && postInteractionLog.enabled)) {
      return 0;
    }
    if (postInteractionLog.rates && typeof postInteractionLog.rates[name] === 'number') {
      return postInteractionLog.rates[name];
    }
    if (postInteractionLog.kind && typeof postInteractionLog.kind[interactionType] === 'number') {
      return postInteractionLog.kind[interactionType];
    }
    return 0;
  } catch (e) {
    return 0;
  }
}
function getCapabilityRate(capability) {
  try {
    if (!config) {
      return 0;
    }
    var _config4 = config,
      capabilityRate = _config4.capability;
    if (capabilityRate != null) {
      var rate = capabilityRate[capability];
      if (rate != null) {
        return rate;
      }
    }
    return 0;
  } catch (_unused2) {
    return 0;
  }
}
var validTypingMethods = ['timeout', 'timeoutNoAlloc', 'mutationObserver'];
function getTypingPerformanceTracingMethod() {
  var defaultMethod = 'timeout';
  try {
    if (!config) {
      return defaultMethod;
    }
    var _config5 = config,
      typingMethod = _config5.typingMethod;
    if (typingMethod != null && validTypingMethods.find(function (m) {
      return m === typingMethod;
    })) {
      return typingMethod;
    } else {
      return defaultMethod;
    }
  } catch (e) {
    return defaultMethod;
  }
}

// Will ask UFO to wait for BM3 TTI for all events on this list
function getAwaitBM3TTIList() {
  try {
    if (!config) {
      return [];
    }
    var _config6 = config,
      awaitBM3TTI = _config6.awaitBM3TTI;
    if (awaitBM3TTI != null) {
      return awaitBM3TTI;
    } else {
      return [];
    }
  } catch (e) {
    return [];
  }
}

// Flag to remove ufo segments prefixes
function getRemovePageSegmentsUFOPrefixes() {
  try {
    if (!config) {
      return false;
    }
    var _config7 = config,
      removePageSegmentsUFOPrefixes = _config7.removePageSegmentsUFOPrefixes;
    if (removePageSegmentsUFOPrefixes != null) {
      return removePageSegmentsUFOPrefixes;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

// Flag to remove ufo segments prefixes
function getRemoveInteractionsUFOPrefixes() {
  try {
    if (!config) {
      return false;
    }
    var _config8 = config,
      removeInteractionsUFOPrefixes = _config8.removeInteractionsUFOPrefixes;
    if (removeInteractionsUFOPrefixes != null) {
      return removeInteractionsUFOPrefixes;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

// Will ask UFO to override ufoName => experienceKey to the apdex key
// This is to cover use cases where one rUFO route is split into multiple BM3 keys (1:N)
// This workaround should only be used as last resource,
// when we find router limitations preventing teams from splliting these routes
function getUfoNameOverrides() {
  try {
    if (!config) {
      return undefined;
    }
    var _config9 = config,
      ufoNameOverrides = _config9.ufoNameOverrides;
    if (ufoNameOverrides != null) {
      return ufoNameOverrides;
    }
    return undefined;
  } catch (e) {
    return undefined;
  }
}

// Contains the list of interactions that do not abort existing known interactions
function getDoNotAbortActivePressInteraction() {
  try {
    if (!config) {
      return undefined;
    }
    var _config10 = config,
      doNotAbortActivePressInteraction = _config10.doNotAbortActivePressInteraction;
    return doNotAbortActivePressInteraction;
  } catch (e) {
    return undefined;
  }
}

// Contains the list of interactions that do not abort on transitions
function getDoNotAbortActivePressInteractionOnTransition() {
  try {
    if (!config) {
      return undefined;
    }
    var _config11 = config,
      doNotAbortActivePressInteractionOnTransition = _config11.doNotAbortActivePressInteractionOnTransition;
    return doNotAbortActivePressInteractionOnTransition;
  } catch (e) {
    return undefined;
  }
}