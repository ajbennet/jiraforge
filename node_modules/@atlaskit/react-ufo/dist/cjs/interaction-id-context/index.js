"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInteractionId = exports.subscribeToInteractionIdChanges = exports.getInteractionId = exports.default = exports.DefaultInteractionID = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
// Same structure as react's useRef.
// This allows modals to use a ref to scope their value
// const id = useRef(null);
// <InteractionIDContext.Provider value={id}>...<

// Subscription system for interaction ID changes

var listeners = new Set();

// Observable interaction ID implementation
var ObservableInteractionID = /*#__PURE__*/function () {
  function ObservableInteractionID() {
    (0, _classCallCheck2.default)(this, ObservableInteractionID);
    (0, _defineProperty2.default)(this, "_current", null);
  }
  return (0, _createClass2.default)(ObservableInteractionID, [{
    key: "current",
    get: function get() {
      return this._current;
    },
    set: function set(newId) {
      var oldId = this._current;
      this._current = newId;

      // Notify all listeners if the ID actually changed and feature flag is enabled
      if (oldId !== newId && (0, _platformFeatureFlags.fg)('platform_ufo_hold_cross_interaction')) {
        listeners.forEach(function (listener) {
          return listener(newId);
        });
      }
    }
  }]);
}(); // Type declaration for globalThis extension
// Ensures a single DefaultInteractionID instance exists across the entire application,
// even when the module is loaded multiple times in different contexts
var initializeGlobalDefaultInteractionID = function initializeGlobalDefaultInteractionID() {
  // Return existing instance if already initialized
  if (globalThis.__UFO_DEFAULT_INTERACTION_ID__) {
    return globalThis.__UFO_DEFAULT_INTERACTION_ID__;
  }

  // Create and store new instance globally
  var instance = new ObservableInteractionID();
  globalThis.__UFO_DEFAULT_INTERACTION_ID__ = instance;
  return instance;
};

// The default InteractionID object is a global singleton stored in globalThis.
// It holds the root value used in routing and is updated when new interactions start.
var DefaultInteractionID = exports.DefaultInteractionID = initializeGlobalDefaultInteractionID();

// Subscription functions
var subscribeToInteractionIdChanges = exports.subscribeToInteractionIdChanges = function subscribeToInteractionIdChanges(listener) {
  if (!(0, _platformFeatureFlags.fg)('platform_ufo_hold_cross_interaction')) {
    // Return a no-op unsubscribe function when feature flag is disabled
    return function () {};
  }
  listeners.add(listener);
  return function () {
    listeners.delete(listener);
  };
};

// We use a context to allow modals to have their own lifecycle
var _default = exports.default = /*#__PURE__*/(0, _react.createContext)(DefaultInteractionID);
var getInteractionId = exports.getInteractionId = function getInteractionId() {
  return DefaultInteractionID;
};
var useInteractionId = exports.useInteractionId = function useInteractionId() {
  return DefaultInteractionID;
};