"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVCRevisionsData = getVCRevisionsData;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _config = require("../../config");
var _hiddenTiming = require("../../hidden-timing");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var VCParts = ['25', '50', '75', '80', '85', '90', '95', '98', '99'];
var READONLY_EMPTY_ARRAY = Array.from({
  length: 0
});

// Helper function to create vcDetails object to avoid code duplication
function createVCDetails(calculatedVC, shouldHaveVCmetric) {
  if (!shouldHaveVCmetric || !calculatedVC || !calculatedVC.VC || !calculatedVC.VCBox) {
    return {};
  }
  var details = {};
  var VC = calculatedVC.VC,
    VCBox = calculatedVC.VCBox; // Destructure once to avoid repeated property access
  var _iterator = _createForOfIteratorHelper(VCParts),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      details[key] = {
        t: VC[key] || -1,
        e: VCBox[key] || READONLY_EMPTY_ARRAY
      };
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return details;
}

// Optimized implementation (current one)
function getVCRevisionsData(_ref) {
  var fullPrefix = _ref.fullPrefix,
    interaction = _ref.interaction,
    isVCClean = _ref.isVCClean,
    isEventAborted = _ref.isEventAborted,
    calculatedVC = _ref.calculatedVC,
    calculatedVCNext = _ref.calculatedVCNext,
    experienceKey = _ref.experienceKey;
  var pageVisibilityUpToTTAI = (0, _hiddenTiming.getPageVisibilityState)(interaction.start, interaction.end);
  var isVisiblePageVisibleUpToTTAI = pageVisibilityUpToTTAI === 'visible';
  var shouldHaveVCmetric = isVCClean && !isEventAborted && isVisiblePageVisibleUpToTTAI;
  var availableVCRevisionPayloads = [];
  if ((0, _config.isVCRevisionEnabled)('fy25.01', experienceKey)) {
    availableVCRevisionPayloads.push({
      revision: 'fy25.01',
      clean: isVCClean,
      'metric:vc90': shouldHaveVCmetric ? calculatedVC.VC['90'] : null,
      vcDetails: createVCDetails(calculatedVC, shouldHaveVCmetric)
    });
  }
  if ((0, _config.isVCRevisionEnabled)('fy25.02', experienceKey)) {
    availableVCRevisionPayloads.push({
      revision: 'fy25.02',
      clean: isVCClean,
      'metric:vc90': shouldHaveVCmetric ? calculatedVCNext.VC['90'] : null,
      vcDetails: createVCDetails(calculatedVCNext, shouldHaveVCmetric)
    });
  }
  return (0, _defineProperty2.default)({}, "".concat(fullPrefix, "vc:rev"), availableVCRevisionPayloads);
}