"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculatePercentiles = calculatePercentiles;
exports.calculatePercentilesWithDebugInfo = calculatePercentilesWithDebugInfo;
exports.calculateTTVCPercentilesWithDebugInfo = calculateTTVCPercentilesWithDebugInfo;
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _canvasPixel = require("./canvas-pixel");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function calculateTTVCPercentiles(_x) {
  return _calculateTTVCPercentiles.apply(this, arguments);
}
function _calculateTTVCPercentiles() {
  _calculateTTVCPercentiles = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {
    var viewport, orderedEntries, percentiles, startTime, canvas, elementMap, _iterator2, _step2, entry, rect, elementName, timePixelCounts, canvasDimenstions, totalPixels;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          viewport = _ref.viewport, orderedEntries = _ref.orderedEntries, percentiles = _ref.percentiles, startTime = _ref.startTime;
          canvas = new _canvasPixel.ViewportCanvas(viewport, (0, _platformFeatureFlags.fg)('platform_ufo_canvas_heatmap_full_precision') ? 1 : 0.25);
          elementMap = new Map();
          _iterator2 = _createForOfIteratorHelper(orderedEntries);
          _context.prev = 4;
          _iterator2.s();
        case 6:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 17;
            break;
          }
          entry = _step2.value;
          if ('rect' in entry.data) {
            _context.next = 10;
            break;
          }
          return _context.abrupt("continue", 15);
        case 10:
          rect = entry.data.rect;
          elementName = entry.data.elementName;
          canvas.drawRect(rect, entry.time);
          if (!elementMap.has(entry.time)) {
            elementMap.set(entry.time, new Set());
          }
          elementMap.get(entry.time).add(elementName);
        case 15:
          _context.next = 6;
          break;
        case 17:
          _context.next = 22;
          break;
        case 19:
          _context.prev = 19;
          _context.t0 = _context["catch"](4);
          _iterator2.e(_context.t0);
        case 22:
          _context.prev = 22;
          _iterator2.f();
          return _context.finish(22);
        case 25:
          _context.next = 27;
          return canvas.getPixelCounts();
        case 27:
          timePixelCounts = _context.sent;
          canvasDimenstions = canvas.getScaledDimensions();
          totalPixels = canvasDimenstions.width * canvasDimenstions.height;
          return _context.abrupt("return", calculatePercentiles(timePixelCounts, elementMap, percentiles, totalPixels, startTime));
        case 31:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4, 19, 22, 25]]);
  }));
  return _calculateTTVCPercentiles.apply(this, arguments);
}
function calculateTTVCPercentilesWithDebugInfo(_x2) {
  return _calculateTTVCPercentilesWithDebugInfo.apply(this, arguments);
}
function _calculateTTVCPercentilesWithDebugInfo() {
  _calculateTTVCPercentilesWithDebugInfo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref2) {
    var viewport, orderedEntries, startTime, canvas, elementMap, _iterator3, _step3, entry, rect, timePixelCounts, canvasDimensions, totalPixels;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          viewport = _ref2.viewport, orderedEntries = _ref2.orderedEntries, startTime = _ref2.startTime;
          canvas = new _canvasPixel.ViewportCanvas(viewport, (0, _platformFeatureFlags.fg)('platform_ufo_canvas_heatmap_full_precision') ? 1 : 0.25);
          elementMap = new Map();
          _iterator3 = _createForOfIteratorHelper(orderedEntries);
          _context2.prev = 4;
          _iterator3.s();
        case 6:
          if ((_step3 = _iterator3.n()).done) {
            _context2.next = 16;
            break;
          }
          entry = _step3.value;
          if ('rect' in entry.data) {
            _context2.next = 10;
            break;
          }
          return _context2.abrupt("continue", 14);
        case 10:
          rect = entry.data.rect;
          canvas.drawRect(rect, entry.time);
          if (!elementMap.has(entry.time)) {
            elementMap.set(entry.time, []);
          }
          elementMap.get(entry.time).push(entry.data);
        case 14:
          _context2.next = 6;
          break;
        case 16:
          _context2.next = 21;
          break;
        case 18:
          _context2.prev = 18;
          _context2.t0 = _context2["catch"](4);
          _iterator3.e(_context2.t0);
        case 21:
          _context2.prev = 21;
          _iterator3.f();
          return _context2.finish(21);
        case 24:
          _context2.next = 26;
          return canvas.getPixelCounts();
        case 26:
          timePixelCounts = _context2.sent;
          canvasDimensions = canvas.getScaledDimensions();
          totalPixels = canvasDimensions.width * canvasDimensions.height;
          return _context2.abrupt("return", calculatePercentilesWithDebugInfo(timePixelCounts, elementMap, totalPixels, startTime));
        case 30:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[4, 18, 21, 24]]);
  }));
  return _calculateTTVCPercentilesWithDebugInfo.apply(this, arguments);
}
var _default = exports.default = calculateTTVCPercentiles;
function calculatePercentiles(timePixelCounts, elementMap, unorderedPercentiles, totalPixels, startTime) {
  var results = {};
  var cumulativePixels = 0;
  var percentiles = unorderedPercentiles.sort(function (a, b) {
    return a - b;
  });

  // Sort entries by timestamp for consistent processing
  var sortedEntries = Array.from(timePixelCounts.entries()).sort(function (_ref3, _ref4) {
    var _ref5 = (0, _slicedToArray2.default)(_ref3, 1),
      timeA = _ref5[0];
    var _ref6 = (0, _slicedToArray2.default)(_ref4, 1),
      timeB = _ref6[0];
    return Number(timeA) - Number(timeB);
  });
  var percentileIndex = 0;
  var domElementsBuffer = new Set();
  var _iterator = _createForOfIteratorHelper(sortedEntries),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
        time = _step$value[0],
        pixelCount = _step$value[1];
      cumulativePixels += pixelCount;
      var percentCovered = cumulativePixels / totalPixels * 100;
      var elementNames = elementMap.get(time) || new Set();
      elementNames.forEach(function (elName) {
        return domElementsBuffer.add(elName);
      });
      var matchesAnyCheckpoints = false;
      while (percentileIndex < percentiles.length && percentCovered >= percentiles[percentileIndex]) {
        results["".concat(percentiles[percentileIndex])] = {
          t: Math.round(Number(time - startTime)),
          e: Array.from(domElementsBuffer)
        };
        percentileIndex++;
        matchesAnyCheckpoints = true;
      }
      if (matchesAnyCheckpoints) {
        domElementsBuffer.clear();
      }
      if (percentileIndex >= percentiles.length) {
        break;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var previousResult = {
    t: 0,
    e: []
  };
  for (var i = 0; i < percentiles.length; i++) {
    var percentile = percentiles[i];
    if (!(percentile in results)) {
      results["".concat(percentile)] = previousResult;
    }
    previousResult = results["".concat(percentile)];
  }
  return results;
}
function calculatePercentilesWithDebugInfo(timePixelCounts, elementMap, totalPixels, startTime) {
  var results = new Array(elementMap.size);
  var cumulativePixels = 0;
  var sortedEntries = Array.from(timePixelCounts.entries()).sort(function (_ref7, _ref8) {
    var _ref9 = (0, _slicedToArray2.default)(_ref7, 1),
      timeA = _ref9[0];
    var _ref10 = (0, _slicedToArray2.default)(_ref8, 1),
      timeB = _ref10[0];
    return Number(timeA) - Number(timeB);
  });
  for (var i = 0; i < sortedEntries.length; i++) {
    var _sortedEntries$i = (0, _slicedToArray2.default)(sortedEntries[i], 2),
      time = _sortedEntries$i[0],
      pixelCount = _sortedEntries$i[1];
    cumulativePixels += pixelCount;
    var percentCovered = cumulativePixels / totalPixels * 100;
    var entryDatas = elementMap.get(time) || [];
    results[i] = {
      time: Math.round(Number(time - startTime)),
      viewportPercentage: percentCovered,
      entries: Array.from(entryDatas)
    };
  }
  return results;
}