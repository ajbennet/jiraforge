"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _index = require("./index");
// Test utilities
var createMockRect = function createMockRect() {
  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
  return new MockDOMRect(x, y, width, height);
};
var createViewportEntry = function createViewportEntry(elementName) {
  var rect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createMockRect();
  var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'mutation:element';
  return {
    elementName: elementName,
    rect: rect,
    visible: visible,
    type: type
  };
};
var createTimePixelCounts = function createTimePixelCounts(counts) {
  return new Map(counts);
};
var createElementMap = function createElementMap(entries) {
  return new Map(entries);
};
var createExpectedResult = function createExpectedResult(time, viewportPercentage, entries) {
  return {
    time: time,
    viewportPercentage: viewportPercentage,
    entries: entries
  };
};
var MockDOMRect = /*#__PURE__*/function () {
  function MockDOMRect(x, y, width, height) {
    (0, _classCallCheck2.default)(this, MockDOMRect);
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  return (0, _createClass2.default)(MockDOMRect, [{
    key: "bottom",
    get: function get() {
      return this.y + this.height;
    }
  }, {
    key: "left",
    get: function get() {
      return this.x;
    }
  }, {
    key: "right",
    get: function get() {
      return this.x + this.width;
    }
  }, {
    key: "top",
    get: function get() {
      return this.y;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.height
      };
    }
  }]);
}();
describe('calculatePercentilesWithDebugInfo', function () {
  it('should correctly calculate percentiles with accumulated elements from timestamps', function () {
    var timePixelCounts = createTimePixelCounts([[100, 10], [200, 20], [300, 10], [400, 10]]);
    var elementMap = createElementMap([[100, [createViewportEntry('div'), createViewportEntry('span')]], [200, [createViewportEntry('img')]], [300, [createViewportEntry('p'), createViewportEntry('a')]], [400, [createViewportEntry('img')]]]);
    var expected = [createExpectedResult(100, 20, [createViewportEntry('div'), createViewportEntry('span')]), createExpectedResult(200, 60, [createViewportEntry('img')]), createExpectedResult(300, 80, [createViewportEntry('p'), createViewportEntry('a')]), createExpectedResult(400, 100, [createViewportEntry('img')])];
    var result = (0, _index.calculatePercentilesWithDebugInfo)(timePixelCounts, elementMap, 50, 0);
    expect(result).toEqual(expected);
  });
  it('should handle empty entries gracefully', function () {
    var timePixelCounts = new Map();
    var elementMap = new Map();
    var expected = [];
    var result = (0, _index.calculatePercentilesWithDebugInfo)(timePixelCounts, elementMap, 100, 0);
    expect(result).toEqual(expected);
  });
  it('should handle non-sequential timestamps', function () {
    var timePixelCounts = createTimePixelCounts([[300, 70], [100, 30]]);
    var elementMap = createElementMap([[300, [createViewportEntry('p'), createViewportEntry('a')]], [100, [createViewportEntry('div')]]]);
    var expected = [createExpectedResult(100, 30, [createViewportEntry('div')]), createExpectedResult(300, 100, [createViewportEntry('p'), createViewportEntry('a')])];
    var result = (0, _index.calculatePercentilesWithDebugInfo)(timePixelCounts, elementMap, 100, 0);
    expect(result).toEqual(expected);
  });
  it('should correctly calculate percentiles with startTime offset', function () {
    var timePixelCounts = createTimePixelCounts([[100, 10], [200, 20], [300, 10], [400, 10]]);
    var elementMap = createElementMap([[100, [createViewportEntry('div'), createViewportEntry('span')]], [200, [createViewportEntry('img')]], [300, [createViewportEntry('p'), createViewportEntry('a')]], [400, [createViewportEntry('img')]]]);
    var expected = [createExpectedResult(50, 20, [createViewportEntry('div'), createViewportEntry('span')]), createExpectedResult(150, 60, [createViewportEntry('img')]), createExpectedResult(250, 80, [createViewportEntry('p'), createViewportEntry('a')]), createExpectedResult(350, 100, [createViewportEntry('img')])];
    var result = (0, _index.calculatePercentilesWithDebugInfo)(timePixelCounts, elementMap, 50, 50);
    expect(result).toEqual(expected);
  });
});