"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NON_VISUAL_ARIA_ATTRIBUTES = exports.KNOWN_ATTRIBUTES_THAT_DOES_NOT_CAUSE_LAYOUT_SHIFTS = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _abstractBaseVcCalculator = _interopRequireDefault(require("../abstract-base-vc-calculator"));
var _isViewportEntryData = _interopRequireDefault(require("../utils/is-viewport-entry-data"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ABORTING_WINDOW_EVENT = ['wheel', 'scroll', 'keydown', 'resize'];
var REVISION_NO = 'fy25.03';
var CONSIDERED_ENTRY_TYPE = ['mutation:child-element', 'mutation:element', 'mutation:attribute', 'layout-shift', 'window:event'];

// TODO: AFO-3523
// Those are the attributes we have found when testing the 'fy25.03' manually.
// We still need to replace this hardcoded list with a proper automation
var KNOWN_ATTRIBUTES_THAT_DOES_NOT_CAUSE_LAYOUT_SHIFTS = exports.KNOWN_ATTRIBUTES_THAT_DOES_NOT_CAUSE_LAYOUT_SHIFTS = ['data-drop-target-for-element', 'draggable'];

// Common aria attributes that don't cause visual layout shifts
var NON_VISUAL_ARIA_ATTRIBUTES = exports.NON_VISUAL_ARIA_ATTRIBUTES = ['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-hidden', 'aria-expanded', 'aria-controls', 'aria-selected', 'aria-checked', 'aria-disabled', 'aria-required', 'aria-current', 'aria-haspopup', 'aria-pressed', 'aria-live'];
var VCCalculator_FY25_03 = exports.default = /*#__PURE__*/function (_AbstractVCCalculator) {
  function VCCalculator_FY25_03() {
    (0, _classCallCheck2.default)(this, VCCalculator_FY25_03);
    return _callSuper(this, VCCalculator_FY25_03, [REVISION_NO]);
  }
  (0, _inherits2.default)(VCCalculator_FY25_03, _AbstractVCCalculator);
  return (0, _createClass2.default)(VCCalculator_FY25_03, [{
    key: "isEntryIncluded",
    value: function isEntryIncluded(entry) {
      if (!CONSIDERED_ENTRY_TYPE.includes(entry.data.type)) {
        return false;
      }
      if (entry.data.type === 'mutation:attribute') {
        var entryData = entry.data;
        var attributeName = entryData.attributeName;
        if (!attributeName || KNOWN_ATTRIBUTES_THAT_DOES_NOT_CAUSE_LAYOUT_SHIFTS.includes(attributeName)) {
          return false;
        }
        if (attributeName === 'data-aui-version' && (0, _platformFeatureFlags.fg)('platform_ufo_filter_out_aui_attribute_changes')) {
          return false;
        }
        if ((attributeName === 'data-testid' || attributeName === 'data-vc' || attributeName === 'data-ssr-placeholder' || attributeName === 'data-ssr-placeholder-replace' || attributeName === 'data-vc-nvs' || attributeName === 'data-media-vc-wrapper' || attributeName === 'data-auto-scrollable' || attributeName === 'id' || attributeName === 'tabindex' || NON_VISUAL_ARIA_ATTRIBUTES.includes(attributeName)) && (0, _platformFeatureFlags.fg)('platform_ufo_ignore_non_vis_attributes')) {
          return false;
        }
        return true;
      }
      if ((0, _isViewportEntryData.default)(entry.data) && !entry.data.visible) {
        return false;
      }
      return true;
    }
  }, {
    key: "getVCCleanStatus",
    value: function getVCCleanStatus(filteredEntries) {
      var dirtyReason = '';
      var hasAbortEvent = filteredEntries.some(function (entry) {
        if (entry.data.type === 'window:event') {
          var data = entry.data;
          if (ABORTING_WINDOW_EVENT.includes(data.eventType)) {
            dirtyReason = data.eventType === 'keydown' ? 'keypress' : data.eventType;
            return true;
          }
        }
        return false;
      });
      if (hasAbortEvent && dirtyReason) {
        return {
          isVCClean: false,
          dirtyReason: dirtyReason
        };
      }
      return {
        isVCClean: true
      };
    }
  }]);
}(_abstractBaseVcCalculator.default);