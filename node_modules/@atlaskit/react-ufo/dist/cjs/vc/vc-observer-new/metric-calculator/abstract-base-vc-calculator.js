"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _percentileCalc = require("./percentile-calc");
var _getViewportHeight = _interopRequireDefault(require("./utils/get-viewport-height"));
var _getViewportWidth = _interopRequireDefault(require("./utils/get-viewport-width"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var AbstractVCCalculatorBase = exports.default = /*#__PURE__*/function () {
  function AbstractVCCalculatorBase(revisionNo) {
    (0, _classCallCheck2.default)(this, AbstractVCCalculatorBase);
    this.revisionNo = revisionNo;
  }
  return (0, _createClass2.default)(AbstractVCCalculatorBase, [{
    key: "filterViewportEntries",
    value: function filterViewportEntries(entries) {
      return entries.filter(function (entry) {
        return 'rect' in entry.data;
      });
    }
  }, {
    key: "calculateBasic",
    value: function () {
      var _calculateBasic = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(filteredEntries, startTime, stopTime) {
        var percentiles, viewportEntries, vcLogs;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              percentiles = [25, 50, 75, 80, 85, 90, 95, 98, 99];
              viewportEntries = this.filterViewportEntries(filteredEntries);
              _context.next = 4;
              return (0, _percentileCalc.calculateTTVCPercentiles)({
                viewport: {
                  width: (0, _getViewportWidth.default)(),
                  height: (0, _getViewportHeight.default)()
                },
                startTime: startTime,
                stopTime: stopTime,
                orderedEntries: viewportEntries,
                percentiles: percentiles
              });
            case 4:
              vcLogs = _context.sent;
              return _context.abrupt("return", vcLogs);
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function calculateBasic(_x, _x2, _x3) {
        return _calculateBasic.apply(this, arguments);
      }
      return calculateBasic;
    }()
  }, {
    key: "calculateWithDebugInfo",
    value: function () {
      var _calculateWithDebugInfo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(filteredEntries, startTime, stopTime, isPostInteraction, isVCClean, interactionId, dirtyReason) {
        var percentiles, viewportEntries, vcLogs, vcDetails, percentileIndex, entryDataBuffer, _iterator, _step, _entry, time, viewportPercentage, entries, elementNames, previousResult, i, percentile, _ufo_devtool_onVCRev, _ref;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              percentiles = [25, 50, 75, 80, 85, 90, 95, 98, 99];
              viewportEntries = this.filterViewportEntries(filteredEntries);
              _context2.next = 4;
              return (0, _percentileCalc.calculateTTVCPercentilesWithDebugInfo)({
                viewport: {
                  width: (0, _getViewportWidth.default)(),
                  height: (0, _getViewportHeight.default)()
                },
                startTime: startTime,
                stopTime: stopTime,
                orderedEntries: viewportEntries
              });
            case 4:
              vcLogs = _context2.sent;
              vcDetails = {};
              percentileIndex = 0;
              entryDataBuffer = new Set();
              if (!vcLogs) {
                _context2.next = 28;
                break;
              }
              _iterator = _createForOfIteratorHelper(vcLogs);
              _context2.prev = 10;
              _iterator.s();
            case 12:
              if ((_step = _iterator.n()).done) {
                _context2.next = 20;
                break;
              }
              _entry = _step.value;
              time = _entry.time, viewportPercentage = _entry.viewportPercentage, entries = _entry.entries; // Only process entries if we haven't reached all percentiles
              if (!(percentileIndex >= percentiles.length)) {
                _context2.next = 17;
                break;
              }
              return _context2.abrupt("break", 20);
            case 17:
              // Check if this entry matches any checkpoint percentiles
              if (viewportPercentage >= percentiles[percentileIndex]) {
                elementNames = entries.map(function (e) {
                  return e.elementName;
                }); // Process all matching percentiles in one go
                while (percentileIndex < percentiles.length && viewportPercentage >= percentiles[percentileIndex]) {
                  vcDetails["".concat(percentiles[percentileIndex])] = {
                    t: Math.round(time),
                    e: elementNames
                  };
                  percentileIndex++;
                }

                // Clear buffer after processing all matching percentiles
                entryDataBuffer.clear();
              } else {
                // Only add to buffer if we haven't reached all percentiles
                entries.forEach(function (e) {
                  return entryDataBuffer.add(e);
                });
              }
            case 18:
              _context2.next = 12;
              break;
            case 20:
              _context2.next = 25;
              break;
            case 22:
              _context2.prev = 22;
              _context2.t0 = _context2["catch"](10);
              _iterator.e(_context2.t0);
            case 25:
              _context2.prev = 25;
              _iterator.f();
              return _context2.finish(25);
            case 28:
              // Fill in any missing percentiles with the last known values
              previousResult = {
                t: 0,
                e: []
              };
              for (i = 0; i < percentiles.length; i++) {
                percentile = percentiles[i];
                if (!(percentile in vcDetails)) {
                  vcDetails["".concat(percentile)] = previousResult;
                } else {
                  previousResult = vcDetails["".concat(percentile)];
                }
              }

              // Handle devtool callback
              if (!isPostInteraction && typeof window !== 'undefined' && typeof window.__ufo_devtool_onVCRevisionReady__ === 'function' && (0, _platformFeatureFlags.fg)('platform_ufo_ttvc_v3_devtool')) {
                try {
                  (_ufo_devtool_onVCRev = (_ref = window).__ufo_devtool_onVCRevisionReady__) === null || _ufo_devtool_onVCRev === void 0 || _ufo_devtool_onVCRev.call(_ref, {
                    revision: this.revisionNo,
                    isClean: isVCClean,
                    abortReason: dirtyReason,
                    vcLogs: vcLogs,
                    interactionId: interactionId
                  });
                } catch (e) {
                  // if any error communicating with devtool, we don't want to break the app
                  // eslint-disable-next-line no-console
                  console.error('Error in onVCRevisionReady', e);
                }
              }
              return _context2.abrupt("return", vcDetails);
            case 32:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[10, 22, 25, 28]]);
      }));
      function calculateWithDebugInfo(_x4, _x5, _x6, _x7, _x8, _x9, _x10) {
        return _calculateWithDebugInfo.apply(this, arguments);
      }
      return calculateWithDebugInfo;
    }()
  }, {
    key: "calculate",
    value: function () {
      var _calculate = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref2) {
        var _this = this,
          _vcDetails$90$t,
          _vcDetails$;
        var startTime, stopTime, orderedEntries, interactionId, isPostInteraction, filteredEntries, isVCClean, dirtyReason, getVCCleanStatusResult, useDebugInfo, vcDetails;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              startTime = _ref2.startTime, stopTime = _ref2.stopTime, orderedEntries = _ref2.orderedEntries, interactionId = _ref2.interactionId, isPostInteraction = _ref2.isPostInteraction;
              filteredEntries = orderedEntries.filter(function (entry) {
                return _this.isEntryIncluded(entry);
              });
              getVCCleanStatusResult = this.getVCCleanStatus(filteredEntries);
              isVCClean = getVCCleanStatusResult.isVCClean;
              dirtyReason = getVCCleanStatusResult.dirtyReason;
              if (isVCClean) {
                _context3.next = 7;
                break;
              }
              return _context3.abrupt("return", {
                revision: this.revisionNo,
                'metric:vc90': null,
                clean: false,
                abortReason: dirtyReason
              });
            case 7:
              useDebugInfo = (0, _platformFeatureFlags.fg)('platform_ufo_ttvc_v3_devtool');
              if (!useDebugInfo) {
                _context3.next = 14;
                break;
              }
              _context3.next = 11;
              return this.calculateWithDebugInfo(filteredEntries, startTime, stopTime, isPostInteraction, isVCClean, interactionId, dirtyReason);
            case 11:
              _context3.t0 = _context3.sent;
              _context3.next = 17;
              break;
            case 14:
              _context3.next = 16;
              return this.calculateBasic(filteredEntries, startTime, stopTime);
            case 16:
              _context3.t0 = _context3.sent;
            case 17:
              vcDetails = _context3.t0;
              return _context3.abrupt("return", {
                revision: this.revisionNo,
                clean: true,
                'metric:vc90': (_vcDetails$90$t = vcDetails === null || vcDetails === void 0 || (_vcDetails$ = vcDetails['90']) === null || _vcDetails$ === void 0 ? void 0 : _vcDetails$.t) !== null && _vcDetails$90$t !== void 0 ? _vcDetails$90$t : null,
                vcDetails: vcDetails !== null && vcDetails !== void 0 ? vcDetails : undefined
              });
            case 19:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function calculate(_x11) {
        return _calculate.apply(this, arguments);
      }
      return calculate;
    }()
  }]);
}();