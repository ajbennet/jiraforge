"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceUnsupportedMediaNodes = exports.replaceUnsupportedDocumentNodes = void 0;
const uuid_1 = require("uuid");
const traverse_1 = require("@atlaskit/adf-utils/traverse");
const replaceUnsupportedDocumentNodes = (document, replaceUnsupportedNode) => {
    const visitors = {
        // Partially supported nodes
        emoji: (node, parent, index, depth) => {
            if (node?.attrs?.id) {
                // Custom Atlassian generated emoji
                if (node.attrs.id.includes('atlassian')) {
                    return replaceUnsupportedNode(node, parent, index, depth);
                }
                // Custom user generated emoji
                const isIdGuid = (0, uuid_1.validate)(node.attrs.id);
                if (isIdGuid) {
                    return replaceUnsupportedNode(node, parent, index, depth);
                }
            }
        },
        // Fully unsupported nodes
        extension: replaceUnsupportedNode,
        bodiedExtension: replaceUnsupportedNode,
        inlineExtension: replaceUnsupportedNode,
        // Nodes shown when a bad node is passed
        confluenceUnsupportedBlock: replaceUnsupportedNode,
        confluenceUnsupportedInline: replaceUnsupportedNode,
        confluenceJiraIssue: replaceUnsupportedNode,
        unsupportedBlock: replaceUnsupportedNode,
        unsupportedInline: replaceUnsupportedNode,
        unknownBlock: replaceUnsupportedNode
    };
    return replaceDocumentWithVisitor(document, visitors);
};
exports.replaceUnsupportedDocumentNodes = replaceUnsupportedDocumentNodes;
const replaceUnsupportedMediaNodes = (document, replaceUnsupportedNode) => {
    const mediaVisitor = (node, parent, index, depth) => {
        if (!node?.attrs?.url) {
            return replaceUnsupportedNode(node, parent, index, depth);
        }
    };
    const visitors = {
        media: mediaVisitor,
        mediaInline: mediaVisitor
    };
    return replaceDocumentWithVisitor(document, visitors);
};
exports.replaceUnsupportedMediaNodes = replaceUnsupportedMediaNodes;
const replaceDocumentWithVisitor = (document, visitors) => {
    const updatedDoc = (0, traverse_1.traverse)(document, visitors);
    return updatedDoc ? { ...updatedDoc, version: document.version } : document;
};
