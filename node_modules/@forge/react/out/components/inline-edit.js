"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineEdit = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const content_wrapper_1 = require("./utils/content-wrapper");
const InlineEditPrimitive = 'InlineEdit';
/**
 * The following workaround is required because functions cannot be passed outside of the runtime.
 * The Renderer will invoke the function from within the runtime
 * Instead of passing the function, we are reimplementing validation and confirmation here to provide the same behaviour as the ADS version.
 *
 * The reimplemented functions include:
 * - validate
 * - onConfirm
 * - onCancel
 * - onEdit
 *
 * readView and editView also need to be evaluated here so that into a primitive type(JS object) to be rendered by the Renderer. Otherwise the Renderer will not be able to evaluate them on the product side.
 *
 */
const InlineEdit = ({ label, readView, editView, validate, startWithEditViewOpen, keepEditViewOpenOnBlur, hideActionButtons, isRequired, readViewFitContainerWidth, editButtonLabel, confirmButtonLabel, cancelButtonLabel, defaultValue, isEditing, onConfirm, onCancel, onEdit }) => {
    const [prevValue, setPrevValue] = (0, react_1.useState)();
    const [value, setValue] = (0, react_1.useState)(defaultValue);
    const [_isEditing, _setIsEditing] = (0, react_1.useState)(startWithEditViewOpen ? startWithEditViewOpen : false);
    const [errorMessage, setErrorMessage] = (0, react_1.useState)(undefined);
    const internalValidate = (newValue, setEdit, onConfirm) => {
        if (validate !== undefined) {
            const errorMessageFromValidation = validate(newValue, {}, {});
            const handleValidationResult = (error) => {
                setErrorMessage(error || undefined);
                // If no error and onConfirm is being called
                if (error === undefined && onConfirm) {
                    onConfirm(newValue);
                }
                if (setEdit) {
                    setEdit(error !== undefined);
                }
            };
            if (errorMessageFromValidation instanceof Promise) {
                void errorMessageFromValidation.then(handleValidationResult);
            }
            else {
                handleValidationResult(errorMessageFromValidation);
            }
        }
        else {
            if (setEdit) {
                setEdit(false);
            }
            if (onConfirm) {
                onConfirm(newValue);
            }
        }
    };
    const internalOnConfirm = () => {
        if (value === prevValue) {
            _setIsEditing(false);
            return;
        }
        internalValidate(value, _setIsEditing, onConfirm);
    };
    const internalOnChange = (e) => {
        const newValue = e.target ? e.target.value : e;
        setValue(newValue);
        internalValidate(newValue);
    };
    const internalOnEdit = () => {
        // Reset error state on first open
        setErrorMessage(undefined);
        _setIsEditing(true);
        setPrevValue(value);
        onEdit?.();
    };
    const internalOnCancel = () => {
        _setIsEditing(false);
        setValue(prevValue);
        onCancel?.();
    };
    return ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)(InlineEditPrimitive, { label: label, onConfirm: () => internalOnConfirm(), onEdit: () => internalOnEdit(), onCancel: () => internalOnCancel(), isEditing: isEditing !== undefined ? isEditing : _isEditing, startWithEditViewOpen: startWithEditViewOpen, keepEditViewOpenOnBlur: keepEditViewOpenOnBlur, hideActionButtons: hideActionButtons, isRequired: isRequired, readViewFitContainerWidth: readViewFitContainerWidth, editButtonLabel: editButtonLabel, confirmButtonLabel: confirmButtonLabel, cancelButtonLabel: cancelButtonLabel, children: [(0, jsx_runtime_1.jsx)(content_wrapper_1.ContentWrapper, { name: "editView", children: editView({
                        onChange: internalOnChange,
                        value,
                        errorMessage,
                        isInvalid: errorMessage !== undefined,
                        'aria-invalid': errorMessage !== undefined ? 'true' : 'false',
                        isRequired: isRequired || false
                    }) }), (0, jsx_runtime_1.jsx)(content_wrapper_1.ContentWrapper, { name: "readView", children: readView() })] }) }));
};
exports.InlineEdit = InlineEdit;
